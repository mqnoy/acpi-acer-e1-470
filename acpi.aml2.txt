/*
 * Intel ACPI Component Architecture
 * AML/ASL+ Disassembler version 20180427 (64-bit version)(RM)
 * Copyright (c) 2000 - 2018 Intel Corporation
 * 
 * Disassembling to non-symbolic legacy ASL operators
 *
 * Disassembly of iASLnhfiqb.aml, Sun Aug 30 20:28:07 2020
 *
 * Original Table Header:
 *     Signature        "DSDT"
 *     Length           0x0000DDE5 (56805)
 *     Revision         0x02
 *     Checksum         0x0F
 *     OEM ID           "ACRSYS"
 *     OEM Table ID     "IVB-CPT"
 *     OEM Revision     0x00000000 (0)
 *     Compiler ID      "INTL"
 *     Compiler Version 0x20180810 (538445840)
 */
DefinitionBlock ("", "DSDT", 2, "ACRSYS", "IVB-CPT", 0x00000000)
{
    External (_PR_.CPU0._PPC, UnknownObj)    // (from opcode)
    External (_PR_.CPU0._PSS, UnknownObj)    // (from opcode)
    External (_SB_.PCI0.IEIT.EITV, MethodObj)    // 0 Arguments (from opcode)
    External (_SB_.PCI0.IGPU, DeviceObj)    // (from opcode)
    External (CFGD, UnknownObj)    // (from opcode)
    External (HDOS, MethodObj)    // 0 Arguments (from opcode)
    External (HNOT, MethodObj)    // 1 Arguments (from opcode)
    External (HWID, IntObj)    // (from opcode)
    External (IDAB, MethodObj)    // 0 Arguments (from opcode)
    External (NVGS, IntObj)    // (from opcode)
    External (NVOP, IntObj)    // (from opcode)
    External (PDC0, UnknownObj)    // (from opcode)
    External (PDC1, UnknownObj)    // (from opcode)
    External (PDC2, UnknownObj)    // (from opcode)
    External (PDC3, UnknownObj)    // (from opcode)
    External (PDC4, UnknownObj)    // (from opcode)
    External (PDC5, UnknownObj)    // (from opcode)
    External (PDC6, UnknownObj)    // (from opcode)
    External (PDC7, UnknownObj)    // (from opcode)
    External (RMCF.BKLT, IntObj)    // (from opcode)
    External (RMCF.FBTP, IntObj)    // (from opcode)
    External (RMCF.GRAN, IntObj)    // (from opcode)
    External (RMCF.LEVW, IntObj)    // (from opcode)
    External (RMCF.LMAX, IntObj)    // (from opcode)
    External (TNOT, MethodObj)    // 0 Arguments (from opcode)

    Name (SS1, Zero)
    Name (SS2, Zero)
    Name (SS3, One)
    Name (SS4, One)
    Name (IOST, 0xFFFF)
    Name (SP2O, 0x4E)
    Name (SP1O, 0x164E)
    Name (IO1B, 0x0600)
    Name (IO1L, 0x70)
    Name (IO2B, 0x0680)
    Name (IO2L, 0x20)
    Name (IO3B, 0x0290)
    Name (IO3L, 0x10)
    Name (SP3O, 0x2E)
    Name (IO4B, 0x0A20)
    Name (IO4L, 0x20)
    Name (MCHB, 0xFED10000)
    Name (MCHL, 0x8000)
    Name (EGPB, 0xFED19000)
    Name (EGPL, 0x1000)
    Name (DMIB, 0xFED18000)
    Name (DMIL, 0x1000)
    Name (IFPB, 0xFED14000)
    Name (IFPL, 0x1000)
    Name (PEBS, 0xF8000000)
    Name (PELN, 0x04000000)
    Name (SMBS, 0x0580)
    Name (SMBL, 0x20)
    Name (PBLK, 0x0410)
    Name (PMBS, 0x0400)
    Name (PMLN, 0x80)
    Name (LVL2, 0x0414)
    Name (LVL3, 0x0415)
    Name (LVL4, 0x0416)
    Name (SMIP, 0xB2)
    Name (GPBS, 0x0500)
    Name (GPLN, 0x80)
    Name (APCB, 0xFEC00000)
    Name (APCL, 0x1000)
    Name (PM30, 0x0430)
    Name (SRCB, 0xFED1C000)
    Name (SRCL, 0x4000)
    Name (HPTB, 0xFED00000)
    Name (HPTC, 0xFED1F404)
    Name (ACPH, 0xDE)
    Name (ASSB, Zero)
    Name (AOTB, Zero)
    Name (AAXB, Zero)
    Name (PEHP, One)
    Name (SHPC, One)
    Name (PEPM, One)
    Name (PEER, One)
    Name (PECS, One)
    Name (DSSP, Zero)
    Name (FHPP, Zero)
    Name (FMBL, One)
    Name (FDTP, 0x02)
    Name (FUPS, 0x03)
    Name (BSH, Zero)
    Name (BEL, One)
    Name (BEH, 0x02)
    Name (BRH, 0x03)
    Name (BTF, 0x04)
    Name (BHC, 0x05)
    Name (BYB, 0x06)
    Name (BWB, 0x06)
    Name (BPH, 0x07)
    Name (BSHS, 0x08)
    Name (BELC, 0x09)
    Name (BRHP, 0x0A)
    Name (BTFC, 0x0B)
    Name (BEHP, 0x0C)
    Name (BELP, 0x0E)
    Name (BTL, 0x10)
    Name (BTFP, 0x11)
    Name (BSR, 0x14)
    Name (BCC, 0x1C)
    Name (BOF, 0x20)
    Name (BEF, 0x21)
    Name (BLLE, 0x22)
    Name (BLLC, 0x23)
    Name (BLCA, 0x24)
    Name (BLLS, 0x25)
    Name (BLLP, 0x26)
    Name (BLLD, 0x27)
    Name (BKF, 0x28)
    Name (BHBE, 0x30)
    Name (BHBC, 0x31)
    Name (BHBN, 0x32)
    Name (BHBM, 0x33)
    Name (TCGM, One)
    Name (TRTP, One)
    Name (WDTE, One)
    Name (TRTD, 0x02)
    Name (TRTI, 0x03)
    Name (GCDD, One)
    Name (DSTA, 0x0A)
    Name (DSLO, 0x0C)
    Name (DSLC, 0x0E)
    Name (PITS, 0x10)
    Name (SBCS, 0x12)
    Name (SALS, 0x13)
    Name (LSSS, 0x2A)
    Name (SOOT, 0x35)
    Name (PDBR, 0x4D)
    Name (DPPB, 0xFED98000)
    Name (DPPL, 0x8000)
    OperationRegion (GNVS, SystemMemory, 0xDAF7DE18, 0x01C8)
    Field (GNVS, AnyAcc, Lock, Preserve)
    {
        OSYS,   16, 
        SMIF,   8, 
        PRM0,   8, 
        PRM1,   8, 
        SCIF,   8, 
        PRM2,   8, 
        PRM3,   8, 
        LCKF,   8, 
        PRM4,   8, 
        PRM5,   8, 
        P80D,   32, 
        LIDS,   8, 
        PWRS,   8, 
        DBGS,   8, 
        THOF,   8, 
        ACT1,   8, 
        ACTT,   8, 
        PSVT,   8, 
        TC1V,   8, 
        TC2V,   8, 
        TSPV,   8, 
        CRTT,   8, 
        DTSE,   8, 
        DTS1,   8, 
        DTS2,   8, 
        DTSF,   8, 
        Offset (0x25), 
        REVN,   8, 
        IFFS,   8, 
        Offset (0x28), 
        APIC,   8, 
        TCNT,   8, 
        PCP0,   8, 
        PCP1,   8, 
        PPCM,   8, 
        PPMF,   32, 
        C67L,   8, 
        NATP,   8, 
        CMAP,   8, 
        CMBP,   8, 
        LPTP,   8, 
        FDCP,   8, 
        CMCP,   8, 
        CIRP,   8, 
        SMSC,   8, 
        W381,   8, 
        SMC1,   8, 
        IGDS,   8, 
        TLST,   8, 
        CADL,   8, 
        PADL,   8, 
        CSTE,   16, 
        NSTE,   16, 
        SSTE,   16, 
        NDID,   8, 
        DID1,   32, 
        DID2,   32, 
        DID3,   32, 
        DID4,   32, 
        DID5,   32, 
        KSV0,   32, 
        KSV1,   8, 
        Offset (0x67), 
        BLCS,   8, 
        BRTL,   8, 
        ALSE,   8, 
        ALAF,   8, 
        LLOW,   8, 
        LHIH,   8, 
        Offset (0x6E), 
        EMAE,   8, 
        EMAP,   16, 
        EMAL,   16, 
        Offset (0x74), 
        MEFE,   8, 
        DSTS,   8, 
        Offset (0x77), 
        TCMF,   8, 
        TPMP,   8, 
        TPME,   8, 
        MORD,   8, 
        TCGP,   8, 
        PPRP,   32, 
        PPRQ,   8, 
        LPPR,   8, 
        GTF0,   56, 
        GTF2,   56, 
        IDEM,   8, 
        GTF1,   56, 
        BID,    8, 
        PLID,   8, 
        AOAC,   8, 
        SLDR,   32, 
        WAKR,   8, 
        Offset (0xAA), 
        ASLB,   32, 
        IBTT,   8, 
        IPAT,   8, 
        ITVF,   8, 
        ITVM,   8, 
        IPSC,   8, 
        IBLC,   8, 
        IBIA,   8, 
        ISSC,   8, 
        I409,   8, 
        I509,   8, 
        I609,   8, 
        I709,   8, 
        IPCF,   8, 
        IDMS,   8, 
        IF1E,   8, 
        HVCO,   8, 
        NXD1,   32, 
        NXD2,   32, 
        NXD3,   32, 
        NXD4,   32, 
        NXD5,   32, 
        NXD6,   32, 
        NXD7,   32, 
        NXD8,   32, 
        GSMI,   8, 
        PAVP,   8, 
        Offset (0xE1), 
        OSCC,   8, 
        NEXP,   8, 
        SBV1,   8, 
        SBV2,   8, 
        Offset (0xEB), 
        DSEN,   8, 
        ECON,   8, 
        GPIC,   8, 
        CTYP,   8, 
        L01C,   8, 
        VFN0,   8, 
        VFN1,   8, 
        VFN2,   8, 
        VFN3,   8, 
        VFN4,   8, 
        Offset (0x100), 
        NVGA,   32, 
        NVHA,   32, 
        AMDA,   32, 
        DID6,   32, 
        DID7,   32, 
        DID8,   32, 
        EBAS,   32, 
        CPSP,   32, 
        EECP,   32, 
        EVCP,   32, 
        XBAS,   32, 
        OBS1,   32, 
        OBS2,   32, 
        OBS3,   32, 
        OBS4,   32, 
        OBS5,   32, 
        OBS6,   32, 
        OBS7,   32, 
        OBS8,   32, 
        Offset (0x157), 
        ATMC,   8, 
        PTMC,   8, 
        ATRA,   8, 
        PTRA,   8, 
        PNHM,   32, 
        TBAB,   32, 
        TBAH,   32, 
        RTIP,   8, 
        TSOD,   8, 
        ATPC,   8, 
        PTPC,   8, 
        PFLV,   8, 
        BREV,   8, 
        SGMD,   8, 
        SGFL,   8, 
        PWOK,   8, 
        HLRS,   8, 
        DSEL,   8, 
        ESEL,   8, 
        PSEL,   8, 
        PWEN,   8, 
        PRST,   8, 
        MXD1,   32, 
        MXD2,   32, 
        MXD3,   32, 
        MXD4,   32, 
        MXD5,   32, 
        MXD6,   32, 
        MXD7,   32, 
        MXD8,   32, 
        GBAS,   16, 
        SGGP,   8, 
        Offset (0x19D), 
        ALFP,   8, 
        IMON,   8, 
        PDTS,   8, 
        PKGA,   8, 
        PAMT,   8, 
        AC0F,   8, 
        AC1F,   8, 
        DTS3,   8, 
        DTS4,   8, 
        Offset (0x1B2), 
        XHC,    8, 
        XHPM,   8, 
        Offset (0x1B7), 
        XTUB,   32, 
        XTUS,   32, 
        XMPB,   32, 
        Offset (0x1C4), 
        LPMV,   8, 
        Offset (0x1C6), 
        DDRF,   8, 
        MM64,   8
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        Zero, 
        Zero, 
        Zero, 
        Zero
    })
    If (SS1)
    {
        Name (_S1, Package (0x04)  // _S1_: S1 System State
        {
            One, 
            Zero, 
            Zero, 
            Zero
        })
    }

    If (SS3)
    {
        Name (_S3, Package (0x04)  // _S3_: S3 System State
        {
            0x05, 
            Zero, 
            Zero, 
            Zero
        })
    }

    If (SS4)
    {
        Name (_S4, Package (0x04)  // _S4_: S4 System State
        {
            0x06, 
            Zero, 
            Zero, 
            Zero
        })
    }

    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x07, 
        Zero, 
        Zero, 
        Zero
    })
    Scope (_SB)
    {
        Name (PR00, Package (0x1F)
        {
            Package (0x04)
            {
                0x001FFFFF, 
                Zero, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x03, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                Zero, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0x0018FFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                Zero, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x03, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x03, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR00, Package (0x1F)
        {
            Package (0x04)
            {
                0x001FFFFF, 
                Zero, 
                Zero, 
                0x15
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x03, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                Zero, 
                Zero, 
                0x15
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                Zero, 
                Zero, 
                0x17
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                Zero, 
                Zero, 
                0x16
            }, 

            Package (0x04)
            {
                0x0018FFFF, 
                Zero, 
                Zero, 
                0x14
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                Zero, 
                Zero, 
                0x14
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x03, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0006FFFF, 
                0x03, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PR04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR04, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PR05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR05, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PR06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR06, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PR07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                Zero
            }
        })
        Name (AR07, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Name (PR08, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR08, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PR09, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR09, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PR0E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR0E, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PR0F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                Zero
            }
        })
        Name (AR0F, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Name (PR02, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                Zero
            }
        })
        Name (AR02, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x13
            }
        })
        Name (PR0A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKA, 
                Zero
            }
        })
        Name (AR0A, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x10
            }
        })
        Name (PR0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                Zero
            }
        })
        Name (AR0B, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x11
            }
        })
        Name (PR0C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKD, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKA, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                Zero
            }
        })
        Name (AR0C, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x12
            }
        })
        Name (PR01, Package (0x0C)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                LNKF, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKH, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                LNKC, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                One, 
                LNKE, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                LNKG, 
                Zero
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                LNKF, 
                Zero
            }
        })
        Name (AR01, Package (0x0C)
        {
            Package (0x04)
            {
                0xFFFF, 
                Zero, 
                Zero, 
                0x15
            }, 

            Package (0x04)
            {
                0xFFFF, 
                One, 
                Zero, 
                0x16
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                Zero, 
                0x17
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                Zero, 
                0x14
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                Zero, 
                Zero, 
                0x16
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                One, 
                Zero, 
                0x15
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                Zero, 
                0x14
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                Zero, 
                0x17
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                Zero, 
                Zero, 
                0x12
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                One, 
                Zero, 
                0x14
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x02, 
                Zero, 
                0x16
            }, 

            Package (0x04)
            {
                0x0005FFFF, 
                0x03, 
                Zero, 
                0x15
            }
        })
        Name (PRSA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {1,3,4,5,6,10,11,12,14,15}
        })
        Alias (PRSA, PRSB)
        Alias (PRSA, PRSC)
        Alias (PRSA, PRSD)
        Alias (PRSA, PRSE)
        Alias (PRSA, PRSF)
        Alias (PRSA, PRSG)
        Alias (PRSA, PRSH)
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08"))  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03"))  // _CID: Compatible ID
            Name (_ADR, Zero)  // _ADR: Address
            Method (^BN00, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN00 ())
            }

            Name (_UID, Zero)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00 ())
                }

                Return (PR00 ())
            }

            OperationRegion (HBUS, PCI_Config, Zero, 0x0100)
            Field (HBUS, DWordAcc, NoLock, Preserve)
            {
                Offset (0x40), 
                EPEN,   1, 
                    ,   11, 
                EPBR,   20, 
                Offset (0x48), 
                MHEN,   1, 
                    ,   14, 
                MHBR,   17, 
                Offset (0x50), 
                GCLK,   1, 
                Offset (0x54), 
                D0EN,   1, 
                Offset (0x60), 
                PXEN,   1, 
                PXSZ,   2, 
                    ,   23, 
                PXBR,   6, 
                Offset (0x68), 
                DIEN,   1, 
                    ,   11, 
                DIBR,   20, 
                Offset (0x70), 
                    ,   20, 
                MEBR,   12, 
                Offset (0x80), 
                    ,   4, 
                PM0H,   2, 
                Offset (0x81), 
                PM1L,   2, 
                    ,   2, 
                PM1H,   2, 
                Offset (0x82), 
                PM2L,   2, 
                    ,   2, 
                PM2H,   2, 
                Offset (0x83), 
                PM3L,   2, 
                    ,   2, 
                PM3H,   2, 
                Offset (0x84), 
                PM4L,   2, 
                    ,   2, 
                PM4H,   2, 
                Offset (0x85), 
                PM5L,   2, 
                    ,   2, 
                PM5H,   2, 
                Offset (0x86), 
                PM6L,   2, 
                    ,   2, 
                PM6H,   2, 
                Offset (0x87), 
                Offset (0xA8), 
                    ,   20, 
                TUUD,   19, 
                Offset (0xBC), 
                    ,   20, 
                TLUD,   12, 
                Offset (0xC8), 
                    ,   7, 
                HTSE,   1
            }

            OperationRegion (MCHT, SystemMemory, 0xFED10000, 0x1100)
            Field (MCHT, ByteAcc, NoLock, Preserve)
            {
            }

            Name (BUF0, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0100,             // Length
                    ,, _Y00)
                DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000CF7,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000CF8,         // Length
                    ,, , TypeStatic, DenseTranslation)
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                DWordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x00000000,         // Granularity
                    0x00000D00,         // Range Minimum
                    0x0000FFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x0000F300,         // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C0000,         // Range Minimum
                    0x000C3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y01, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C4000,         // Range Minimum
                    0x000C7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y02, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000C8000,         // Range Minimum
                    0x000CBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y03, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000CC000,         // Range Minimum
                    0x000CFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y04, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D0000,         // Range Minimum
                    0x000D3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y05, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D4000,         // Range Minimum
                    0x000D7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y06, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000D8000,         // Range Minimum
                    0x000DBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y07, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000DC000,         // Range Minimum
                    0x000DFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y08, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E0000,         // Range Minimum
                    0x000E3FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y09, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E4000,         // Range Minimum
                    0x000E7FFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y0A, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000E8000,         // Range Minimum
                    0x000EBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y0B, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000EC000,         // Range Minimum
                    0x000EFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00004000,         // Length
                    ,, _Y0C, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000F0000,         // Range Minimum
                    0x000FFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00010000,         // Length
                    ,, _Y0D, AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0xFEAFFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0xFEB00000,         // Length
                    ,, _Y0E, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000010000, // Range Minimum
                    0x000000000001FFFF, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000010000, // Length
                    ,, _Y0F, AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                CreateWordField (BUF0, \_SB.PCI0._Y00._MAX, PBMX)  // _MAX: Maximum Base Address
                Subtract (ShiftRight (PELN, 0x14), 0x02, PBMX)
                CreateWordField (BUF0, \_SB.PCI0._Y00._LEN, PBLN)  // _LEN: Length
                Subtract (ShiftRight (PELN, 0x14), One, PBLN)
                If (PM1L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y01._LEN, C0LN)  // _LEN: Length
                    Store (Zero, C0LN)
                }

                If (LEqual (PM1L, One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y01._RW, C0RW)  // _RW_: Read-Write Status
                    Store (Zero, C0RW)
                }

                If (PM1H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y02._LEN, C4LN)  // _LEN: Length
                    Store (Zero, C4LN)
                }

                If (LEqual (PM1H, One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y02._RW, C4RW)  // _RW_: Read-Write Status
                    Store (Zero, C4RW)
                }

                If (PM2L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y03._LEN, C8LN)  // _LEN: Length
                    Store (Zero, C8LN)
                }

                If (LEqual (PM2L, One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y03._RW, C8RW)  // _RW_: Read-Write Status
                    Store (Zero, C8RW)
                }

                If (PM2H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y04._LEN, CCLN)  // _LEN: Length
                    Store (Zero, CCLN)
                }

                If (LEqual (PM2H, One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y04._RW, CCRW)  // _RW_: Read-Write Status
                    Store (Zero, CCRW)
                }

                If (PM3L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y05._LEN, D0LN)  // _LEN: Length
                    Store (Zero, D0LN)
                }

                If (LEqual (PM3L, One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y05._RW, D0RW)  // _RW_: Read-Write Status
                    Store (Zero, D0RW)
                }

                If (PM3H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y06._LEN, D4LN)  // _LEN: Length
                    Store (Zero, D4LN)
                }

                If (LEqual (PM3H, One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y06._RW, D4RW)  // _RW_: Read-Write Status
                    Store (Zero, D4RW)
                }

                If (PM4L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y07._LEN, D8LN)  // _LEN: Length
                    Store (Zero, D8LN)
                }

                If (LEqual (PM4L, One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y07._RW, D8RW)  // _RW_: Read-Write Status
                    Store (Zero, D8RW)
                }

                If (PM4H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y08._LEN, DCLN)  // _LEN: Length
                    Store (Zero, DCLN)
                }

                If (LEqual (PM4H, One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y08._RW, DCRW)  // _RW_: Read-Write Status
                    Store (Zero, DCRW)
                }

                If (PM5L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y09._LEN, E0LN)  // _LEN: Length
                    Store (Zero, E0LN)
                }

                If (LEqual (PM5L, One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y09._RW, E0RW)  // _RW_: Read-Write Status
                    Store (Zero, E0RW)
                }

                If (PM5H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0A._LEN, E4LN)  // _LEN: Length
                    Store (Zero, E4LN)
                }

                If (LEqual (PM5H, One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0A._RW, E4RW)  // _RW_: Read-Write Status
                    Store (Zero, E4RW)
                }

                If (PM6L)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0B._LEN, E8LN)  // _LEN: Length
                    Store (Zero, E8LN)
                }

                If (LEqual (PM6L, One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0B._RW, E8RW)  // _RW_: Read-Write Status
                    Store (Zero, E8RW)
                }

                If (PM6H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0C._LEN, ECLN)  // _LEN: Length
                    Store (Zero, ECLN)
                }

                If (LEqual (PM6H, One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0C._RW, ECRW)  // _RW_: Read-Write Status
                    Store (Zero, ECRW)
                }

                If (PM0H)
                {
                    CreateDWordField (BUF0, \_SB.PCI0._Y0D._LEN, F0LN)  // _LEN: Length
                    Store (Zero, F0LN)
                }

                If (LEqual (PM0H, One))
                {
                    CreateBitField (BUF0, \_SB.PCI0._Y0D._RW, F0RW)  // _RW_: Read-Write Status
                    Store (Zero, F0RW)
                }

                CreateDWordField (BUF0, \_SB.PCI0._Y0E._MIN, M1MN)  // _MIN: Minimum Base Address
                CreateDWordField (BUF0, \_SB.PCI0._Y0E._MAX, M1MX)  // _MAX: Maximum Base Address
                CreateDWordField (BUF0, \_SB.PCI0._Y0E._LEN, M1LN)  // _LEN: Length
                ShiftLeft (TLUD, 0x14, M1MN)
                Add (Subtract (M1MX, M1MN), One, M1LN)
                If (LOr (LEqual (MM64, Zero), LLessEqual (OSYS, 0x07D3)))
                {
                    CreateQWordField (BUF0, \_SB.PCI0._Y0F._LEN, MSLN)  // _LEN: Length
                    Store (Zero, MSLN)
                }
                Else
                {
                    CreateQWordField (BUF0, \_SB.PCI0._Y0F._LEN, M2LN)  // _LEN: Length
                    CreateQWordField (BUF0, \_SB.PCI0._Y0F._MIN, M2MN)  // _MIN: Minimum Base Address
                    CreateQWordField (BUF0, \_SB.PCI0._Y0F._MAX, M2MX)  // _MAX: Maximum Base Address
                    Store (0x0000000400000000, M2LN)
                    If (LGreaterEqual (TUUD, 0x1000))
                    {
                        ShiftLeft (TUUD, 0x14, M2MN)
                    }
                    Else
                    {
                        Store (0x0000000100000000, M2MN)
                    }

                    Subtract (Add (M2MN, M2LN), One, M2MX)
                }

                Return (BUF0)
            }

            Name (GUID, ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */)
            Name (SUPP, Zero)
            Name (CTRL, Zero)
            Name (XCNT, Zero)
            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                Store (Arg3, Local0)
                CreateDWordField (Local0, Zero, CDW1)
                CreateDWordField (Local0, 0x04, CDW2)
                CreateDWordField (Local0, 0x08, CDW3)
                If (^XHC.CUID (Arg0))
                {
                    Return (^XHC.POSC (Arg1, Arg2, Arg3))
                }
                Else
                {
                    If (LOr (_OSI ("Darwin"), _OSI ("Windows 2012")))
                    {
                        If (LEqual (XCNT, Zero))
                        {
                            ^XHC.XSEL ()
                            Increment (XCNT)
                        }
                    }

                    If (_OSI ("Windows 2013"))
                    {
                        If (LEqual (XCNT, Zero))
                        {
                            ^XHC.XSEL ()
                            Increment (XCNT)
                        }
                    }
                }

                If (LAnd (LEqual (Arg0, GUID), NEXP))
                {
                    Store (CDW2, SUPP)
                    Store (CDW3, CTRL)
                    If (Not (And (CDW1, One)))
                    {
                        If (And (CTRL, One))
                        {
                            NHPG ()
                        }

                        If (And (CTRL, 0x04))
                        {
                            NPME ()
                        }
                    }

                    If (LNotEqual (Arg1, One))
                    {
                        Or (CDW1, 0x08, CDW1)
                    }

                    If (LNotEqual (CDW3, CTRL))
                    {
                        Or (CDW1, 0x10, CDW1)
                    }

                    Store (CTRL, CDW3)
                    Store (CTRL, OSCC)
                    Return (Local0)
                }
                Else
                {
                    Or (CDW1, 0x04, CDW1)
                    Return (Local0)
                }
            }

            Scope (\_SB.PCI0)
            {
                Method (AR00, 0, NotSerialized)
                {
                    Return (^^AR00)
                }

                Method (PR00, 0, NotSerialized)
                {
                    Return (^^PR00)
                }

                Method (AR01, 0, NotSerialized)
                {
                    Return (^^AR01)
                }

                Method (PR01, 0, NotSerialized)
                {
                    Return (^^PR01)
                }

                Method (AR02, 0, NotSerialized)
                {
                    Return (^^AR02)
                }

                Method (PR02, 0, NotSerialized)
                {
                    Return (^^PR02)
                }

                Method (AR04, 0, NotSerialized)
                {
                    Return (^^AR04)
                }

                Method (PR04, 0, NotSerialized)
                {
                    Return (^^PR04)
                }

                Method (AR05, 0, NotSerialized)
                {
                    Return (^^AR05)
                }

                Method (PR05, 0, NotSerialized)
                {
                    Return (^^PR05)
                }

                Method (AR06, 0, NotSerialized)
                {
                    Return (^^AR06)
                }

                Method (PR06, 0, NotSerialized)
                {
                    Return (^^PR06)
                }

                Method (AR07, 0, NotSerialized)
                {
                    Return (^^AR07)
                }

                Method (PR07, 0, NotSerialized)
                {
                    Return (^^PR07)
                }

                Method (AR08, 0, NotSerialized)
                {
                    Return (^^AR08)
                }

                Method (PR08, 0, NotSerialized)
                {
                    Return (^^PR08)
                }

                Method (AR09, 0, NotSerialized)
                {
                    Return (^^AR09)
                }

                Method (PR09, 0, NotSerialized)
                {
                    Return (^^PR09)
                }

                Method (AR0A, 0, NotSerialized)
                {
                    Return (^^AR0A)
                }

                Method (PR0A, 0, NotSerialized)
                {
                    Return (^^PR0A)
                }

                Method (AR0B, 0, NotSerialized)
                {
                    Return (^^AR0B)
                }

                Method (PR0B, 0, NotSerialized)
                {
                    Return (^^PR0B)
                }
            }

            Device (P0P1)
            {
                Name (_ADR, 0x001E0000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0B, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AR01 ())
                    }

                    Return (PR01 ())
                }
            }

            Device (LPCB)
            {
                Name (_ADR, 0x001F0000)  // _ADR: Address
                Scope (\_SB)
                {
                    OperationRegion (PCI0.LPCB.LPC1, PCI_Config, 0x40, 0xC0)
                    Field (PCI0.LPCB.LPC1, AnyAcc, NoLock, Preserve)
                    {
                        Offset (0x20), 
                        PARC,   8, 
                        PBRC,   8, 
                        PCRC,   8, 
                        PDRC,   8, 
                        Offset (0x28), 
                        PERC,   8, 
                        PFRC,   8, 
                        PGRC,   8, 
                        PHRC,   8, 
                        Offset (0x6C), 
                        Offset (0x6D), 
                        Offset (0x6E), 
                        XUSB,   1
                    }

                    Device (LNKA)
                    {
                        Name (_HID, EisaId ("PNP0C0F"))  // _HID: Hardware ID
                        Name (_UID, One)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            Or (PARC, 0x80, PARC)
                        }

                        Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
                        {
                            Return (PRSA)
                        }

                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLA, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLA, One, IRQ0)
                            Store (Zero, IRQ0)
                            ShiftLeft (One, And (PARC, 0x0F), IRQ0)
                            Return (RTLA)
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Decrement (Local0)
                            Store (Local0, PARC)
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If (And (PARC, 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKB)
                    {
                        Name (_HID, EisaId ("PNP0C0F"))  // _HID: Hardware ID
                        Name (_UID, 0x02)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            Or (PBRC, 0x80, PBRC)
                        }

                        Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
                        {
                            Return (PRSB)
                        }

                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLB, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLB, One, IRQ0)
                            Store (Zero, IRQ0)
                            ShiftLeft (One, And (PBRC, 0x0F), IRQ0)
                            Return (RTLB)
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Decrement (Local0)
                            Store (Local0, PBRC)
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If (And (PBRC, 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKC)
                    {
                        Name (_HID, EisaId ("PNP0C0F"))  // _HID: Hardware ID
                        Name (_UID, 0x03)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            Or (PCRC, 0x80, PCRC)
                        }

                        Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
                        {
                            Return (PRSC)
                        }

                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLC, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLC, One, IRQ0)
                            Store (Zero, IRQ0)
                            ShiftLeft (One, And (PCRC, 0x0F), IRQ0)
                            Return (RTLC)
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Decrement (Local0)
                            Store (Local0, PCRC)
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If (And (PCRC, 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKD)
                    {
                        Name (_HID, EisaId ("PNP0C0F"))  // _HID: Hardware ID
                        Name (_UID, 0x04)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            Or (PDRC, 0x80, PDRC)
                        }

                        Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
                        {
                            Return (PRSD)
                        }

                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLD, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLD, One, IRQ0)
                            Store (Zero, IRQ0)
                            ShiftLeft (One, And (PDRC, 0x0F), IRQ0)
                            Return (RTLD)
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Decrement (Local0)
                            Store (Local0, PDRC)
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If (And (PDRC, 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKE)
                    {
                        Name (_HID, EisaId ("PNP0C0F"))  // _HID: Hardware ID
                        Name (_UID, 0x05)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            Or (PERC, 0x80, PERC)
                        }

                        Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
                        {
                            Return (PRSE)
                        }

                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLE, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLE, One, IRQ0)
                            Store (Zero, IRQ0)
                            ShiftLeft (One, And (PERC, 0x0F), IRQ0)
                            Return (RTLE)
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Decrement (Local0)
                            Store (Local0, PERC)
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If (And (PERC, 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKF)
                    {
                        Name (_HID, EisaId ("PNP0C0F"))  // _HID: Hardware ID
                        Name (_UID, 0x06)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            Or (PFRC, 0x80, PFRC)
                        }

                        Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
                        {
                            Return (PRSF)
                        }

                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLF, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLF, One, IRQ0)
                            Store (Zero, IRQ0)
                            ShiftLeft (One, And (PFRC, 0x0F), IRQ0)
                            Return (RTLF)
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Decrement (Local0)
                            Store (Local0, PFRC)
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If (And (PFRC, 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKG)
                    {
                        Name (_HID, EisaId ("PNP0C0F"))  // _HID: Hardware ID
                        Name (_UID, 0x07)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            Or (PGRC, 0x80, PGRC)
                        }

                        Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
                        {
                            Return (PRSG)
                        }

                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLG, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLG, One, IRQ0)
                            Store (Zero, IRQ0)
                            ShiftLeft (One, And (PGRC, 0x0F), IRQ0)
                            Return (RTLG)
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Decrement (Local0)
                            Store (Local0, PGRC)
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If (And (PGRC, 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }

                    Device (LNKH)
                    {
                        Name (_HID, EisaId ("PNP0C0F"))  // _HID: Hardware ID
                        Name (_UID, 0x08)  // _UID: Unique ID
                        Method (_DIS, 0, Serialized)  // _DIS: Disable Device
                        {
                            Or (PHRC, 0x80, PHRC)
                        }

                        Method (_PRS, 0, Serialized)  // _PRS: Possible Resource Settings
                        {
                            Return (PRSH)
                        }

                        Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                        {
                            Name (RTLH, ResourceTemplate ()
                            {
                                IRQ (Level, ActiveLow, Shared, )
                                    {}
                            })
                            CreateWordField (RTLH, One, IRQ0)
                            Store (Zero, IRQ0)
                            ShiftLeft (One, And (PHRC, 0x0F), IRQ0)
                            Return (RTLH)
                        }

                        Method (_SRS, 1, Serialized)  // _SRS: Set Resource Settings
                        {
                            CreateWordField (Arg0, One, IRQ0)
                            FindSetRightBit (IRQ0, Local0)
                            Decrement (Local0)
                            Store (Local0, PHRC)
                        }

                        Method (_STA, 0, Serialized)  // _STA: Status
                        {
                            If (And (PHRC, 0x80))
                            {
                                Return (0x09)
                            }
                            Else
                            {
                                Return (0x0B)
                            }
                        }
                    }
                }

                OperationRegion (LPC0, PCI_Config, 0x40, 0xC0)
                Field (LPC0, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x40), 
                    IOD0,   8, 
                    IOD1,   8, 
                    Offset (0xB0), 
                    RAEN,   1, 
                        ,   13, 
                    RCBA,   18
                }

                Device (FWHD)
                {
                    Name (_HID, EisaId ("INT0800"))  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        Memory32Fixed (ReadOnly,
                            0xFF000000,         // Address Base
                            0x01000000,         // Address Length
                            )
                    })
                }

                Device (IPIC)
                {
                    Name (_HID, EisaId ("PNP0000"))  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0024,             // Range Minimum
                            0x0024,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0028,             // Range Minimum
                            0x0028,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x002C,             // Range Minimum
                            0x002C,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0030,             // Range Minimum
                            0x0030,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0034,             // Range Minimum
                            0x0034,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0038,             // Range Minimum
                            0x0038,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x003C,             // Range Minimum
                            0x003C,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A4,             // Range Minimum
                            0x00A4,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00A8,             // Range Minimum
                            0x00A8,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00AC,             // Range Minimum
                            0x00AC,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00B0,             // Range Minimum
                            0x00B0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00B4,             // Range Minimum
                            0x00B4,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00B8,             // Range Minimum
                            0x00B8,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x00BC,             // Range Minimum
                            0x00BC,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                    })
                }

                Device (MATH)
                {
                    Name (_HID, EisaId ("PNP0C04"))  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x00F0,             // Range Minimum
                            0x00F0,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {13}
                    })
                }

                Device (LDRC)
                {
                    Name (_HID, EisaId ("PNP0C02"))  // _HID: Hardware ID
                    Name (_UID, 0x02)  // _UID: Unique ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x002E,             // Range Minimum
                            0x002E,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x004E,             // Range Minimum
                            0x004E,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0063,             // Range Minimum
                            0x0063,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0065,             // Range Minimum
                            0x0065,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0067,             // Range Minimum
                            0x0067,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0092,             // Range Minimum
                            0x0092,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00B2,             // Range Minimum
                            0x00B2,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x1000,             // Range Minimum
                            0x1000,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0xFFFF,             // Range Minimum
                            0xFFFF,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0xFFFF,             // Range Minimum
                            0xFFFF,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0400,             // Range Minimum
                            0x0400,             // Range Maximum
                            0x01,               // Alignment
                            0x54,               // Length
                            )
                        IO (Decode16,
                            0x0458,             // Range Minimum
                            0x0458,             // Range Maximum
                            0x01,               // Alignment
                            0x28,               // Length
                            )
                        IO (Decode16,
                            0x0500,             // Range Minimum
                            0x0500,             // Range Maximum
                            0x01,               // Alignment
                            0x80,               // Length
                            )
                        IO (Decode16,
                            0x0068,             // Range Minimum
                            0x0068,             // Range Maximum
                            0x01,               // Alignment
                            0x08,               // Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFE800000,         // Address Base
                            0x00010000,         // Address Length
                            )
                    })
                }

                Device (TIMR)
                {
                    Name (_HID, EisaId ("PNP0100"))  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IO (Decode16,
                            0x0050,             // Range Minimum
                            0x0050,             // Range Maximum
                            0x10,               // Alignment
                            0x04,               // Length
                            )
                    })
                }

                Device (CWDT)
                {
                    Name (_HID, EisaId ("INT3F0D"))  // _HID: Hardware ID
                    Name (_CID, EisaId ("PNP0C02"))  // _CID: Compatible ID
                    Name (BUF0, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0454,             // Range Minimum
                            0x0454,             // Range Maximum
                            0x04,               // Alignment
                            0x04,               // Length
                            )
                    })
                    Method (_STA, 0, Serialized)  // _STA: Status
                    {
                        If (LEqual (WDTE, One))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (Zero)
                        }
                    }

                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        Return (BUF0)
                    }
                }

                Device (HPET)
                {
                    Name (_HID, EisaId ("PNP0103"))  // _HID: Hardware ID
                    Name (_CID, EisaId ("PNP0C01"))  // _CID: Compatible ID
                    Name (_STA, 0x0F)  // _STA: Status
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IRQNoFlags ()
                            {0}
                        IRQNoFlags ()
                            {8}
                        IRQNoFlags ()
                            {11}
                        IRQNoFlags ()
                            {15}
                        Memory32Fixed (ReadWrite,
                            0xFED00000,         // Address Base
                            0x00000400,         // Address Length
                            )
                    })
                }

                Device (RTC)
                {
                    Name (_HID, EisaId ("PNP0B00"))  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x00,               // Alignment
                            0x02,               // Length
                            )
                    })
                }

                Device (DMAC)
                {
                    Name (_HID, EisaId ("PNP0200"))  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x01,               // Alignment
                            0x11,               // Length
                            )
                        IO (Decode16,
                            0x0093,             // Range Minimum
                            0x0093,             // Range Maximum
                            0x01,               // Alignment
                            0x0D,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        DMA (Compatibility, NotBusMaster, Transfer8_16, )
                            {4}
                    })
                }

                Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                {
                    If (LEqual (Arg2, Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x03                                           
                        })
                    }

                    Return (Package (0x06)
                    {
                        "device-id", 
                        Buffer (0x04)
                        {
                             0x43, 0x9C, 0x00, 0x00                         
                        }, 

                        "name", 
                        Buffer (0x0D)
                        {
                            "pci8086,9c43"
                        }, 

                        "compatible", 
                        Buffer (0x0D)
                        {
                            "pci8086,9c43"
                        }
                    })
                }

                Device (ALS0)
                {
                    Name (_HID, "ACPI0008")  // _HID: Hardware ID
                    Name (_CID, "smc-als")  // _CID: Compatible ID
                    Name (_ALI, 0x012C)  // _ALI: Ambient Light Illuminance
                    Name (_ALR, Package (0x01)  // _ALR: Ambient Light Response
                    {
                        Package (0x02)
                        {
                            0x64, 
                            0x012C
                        }
                    })
                }
            }

            Device (MCHC)
            {
                Name (_ADR, Zero)  // _ADR: Address
            }

            Device (IMEI)
            {
                Name (_ADR, 0x00160000)  // _ADR: Address
                Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                {
                    If (LEqual (Arg2, Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x03                                           
                        })
                    }

                    Return (Package (0x08)
                    {
                        "AAPL,slot-name", 
                        "Built In", 
                        "model", 
                        Buffer (0x31)
                        {
                            "Intel Corporation, Series Chipset MEI Controller"
                        }, 

                        "name", 
                        Buffer (0x16)
                        {
                            "Intel IMEI Controller"
                        }, 

                        "device_type", 
                        Buffer (0x10)
                        {
                            "IMEI Controller"
                        }
                    })
                }
            }
        }

        Device (SLPB)
        {
            Name (_HID, EisaId ("PNP0C0E"))  // _HID: Hardware ID
            Name (_STA, 0x0B)  // _STA: Status
        }
    }

    Scope (_PR)
    {
        Processor (CPU0, 0x01, 0x00000410, 0x06){}
        Processor (CPU1, 0x02, 0x00000410, 0x06){}
        Processor (CPU2, 0x03, 0x00000410, 0x06){}
        Processor (CPU3, 0x04, 0x00000410, 0x06){}
        Processor (CPU4, 0x05, 0x00000410, 0x06){}
        Processor (CPU5, 0x06, 0x00000410, 0x06){}
        Processor (CPU6, 0x07, 0x00000410, 0x06){}
        Processor (CPU7, 0x08, 0x00000410, 0x06){}
    }

    Mutex (MUTX, 0x00)
    OperationRegion (PRT0, SystemIO, 0x80, 0x04)
    Field (PRT0, DWordAcc, Lock, Preserve)
    {
        P80H,   32
    }

    Method (P8XH, 2, Serialized)
    {
        If (LEqual (Arg0, Zero))
        {
            Or (And (P80D, 0xFFFFFF00), Arg1, P80D)
        }

        If (LEqual (Arg0, One))
        {
            Or (And (P80D, 0xFFFF00FF), ShiftLeft (Arg1, 0x08), P80D)
        }

        If (LEqual (Arg0, 0x02))
        {
            Or (And (P80D, 0xFF00FFFF), ShiftLeft (Arg1, 0x10), P80D)
        }

        If (LEqual (Arg0, 0x03))
        {
            Or (And (P80D, 0x00FFFFFF), ShiftLeft (Arg1, 0x18), P80D)
        }

        Store (P80D, P80H)
    }

    OperationRegion (SPRT, SystemIO, 0xB2, 0x02)
    Field (SPRT, ByteAcc, Lock, Preserve)
    {
        SSMP,   8
    }

    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        Store (Arg0, GPIC)
        Store (Arg0, PICM)
    }

    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        Store (Zero, P80D)
        P8XH (Zero, Arg0)
        \_SB.PCI0.LPCB.EC0.ECPS (Arg0)
        If (LEqual (0x05, Arg0))
        {
            Store (Zero, \_SB.PCI0.XHC.PMEE)
        }
    }

    Method (_WAK, 1, Serialized)  // _WAK: Wake
    {
        P8XH (One, 0xAB)
        \_SB.PCI0.LPCB.EC0.ECWK (Arg0)
        If (NEXP)
        {
            If (And (OSCC, 0x02))
            {
                \_SB.PCI0.NHPG ()
            }

            If (And (OSCC, 0x04))
            {
                \_SB.PCI0.NPME ()
            }
        }

        If (LOr (LEqual (Arg0, 0x03), LEqual (Arg0, 0x04)))
        {
            If (LEqual (OSYS, 0x07D2))
            {
                If (And (CFGD, One))
                {
                    If (LGreater (\_PR.CPU0._PPC, Zero))
                    {
                        Subtract (\_PR.CPU0._PPC, One, \_PR.CPU0._PPC)
                        PNOT ()
                        Add (\_PR.CPU0._PPC, One, \_PR.CPU0._PPC)
                        PNOT ()
                    }
                    Else
                    {
                        Add (\_PR.CPU0._PPC, One, \_PR.CPU0._PPC)
                        PNOT ()
                        Subtract (\_PR.CPU0._PPC, One, \_PR.CPU0._PPC)
                        PNOT ()
                    }
                }
            }

            If (LEqual (RP1D, Zero))
            {
                Notify (\_SB.PCI0.RP01, Zero)
            }

            If (LEqual (RP2D, Zero))
            {
                Notify (\_SB.PCI0.RP02, Zero)
            }

            If (LEqual (RP3D, Zero))
            {
                Notify (\_SB.PCI0.RP03, Zero)
            }

            If (LEqual (RP4D, Zero))
            {
                Notify (\_SB.PCI0.RP04, Zero)
            }

            If (LEqual (RP5D, Zero))
            {
                Notify (\_SB.PCI0.RP05, Zero)
            }

            If (LEqual (RP6D, Zero))
            {
                Notify (\_SB.PCI0.RP06, Zero)
            }

            If (LEqual (RP7D, Zero))
            {
                Notify (\_SB.PCI0.RP07, Zero)
            }

            If (LEqual (RP8D, Zero))
            {
                Notify (\_SB.PCI0.RP08, Zero)
            }
        }

        If (LOr (LEqual (Arg0, 0x03), LEqual (Arg0, 0x04)))
        {
            \_SB.PCI0.XHC.XWAK ()
        }

        Return (Package (0x02)
        {
            Zero, 
            Zero
        })
    }

    Method (GETB, 3, Serialized)
    {
        Multiply (Arg0, 0x08, Local0)
        Multiply (Arg1, 0x08, Local1)
        CreateField (Arg2, Local0, Local1, TBF3)
        Return (TBF3)
    }

    Method (PNOT, 0, Serialized)
    {
        If (LGreater (TCNT, One))
        {
            If (And (PDC0, 0x08))
            {
                Notify (\_PR.CPU0, 0x80)
                If (And (PDC0, 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU0, 0x81)
                }
            }

            If (And (PDC1, 0x08))
            {
                Notify (\_PR.CPU1, 0x80)
                If (And (PDC1, 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU1, 0x81)
                }
            }

            If (And (PDC2, 0x08))
            {
                Notify (\_PR.CPU2, 0x80)
                If (And (PDC2, 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU2, 0x81)
                }
            }

            If (And (PDC3, 0x08))
            {
                Notify (\_PR.CPU3, 0x80)
                If (And (PDC3, 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU3, 0x81)
                }
            }

            If (And (PDC4, 0x08))
            {
                Notify (\_PR.CPU4, 0x80)
                If (And (PDC4, 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU4, 0x81)
                }
            }

            If (And (PDC5, 0x08))
            {
                Notify (\_PR.CPU5, 0x80)
                If (And (PDC5, 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU5, 0x81)
                }
            }

            If (And (PDC6, 0x08))
            {
                Notify (\_PR.CPU6, 0x80)
                If (And (PDC6, 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU6, 0x81)
                }
            }

            If (And (PDC7, 0x08))
            {
                Notify (\_PR.CPU7, 0x80)
                If (And (PDC7, 0x10))
                {
                    Sleep (0x64)
                    Notify (\_PR.CPU7, 0x81)
                }
            }
        }
        Else
        {
            Notify (\_PR.CPU0, 0x80)
            Sleep (0x64)
            Notify (\_PR.CPU0, 0x81)
        }
    }

    Method (TRAP, 2, Serialized)
    {
        Store (Arg1, SMIF)
        If (LEqual (Arg0, TRTP))
        {
            Store (Zero, TRP0)
        }

        If (LEqual (Arg0, TRTD))
        {
            Store (Arg1, DTSF)
            Store (Zero, TRPD)
            Return (DTSF)
        }

        If (LEqual (Arg0, TRTI))
        {
            Store (Zero, TRPH)
        }

        Return (SMIF)
    }

    Scope (_SB.PCI0)
    {
        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            Store (0x07D0, OSYS)
            If (CondRefOf (_OSI, Local0))
            {
                If (_OSI ("Windows 2001"))
                {
                    Store (0x07D1, OSYS)
                }

                If (_OSI ("Windows 2001 SP1"))
                {
                    Store (0x07D1, OSYS)
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    Store (0x07D2, OSYS)
                }

                If (_OSI ("Windows 2001.1"))
                {
                    Store (0x07D3, OSYS)
                }

                If (_OSI ("Windows 2006"))
                {
                    Store (0x07D6, OSYS)
                }

                If (_OSI ("Windows 2009"))
                {
                    Store (0x07D9, OSYS)
                }

                If (LOr (_OSI ("Darwin"), _OSI ("Windows 2012")))
                {
                    Store (0x07DC, OSYS)
                }

                If (_OSI ("Windows 2013"))
                {
                    Store (0x07DD, OSYS)
                }

                If (_OSI ("Linux"))
                {
                    Store (0x03E8, OSYS)
                }
            }

            Return (Zero)
        }

        Method (NHPG, 0, Serialized)
        {
            Store (Zero, ^RP01.HPEX)
            Store (Zero, ^RP02.HPEX)
            Store (Zero, ^RP03.HPEX)
            Store (Zero, ^RP04.HPEX)
            Store (One, ^RP01.HPSX)
            Store (One, ^RP02.HPSX)
            Store (One, ^RP03.HPSX)
            Store (One, ^RP04.HPSX)
        }

        Method (NPME, 0, Serialized)
        {
            Store (Zero, ^RP01.PMEX)
            Store (Zero, ^RP02.PMEX)
            Store (Zero, ^RP03.PMEX)
            Store (Zero, ^RP04.PMEX)
            Store (Zero, ^RP05.PMEX)
            Store (Zero, ^RP06.PMEX)
            Store (Zero, ^RP07.PMEX)
            Store (Zero, ^RP08.PMEX)
            Store (One, ^RP01.PMSX)
            Store (One, ^RP02.PMSX)
            Store (One, ^RP03.PMSX)
            Store (One, ^RP04.PMSX)
            Store (One, ^RP05.PMSX)
            Store (One, ^RP06.PMSX)
            Store (One, ^RP07.PMSX)
            Store (One, ^RP08.PMSX)
        }
    }

    Scope (\)
    {
        Name (PICM, Zero)
        Name (PRWP, Package (0x02)
        {
            Zero, 
            Zero
        })
        Method (GPRW, 2, NotSerialized)
        {
            Store (Arg0, Index (PRWP, Zero))
            ShiftLeft (SS1, One, Local0)
            Or (Local0, ShiftLeft (SS2, 0x02), Local0)
            Or (Local0, ShiftLeft (SS3, 0x03), Local0)
            Or (Local0, ShiftLeft (SS4, 0x04), Local0)
            If (And (ShiftLeft (One, Arg1), Local0))
            {
                Store (Arg1, Index (PRWP, One))
            }
            Else
            {
                ShiftRight (Local0, One, Local0)
                FindSetLeftBit (Local0, Index (PRWP, One))
            }

            Return (PRWP)
        }
    }

    Scope (_SB.PCI0)
    {
        Device (PDRC)
        {
            Name (_HID, EisaId ("PNP0C02"))  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Name (BUF0, ResourceTemplate ()
            {
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00004000,         // Address Length
                    _Y10)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00008000,         // Address Length
                    _Y12)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y13)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y14)
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00000000,         // Address Length
                    _Y15)
                Memory32Fixed (ReadWrite,
                    0xFED20000,         // Address Base
                    0x00020000,         // Address Length
                    )
                Memory32Fixed (ReadOnly,
                    0xFED90000,         // Address Base
                    0x00004000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0xFED45000,         // Address Base
                    0x0004B000,         // Address Length
                    )
                Memory32Fixed (ReadOnly,
                    0xFF000000,         // Address Base
                    0x01000000,         // Address Length
                    )
                Memory32Fixed (ReadOnly,
                    0xFEE00000,         // Address Base
                    0x00100000,         // Address Length
                    )
                Memory32Fixed (ReadWrite,
                    0x00000000,         // Address Base
                    0x00001000,         // Address Length
                    _Y11)
            })
            Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
            {
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y10._BAS, RBR0)  // _BAS: Base Address
                ShiftLeft (^^LPCB.RCBA, 0x0E, RBR0)
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y11._BAS, TBR0)  // _BAS: Base Address
                Store (TBAB, TBR0)
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y11._LEN, TBLN)  // _LEN: Length
                If (LEqual (TBAB, Zero))
                {
                    Store (Zero, TBLN)
                }

                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y12._BAS, MBR0)  // _BAS: Base Address
                ShiftLeft (MHBR, 0x0F, MBR0)
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y13._BAS, DBR0)  // _BAS: Base Address
                ShiftLeft (DIBR, 0x0C, DBR0)
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y14._BAS, EBR0)  // _BAS: Base Address
                ShiftLeft (EPBR, 0x0C, EBR0)
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y15._BAS, XBR0)  // _BAS: Base Address
                ShiftLeft (PXBR, 0x1A, XBR0)
                CreateDWordField (BUF0, \_SB.PCI0.PDRC._Y15._LEN, XSZ0)  // _LEN: Length
                ShiftRight (0x10000000, PXSZ, XSZ0)
                Return (BUF0)
            }
        }
    }

    Method (BRTN, 1, Serialized)
    {
        If (LEqual (And (DID1, 0x0F00), 0x0400))
        {
            Notify (\_SB.PCI0.IGPU.DD01, Arg0)
        }

        If (LEqual (And (DID2, 0x0F00), 0x0400))
        {
            Notify (\_SB.PCI0.IGPU.DD02, Arg0)
        }

        If (LEqual (And (DID3, 0x0F00), 0x0400))
        {
            Notify (\_SB.PCI0.IGPU.DD03, Arg0)
        }

        If (LEqual (And (DID4, 0x0F00), 0x0400))
        {
            Notify (\_SB.PCI0.IGPU.DD04, Arg0)
        }

        If (LEqual (And (DID5, 0x0F00), 0x0400))
        {
            Notify (\_SB.PCI0.IGPU.DD05, Arg0)
        }

        If (LEqual (And (DID6, 0x0F00), 0x0400))
        {
            Notify (\_SB.PCI0.IGPU.DD06, Arg0)
        }

        If (LEqual (And (DID7, 0x0F00), 0x0400))
        {
            Notify (\_SB.PCI0.IGPU.DD07, Arg0)
        }

        If (LEqual (And (DID8, 0x0F00), 0x0400))
        {
            Notify (\_SB.PCI0.IGPU.DD08, Arg0)
        }
    }

    Scope (_GPE)
    {
        Method (_L0B, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            Notify (\_SB.PCI0.P0P1, 0x02)
        }

        Method (_L09, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            If (LEqual (RP1D, Zero))
            {
                \_SB.PCI0.RP01.HPME ()
                Notify (\_SB.PCI0.RP01, 0x02)
            }

            If (LEqual (RP2D, Zero))
            {
                \_SB.PCI0.RP02.HPME ()
                Notify (\_SB.PCI0.RP02, 0x02)
            }

            If (LEqual (RP3D, Zero))
            {
                \_SB.PCI0.RP03.HPME ()
                Notify (\_SB.PCI0.RP03, 0x02)
            }

            If (LEqual (RP4D, Zero))
            {
                \_SB.PCI0.RP04.HPME ()
                Notify (\_SB.PCI0.RP04, 0x02)
            }

            If (LEqual (RP5D, Zero))
            {
                \_SB.PCI0.RP05.HPME ()
                Notify (\_SB.PCI0.RP05, 0x02)
            }

            If (LEqual (RP6D, Zero))
            {
                \_SB.PCI0.RP06.HPME ()
                Notify (\_SB.PCI0.RP06, 0x02)
            }

            If (LEqual (RP7D, Zero))
            {
                \_SB.PCI0.RP07.HPME ()
                Notify (\_SB.PCI0.RP07, 0x02)
            }

            If (LEqual (RP8D, Zero))
            {
                \_SB.PCI0.RP08.HPME ()
                Notify (\_SB.PCI0.RP08, 0x02)
            }

            Notify (\_SB.PCI0.PEG0, 0x02)
            Notify (\_SB.PCI0.PEG0.PEGP, 0x02)
            Notify (\_SB.PCI0.PEG1, 0x02)
            Notify (\_SB.PCI0.PEG1.PEGP, 0x02)
            Notify (\_SB.PCI0.PEG2, 0x02)
            Notify (\_SB.PCI0.PEG3, 0x02)
            Notify (\_SB.SLPB, 0x02)
        }

        Method (_L0D, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            Notify (\_SB.PCI0.EH01, 0x02)
            Notify (\_SB.PCI0.EH02, 0x02)
            Notify (\_SB.PCI0.HDEF, 0x02)
            Notify (\_SB.PCI0.GLAN, 0x02)
            Notify (\_SB.PCI0.XHC, 0x02)
            If (LAnd (\_SB.PCI0.XHC.PMES, \_SB.PCI0.XHC.PMES))
            {
                Store (One, \_SB.PCI0.XHC.PMES)
            }

            Notify (\_SB.SLPB, 0x02)
        }

        Method (_L01, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            Add (L01C, One, L01C)
            P8XH (Zero, One)
            P8XH (One, L01C)
            If (LAnd (LEqual (RP1D, Zero), \_SB.PCI0.RP01.HPSX))
            {
                Sleep (0x64)
                If (\_SB.PCI0.RP01.PDCX)
                {
                    Store (One, \_SB.PCI0.RP01.PDCX)
                    Store (One, \_SB.PCI0.RP01.HPSX)
                    If (LNot (\_SB.PCI0.RP01.PDSX))
                    {
                        Store (Zero, \_SB.PCI0.RP01.L0SE)
                    }

                    Notify (\_SB.PCI0.RP01, Zero)
                }
                Else
                {
                    Store (One, \_SB.PCI0.RP01.HPSX)
                }
            }

            If (LAnd (LEqual (RP2D, Zero), \_SB.PCI0.RP02.HPSX))
            {
                Sleep (0x64)
                If (\_SB.PCI0.RP02.PDCX)
                {
                    Store (One, \_SB.PCI0.RP02.PDCX)
                    Store (One, \_SB.PCI0.RP02.HPSX)
                    If (LNot (\_SB.PCI0.RP02.PDSX))
                    {
                        Store (Zero, \_SB.PCI0.RP02.L0SE)
                    }

                    Notify (\_SB.PCI0.RP02, Zero)
                }
                Else
                {
                    Store (One, \_SB.PCI0.RP02.HPSX)
                }
            }

            If (LAnd (LEqual (RP3D, Zero), \_SB.PCI0.RP03.HPSX))
            {
                Sleep (0x64)
                If (\_SB.PCI0.RP03.PDCX)
                {
                    Store (One, \_SB.PCI0.RP03.PDCX)
                    Store (One, \_SB.PCI0.RP03.HPSX)
                    If (LNot (\_SB.PCI0.RP03.PDSX))
                    {
                        Store (Zero, \_SB.PCI0.RP03.L0SE)
                    }

                    Notify (\_SB.PCI0.RP03, Zero)
                }
                Else
                {
                    Store (One, \_SB.PCI0.RP03.HPSX)
                }
            }

            If (LAnd (LEqual (RP4D, Zero), \_SB.PCI0.RP04.HPSX))
            {
                Sleep (0x64)
                If (\_SB.PCI0.RP04.PDCX)
                {
                    Store (One, \_SB.PCI0.RP04.PDCX)
                    Store (One, \_SB.PCI0.RP04.HPSX)
                    If (LNot (\_SB.PCI0.RP04.PDSX))
                    {
                        Store (Zero, \_SB.PCI0.RP04.L0SE)
                    }

                    Notify (\_SB.PCI0.RP04, Zero)
                }
                Else
                {
                    Store (One, \_SB.PCI0.RP04.HPSX)
                }
            }

            If (LAnd (LEqual (RP5D, Zero), \_SB.PCI0.RP05.HPSX))
            {
                Sleep (0x64)
                If (\_SB.PCI0.RP05.PDCX)
                {
                    Store (One, \_SB.PCI0.RP05.PDCX)
                    Store (One, \_SB.PCI0.RP05.HPSX)
                    If (LNot (\_SB.PCI0.RP05.PDSX))
                    {
                        Store (Zero, \_SB.PCI0.RP05.L0SE)
                    }

                    Notify (\_SB.PCI0.RP05, Zero)
                }
                Else
                {
                    Store (One, \_SB.PCI0.RP05.HPSX)
                }
            }

            If (LAnd (LEqual (RP6D, Zero), \_SB.PCI0.RP06.HPSX))
            {
                Sleep (0x64)
                If (\_SB.PCI0.RP06.PDCX)
                {
                    Store (One, \_SB.PCI0.RP06.PDCX)
                    Store (One, \_SB.PCI0.RP06.HPSX)
                    If (LNot (\_SB.PCI0.RP06.PDSX))
                    {
                        Store (Zero, \_SB.PCI0.RP06.L0SE)
                    }

                    Notify (\_SB.PCI0.RP06, Zero)
                }
                Else
                {
                    Store (One, \_SB.PCI0.RP06.HPSX)
                }
            }

            If (LAnd (LEqual (RP7D, Zero), \_SB.PCI0.RP07.HPSX))
            {
                Sleep (0x64)
                If (\_SB.PCI0.RP07.PDCX)
                {
                    Store (One, \_SB.PCI0.RP07.PDCX)
                    Store (One, \_SB.PCI0.RP07.HPSX)
                    If (LNot (\_SB.PCI0.RP07.PDSX))
                    {
                        Store (Zero, \_SB.PCI0.RP07.L0SE)
                    }

                    Notify (\_SB.PCI0.RP07, Zero)
                }
                Else
                {
                    Store (One, \_SB.PCI0.RP07.HPSX)
                }
            }

            If (LAnd (LEqual (RP8D, Zero), \_SB.PCI0.RP08.HPSX))
            {
                Sleep (0x64)
                If (\_SB.PCI0.RP08.PDCX)
                {
                    Store (One, \_SB.PCI0.RP08.PDCX)
                    Store (One, \_SB.PCI0.RP08.HPSX)
                    If (LNot (\_SB.PCI0.RP08.PDSX))
                    {
                        Store (Zero, \_SB.PCI0.RP08.L0SE)
                    }

                    Notify (\_SB.PCI0.RP08, Zero)
                }
                Else
                {
                    Store (One, \_SB.PCI0.RP08.HPSX)
                }
            }
        }

        Method (_L02, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            Store (Zero, GPEC)
            If (CondRefOf (\_SB.PCI0.IEIT.EITV))
            {
                \_SB.PCI0.IEIT.EITV ()
            }

            If (CondRefOf (TNOT))
            {
                TNOT ()
            }
        }

        Method (_L06, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
        {
            If (LAnd (\_SB.PCI0.IGPU.GSSE, LNot (GSMI)))
            {
                \_SB.PCI0.IGPU.GSCI ()
            }
        }
    }

    Scope (\)
    {
        OperationRegion (IO_T, SystemIO, 0x1000, 0x10)
        Field (IO_T, ByteAcc, NoLock, Preserve)
        {
            TRPI,   16, 
            Offset (0x04), 
            Offset (0x06), 
            Offset (0x08), 
            TRP0,   8, 
            Offset (0x0A), 
            Offset (0x0B), 
            Offset (0x0C), 
            Offset (0x0D), 
            Offset (0x0E), 
            Offset (0x0F), 
            Offset (0x10)
        }

        OperationRegion (IO_D, SystemIO, 0x0810, 0x04)
        Field (IO_D, ByteAcc, NoLock, Preserve)
        {
            TRPD,   8
        }

        OperationRegion (IO_H, SystemIO, 0x1000, 0x04)
        Field (IO_H, ByteAcc, NoLock, Preserve)
        {
            TRPH,   8
        }

        OperationRegion (PMIO, SystemIO, PMBS, 0x80)
        Field (PMIO, ByteAcc, NoLock, Preserve)
        {
            Offset (0x28), 
            Offset (0x2A), 
                ,   3, 
            GPE3,   1, 
            Offset (0x3C), 
                ,   1, 
            UPRW,   1, 
            Offset (0x42), 
                ,   1, 
            GPEC,   1
        }

        Field (PMIO, ByteAcc, NoLock, WriteAsZeros)
        {
            Offset (0x20), 
            Offset (0x22), 
                ,   3, 
            GPS3,   1, 
            Offset (0x64), 
                ,   9, 
            SCIS,   1, 
            Offset (0x66)
        }

        OperationRegion (GPIO, SystemIO, GPBS, 0x64)
        Field (GPIO, ByteAcc, NoLock, Preserve)
        {
            GU00,   8, 
            GU01,   8, 
            GU02,   8, 
            GU03,   8, 
            GIO0,   8, 
            GIO1,   8, 
            GIO2,   8, 
            GIO3,   8, 
            Offset (0x0C), 
            GL00,   8, 
            GL01,   8, 
            GL02,   8, 
            GP24,   1, 
                ,   2, 
            GP27,   1, 
            GP28,   1, 
            Offset (0x10), 
            Offset (0x18), 
            GB00,   8, 
            GB01,   8, 
            GB02,   8, 
            GB03,   8, 
            Offset (0x2C), 
            GIV0,   8, 
            GIV1,   8, 
            GIV2,   8, 
            GIV3,   8, 
            GU04,   8, 
            GU05,   8, 
            GU06,   8, 
            GU07,   8, 
            GIO4,   8, 
            GIO5,   8, 
            GIO6,   8, 
            GIO7,   8, 
            GL04,   8, 
            GL05,   8, 
            GL06,   8, 
            GL07,   8, 
            Offset (0x40), 
            GU08,   8, 
            GU09,   8, 
            GU0A,   8, 
            GU0B,   8, 
            GIO8,   8, 
            GIO9,   8, 
            GIOA,   8, 
            GIOB,   8, 
            GL08,   8, 
            GL09,   8, 
            GL0A,   8, 
            GL0B,   8
        }

        OperationRegion (RCRB, SystemMemory, SRCB, 0x4000)
        Field (RCRB, DWordAcc, Lock, Preserve)
        {
            Offset (0x1000), 
            Offset (0x3000), 
            Offset (0x3404), 
            HPAS,   2, 
                ,   5, 
            HPAE,   1, 
            Offset (0x3418), 
                ,   1, 
                ,   1, 
            SATD,   1, 
            SMBD,   1, 
            HDAD,   1, 
            Offset (0x341A), 
            RP1D,   1, 
            RP2D,   1, 
            RP3D,   1, 
            RP4D,   1, 
            RP5D,   1, 
            RP6D,   1, 
            RP7D,   1, 
            RP8D,   1, 
            Offset (0x359C), 
            UP0D,   1, 
            UP1D,   1, 
            UP2D,   1, 
            UP3D,   1, 
            UP4D,   1, 
            UP5D,   1, 
            UP6D,   1, 
            UP7D,   1, 
            UP8D,   1, 
            UP9D,   1, 
            UPAD,   1, 
            UPBD,   1, 
            UPCD,   1, 
            UPDD,   1, 
                ,   1, 
            Offset (0x359E)
        }
    }

    Scope (_SB.PCI0)
    {
        Device (GLAN)
        {
            Name (_ADR, 0x00190000)  // _ADR: Address
        }

        Device (EH01)
        {
            Name (_ADR, 0x001D0000)  // _ADR: Address
            OperationRegion (PWKE, PCI_Config, 0x62, 0x04)
            Field (PWKE, DWordAcc, NoLock, Preserve)
            {
                    ,   1, 
                PWUC,   8
            }

            Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
            {
                If (Arg0)
                {
                    Store (Ones, PWUC)
                }
                Else
                {
                    Store (Zero, PWUC)
                }
            }

            Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
            {
                Return (0x02)
            }

            Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
            {
                Return (0x02)
            }

            Device (HUBN)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Device (PR01)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Name (UPCA, Package (0x04)
                        {
                            0xFF, 
                            Zero, 
                            Zero, 
                            Zero
                        })
                        Return (UPCA)
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Name (PLDP, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                /* 0008 */  0x30, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                            }
                        })
                        Return (PLDP)
                    }

                    Device (PR11)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Return (UPCP)
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x10)
                                {
                                    /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0008 */  0xE1, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                }
                            })
                            Return (PLDP)
                        }
                    }

                    Device (PR12)
                    {
                        Name (_ADR, 0x02)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Store (Zero, Index (UPCP, Zero))
                            Return (UPCP)
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x10)
                                {
                                    /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0008 */  0xE1, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                }
                            })
                            CreateBitField (DerefOf (Index (PLDP, Zero)), 0x40, VIS)
                            And (VIS, Zero, VIS)
                            Return (PLDP)
                        }
                    }

                    Device (PR13)
                    {
                        Name (_ADR, 0x03)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Return (UPCP)
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x10)
                                {
                                    /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0008 */  0xE1, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                }
                            })
                            Return (PLDP)
                        }
                    }

                    Device (PR14)
                    {
                        Name (_ADR, 0x04)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Store (Zero, Index (UPCP, Zero))
                            Return (UPCP)
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x10)
                                {
                                    /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0008 */  0xE1, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                }
                            })
                            CreateBitField (DerefOf (Index (PLDP, Zero)), 0x40, VIS)
                            And (VIS, Zero, VIS)
                            Return (PLDP)
                        }

                        Device (WCAM)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Name (_PLD, Package (0x01)  // _PLD: Physical Location of Device
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0008 */  0x24, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                         
                                }
                            })
                        }

                        Alias (SBV1, SDGV)
                        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                        {
                            Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
                            If (LEqual (Arg0, ToUUID ("a5fc708f-8775-4ba6-bd0c-ba90a1ec72f8")))
                            {
                                Store (ToInteger (Arg2), _T_0)
                                If (LEqual (_T_0, Zero))
                                {
                                    If (LEqual (Arg1, One))
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x07                                           
                                        })
                                    }
                                    Else
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x00                                           
                                        })
                                    }
                                }
                                ElseIf (LEqual (_T_0, One))
                                {
                                    If (LEqual (SDGV, 0xFF))
                                    {
                                        Return (Zero)
                                    }
                                    Else
                                    {
                                        Return (One)
                                    }
                                }
                                ElseIf (LEqual (_T_0, 0x02))
                                {
                                    Return (SDGV)
                                }
                            }

                            Return (Zero)
                        }
                    }

                    Device (PR15)
                    {
                        Name (_ADR, 0x05)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Return (UPCP)
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x10)
                                {
                                    /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0008 */  0xB1, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                }
                            })
                            Return (PLDP)
                        }

                        Alias (SBV2, SDGV)
                        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                        {
                            Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
                            If (LEqual (Arg0, ToUUID ("a5fc708f-8775-4ba6-bd0c-ba90a1ec72f8")))
                            {
                                Store (ToInteger (Arg2), _T_0)
                                If (LEqual (_T_0, Zero))
                                {
                                    If (LEqual (Arg1, One))
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x07                                           
                                        })
                                    }
                                    Else
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x00                                           
                                        })
                                    }
                                }
                                ElseIf (LEqual (_T_0, One))
                                {
                                    If (LEqual (SDGV, 0xFF))
                                    {
                                        Return (Zero)
                                    }
                                    Else
                                    {
                                        Return (One)
                                    }
                                }
                                ElseIf (LEqual (_T_0, 0x02))
                                {
                                    Return (SDGV)
                                }
                            }

                            Return (Zero)
                        }
                    }

                    Device (PR16)
                    {
                        Name (_ADR, 0x06)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Return (UPCP)
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x10)
                                {
                                    /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0008 */  0xB1, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                }
                            })
                            Return (PLDP)
                        }

                        Alias (SBV1, SDGV)
                        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                        {
                            Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
                            If (LEqual (Arg0, ToUUID ("a5fc708f-8775-4ba6-bd0c-ba90a1ec72f8")))
                            {
                                Store (ToInteger (Arg2), _T_0)
                                If (LEqual (_T_0, Zero))
                                {
                                    If (LEqual (Arg1, One))
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x07                                           
                                        })
                                    }
                                    Else
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x00                                           
                                        })
                                    }
                                }
                                ElseIf (LEqual (_T_0, One))
                                {
                                    If (LEqual (SDGV, 0xFF))
                                    {
                                        Return (Zero)
                                    }
                                    Else
                                    {
                                        Return (One)
                                    }
                                }
                                ElseIf (LEqual (_T_0, 0x02))
                                {
                                    Return (SDGV)
                                }
                            }

                            Return (Zero)
                        }
                    }

                    Device (PR17)
                    {
                        Name (_ADR, 0x07)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Return (UPCP)
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x10)
                                {
                                    /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0008 */  0xB1, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                }
                            })
                            Return (PLDP)
                        }

                        Alias (SBV2, SDGV)
                        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                        {
                            Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
                            If (LEqual (Arg0, ToUUID ("a5fc708f-8775-4ba6-bd0c-ba90a1ec72f8")))
                            {
                                Store (ToInteger (Arg2), _T_0)
                                If (LEqual (_T_0, Zero))
                                {
                                    If (LEqual (Arg1, One))
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x07                                           
                                        })
                                    }
                                    Else
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x00                                           
                                        })
                                    }
                                }
                                ElseIf (LEqual (_T_0, One))
                                {
                                    If (LEqual (SDGV, 0xFF))
                                    {
                                        Return (Zero)
                                    }
                                    Else
                                    {
                                        Return (One)
                                    }
                                }
                                ElseIf (LEqual (_T_0, 0x02))
                                {
                                    Return (SDGV)
                                }
                            }

                            Return (Zero)
                        }
                    }

                    Device (PR18)
                    {
                        Name (_ADR, 0x08)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Return (UPCP)
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x10)
                                {
                                    /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0008 */  0xB1, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                }
                            })
                            Return (PLDP)
                        }
                    }
                }
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If (LEqual (Arg2, Zero))
                {
                    Return (Buffer (One)
                    {
                         0x03                                           
                    })
                }

                Return (Package (0x1A)
                {
                    "AAPL,slot-name", 
                    "Built In", 
                    "name", 
                    "Intel USB Controller", 
                    "model", 
                    Buffer (0x42)
                    {
                        "Intel Corporation, Series Chipset USB Enhanced Host Controller #1"
                    }, 

                    "device_type", 
                    Buffer (0x0F)
                    {
                        "USB Controller"
                    }, 

                    "AAPL,clock-id", 
                    Buffer (One)
                    {
                         0x01                                           
                    }, 

                    "built-in", 
                    Buffer (One)
                    {
                         0x00                                           
                    }, 

                    "subsystem-id", 
                    Buffer (0x04)
                    {
                         0x70, 0x72, 0x00, 0x00                         
                    }, 

                    "subsystem-vendor-id", 
                    Buffer (0x04)
                    {
                         0x86, 0x80, 0x00, 0x00                         
                    }, 

                    "AAPL,current-available", 
                    0x0834, 
                    "AAPL,current-extra", 
                    0x0898, 
                    "AAPL,current-extra-in-sleep", 
                    0x0640, 
                    "AAPL,device-internal", 
                    0x02, 
                    "AAPL,max-port-current-in-sleep", 
                    0x0834
                })
            }
        }

        Device (EH02)
        {
            Name (_ADR, 0x001A0000)  // _ADR: Address
            OperationRegion (PWKE, PCI_Config, 0x62, 0x04)
            Field (PWKE, DWordAcc, NoLock, Preserve)
            {
                    ,   1, 
                PWUC,   6
            }

            Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
            {
                If (Arg0)
                {
                    Store (Ones, PWUC)
                }
                Else
                {
                    Store (Zero, PWUC)
                }
            }

            Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
            {
                Return (0x02)
            }

            Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
            {
                Return (0x02)
            }

            Device (HUBN)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Device (PR01)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Name (UPCA, Package (0x04)
                        {
                            0xFF, 
                            Zero, 
                            Zero, 
                            Zero
                        })
                        Return (UPCA)
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Name (PLDP, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                /* 0008 */  0x30, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                            }
                        })
                        Return (PLDP)
                    }

                    Device (PR11)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Return (UPCP)
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x10)
                                {
                                    /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0008 */  0xE1, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                }
                            })
                            Return (PLDP)
                        }
                    }

                    Device (PR12)
                    {
                        Name (_ADR, 0x02)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Return (UPCP)
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x10)
                                {
                                    /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0008 */  0xE1, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                }
                            })
                            Return (PLDP)
                        }

                        Alias (SBV1, SDGV)
                        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                        {
                            Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
                            If (LEqual (Arg0, ToUUID ("a5fc708f-8775-4ba6-bd0c-ba90a1ec72f8")))
                            {
                                Store (ToInteger (Arg2), _T_0)
                                If (LEqual (_T_0, Zero))
                                {
                                    If (LEqual (Arg1, One))
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x07                                           
                                        })
                                    }
                                    Else
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x00                                           
                                        })
                                    }
                                }
                                ElseIf (LEqual (_T_0, One))
                                {
                                    If (LEqual (SDGV, 0xFF))
                                    {
                                        Return (Zero)
                                    }
                                    Else
                                    {
                                        Return (One)
                                    }
                                }
                                ElseIf (LEqual (_T_0, 0x02))
                                {
                                    Return (SDGV)
                                }
                            }

                            Return (Zero)
                        }
                    }

                    Device (PR13)
                    {
                        Name (_ADR, 0x03)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Return (UPCP)
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x10)
                                {
                                    /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0008 */  0xE1, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                }
                            })
                            Return (PLDP)
                        }

                        Alias (SBV2, SDGV)
                        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                        {
                            Name (_T_0, Zero)  // _T_x: Emitted by ASL Compiler
                            If (LEqual (Arg0, ToUUID ("a5fc708f-8775-4ba6-bd0c-ba90a1ec72f8")))
                            {
                                Store (ToInteger (Arg2), _T_0)
                                If (LEqual (_T_0, Zero))
                                {
                                    If (LEqual (Arg1, One))
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x07                                           
                                        })
                                    }
                                    Else
                                    {
                                        Return (Buffer (One)
                                        {
                                             0x00                                           
                                        })
                                    }
                                }
                                ElseIf (LEqual (_T_0, One))
                                {
                                    If (LEqual (SDGV, 0xFF))
                                    {
                                        Return (Zero)
                                    }
                                    Else
                                    {
                                        Return (One)
                                    }
                                }
                                ElseIf (LEqual (_T_0, 0x02))
                                {
                                    Return (SDGV)
                                }
                            }

                            Return (Zero)
                        }
                    }

                    Device (PR14)
                    {
                        Name (_ADR, 0x04)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Store (Zero, Index (UPCP, Zero))
                            Return (UPCP)
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x10)
                                {
                                    /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0008 */  0xE1, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                }
                            })
                            CreateBitField (DerefOf (Index (PLDP, Zero)), 0x40, VIS)
                            And (VIS, Zero, VIS)
                            Return (PLDP)
                        }
                    }

                    Device (PR15)
                    {
                        Name (_ADR, 0x05)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Return (UPCP)
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x10)
                                {
                                    /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0008 */  0xB1, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                }
                            })
                            Return (PLDP)
                        }
                    }

                    Device (PR16)
                    {
                        Name (_ADR, 0x06)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0xFF, 
                                Zero, 
                                Zero
                            })
                            Return (UPCP)
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x10)
                                {
                                    /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                                    /* 0008 */  0xB1, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
                                }
                            })
                            Return (PLDP)
                        }
                    }
                }
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If (LEqual (Arg2, Zero))
                {
                    Return (Buffer (One)
                    {
                         0x03                                           
                    })
                }

                Return (Package (0x1A)
                {
                    "AAPL,slot-name", 
                    "Built In", 
                    "name", 
                    "Intel USB Controller", 
                    "model", 
                    Buffer (0x42)
                    {
                        "Intel Corporation, Series Chipset USB Enhanced Host Controller #2"
                    }, 

                    "device_type", 
                    Buffer (0x0F)
                    {
                        "USB Controller"
                    }, 

                    "AAPL,clock-id", 
                    Buffer (One)
                    {
                         0x01                                           
                    }, 

                    "built-in", 
                    Buffer (One)
                    {
                         0x00                                           
                    }, 

                    "subsystem-id", 
                    Buffer (0x04)
                    {
                         0x70, 0x72, 0x00, 0x00                         
                    }, 

                    "subsystem-vendor-id", 
                    Buffer (0x04)
                    {
                         0x86, 0x80, 0x00, 0x00                         
                    }, 

                    "AAPL,current-available", 
                    0x0834, 
                    "AAPL,current-extra", 
                    0x0898, 
                    "AAPL,current-extra-in-sleep", 
                    0x0640, 
                    "AAPL,device-internal", 
                    0x02, 
                    "AAPL,max-port-current-in-sleep", 
                    0x0834
                })
            }
        }

        Device (XHC)
        {
            Name (_ADR, 0x00140000)  // _ADR: Address
            OperationRegion (XPRT, PCI_Config, 0x74, 0x6C)
            Field (XPRT, DWordAcc, NoLock, Preserve)
            {
                Offset (0x01), 
                PMEE,   1, 
                    ,   6, 
                PMES,   1, 
                Offset (0x5C), 
                PR2,    32, 
                PR2M,   32, 
                PR3,    32, 
                PR3M,   32
            }

            Name (XRST, Zero)
            Method (CUID, 1, Serialized)
            {
                If (LEqual (Arg0, ToUUID ("7c9512a9-1705-4cb4-af7d-506a2423ab71")))
                {
                    Return (One)
                }

                Return (Zero)
            }

            Method (POSC, 3, Serialized)
            {
                CreateDWordField (Arg2, Zero, CDW1)
                CreateDWordField (Arg2, 0x08, CDW3)
                If (LNotEqual (Arg1, One))
                {
                    Or (CDW1, 0x08, CDW1)
                }

                If (LNot (And (CDW1, One)))
                {
                    If (And (CDW3, One))
                    {
                        ESEL ()
                    }
                    Else
                    {
                        XSEL ()
                    }
                }

                Return (Arg2)
            }

            Method (XSEL, 0, Serialized)
            {
            }

            Method (ESEL, 0, Serialized)
            {
            }

            Method (XWAK, 0, Serialized)
            {
                If (LOr (LEqual (XUSB, One), LEqual (XRST, One)))
                {
                    XSEL ()
                }
            }

            Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
            {
                Return (0x02)
            }

            Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
            {
                Return (0x02)
            }

            Device (RHUB)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Device (HSP1)
                {
                    Name (_ADR, One)  // _ADR: Address
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Name (UPCP, Package (0x04)
                        {
                            0xFF, 
                            0x03, 
                            Zero, 
                            Zero
                        })
                        If (LNot (And (PR2, One)))
                        {
                            Store (Zero, Index (UPCP, Zero))
                        }

                        Return (UPCP)
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Name (PLDP, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x01, 0xC6, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00,
                                /* 0008 */  0x69, 0x0C, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00 
                            }
                        })
                        CreateBitField (DerefOf (Index (PLDP, Zero)), 0x40, VIS)
                        If (LNot (And (PR2, One)))
                        {
                            And (VIS, Zero, VIS)
                        }

                        Return (PLDP)
                    }
                }

                Device (HSP2)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Name (UPCP, Package (0x04)
                        {
                            0xFF, 
                            0x03, 
                            Zero, 
                            Zero
                        })
                        If (LNot (And (PR2, 0x02)))
                        {
                            Store (Zero, Index (UPCP, Zero))
                        }

                        Return (UPCP)
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Name (PLDP, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x01, 0xC6, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00,
                                /* 0008 */  0x69, 0x0C, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00 
                            }
                        })
                        CreateBitField (DerefOf (Index (PLDP, Zero)), 0x40, VIS)
                        If (LNot (And (PR2, 0x02)))
                        {
                            And (VIS, Zero, VIS)
                        }

                        Return (PLDP)
                    }
                }

                Device (HSP3)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Name (UPCP, Package (0x04)
                        {
                            0xFF, 
                            0x03, 
                            Zero, 
                            Zero
                        })
                        If (LNot (And (PR2, 0x04)))
                        {
                            Store (Zero, Index (UPCP, Zero))
                        }

                        Return (UPCP)
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Name (PLDP, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x01, 0xC6, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00,
                                /* 0008 */  0x69, 0x0C, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00 
                            }
                        })
                        CreateBitField (DerefOf (Index (PLDP, Zero)), 0x40, VIS)
                        If (LNot (And (PR2, 0x04)))
                        {
                            And (VIS, Zero, VIS)
                        }

                        Return (PLDP)
                    }
                }

                Device (HSP4)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Name (UPCP, Package (0x04)
                        {
                            0xFF, 
                            0x03, 
                            Zero, 
                            Zero
                        })
                        If (LNot (And (PR2, 0x08)))
                        {
                            Store (Zero, Index (UPCP, Zero))
                        }

                        Store (Zero, Index (UPCP, Zero))
                        Return (UPCP)
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Name (PLDP, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x01, 0xC6, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00,
                                /* 0008 */  0x69, 0x0C, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00 
                            }
                        })
                        CreateBitField (DerefOf (Index (PLDP, Zero)), 0x40, VIS)
                        If (LNot (And (PR2, 0x08)))
                        {
                            And (VIS, Zero, VIS)
                        }

                        And (VIS, Zero, VIS)
                        Return (PLDP)
                    }
                }

                Device (SSP1)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Name (UPCP, Package (0x04)
                        {
                            0xFF, 
                            0x03, 
                            Zero, 
                            Zero
                        })
                        If (LNot (And (PR3, One)))
                        {
                            Store (Zero, Index (UPCP, Zero))
                        }

                        Return (UPCP)
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Name (PLDP, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x01, 0xC6, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00,
                                /* 0008 */  0x69, 0x0C, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00 
                            }
                        })
                        CreateBitField (DerefOf (Index (PLDP, Zero)), 0x40, VIS)
                        If (LNot (And (PR3, One)))
                        {
                            And (VIS, Zero, VIS)
                        }

                        Return (PLDP)
                    }
                }

                Device (SSP2)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Name (UPCP, Package (0x04)
                        {
                            0xFF, 
                            0x03, 
                            Zero, 
                            Zero
                        })
                        If (LNot (And (PR3, 0x02)))
                        {
                            Store (Zero, Index (UPCP, Zero))
                        }

                        Return (UPCP)
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Name (PLDP, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x01, 0xC6, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00,
                                /* 0008 */  0x69, 0x0C, 0x00, 0x01, 0x00, 0x00, 0x00, 0x00 
                            }
                        })
                        CreateBitField (DerefOf (Index (PLDP, Zero)), 0x40, VIS)
                        If (LNot (And (PR3, 0x02)))
                        {
                            And (VIS, Zero, VIS)
                        }

                        Return (PLDP)
                    }
                }

                Device (SSP3)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Name (UPCP, Package (0x04)
                        {
                            0xFF, 
                            0x03, 
                            Zero, 
                            Zero
                        })
                        If (LNot (And (PR3, 0x04)))
                        {
                            Store (Zero, Index (UPCP, Zero))
                        }

                        Return (UPCP)
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Name (PLDP, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x01, 0xC6, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00,
                                /* 0008 */  0x69, 0x0C, 0x80, 0x01, 0x00, 0x00, 0x00, 0x00 
                            }
                        })
                        CreateBitField (DerefOf (Index (PLDP, Zero)), 0x40, VIS)
                        If (LNot (And (PR3, 0x04)))
                        {
                            And (VIS, Zero, VIS)
                        }

                        Return (PLDP)
                    }
                }

                Device (SSP4)
                {
                    Name (_ADR, 0x08)  // _ADR: Address
                    Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                    {
                        Name (UPCP, Package (0x04)
                        {
                            0xFF, 
                            0x03, 
                            Zero, 
                            Zero
                        })
                        If (LNot (And (PR3, 0x08)))
                        {
                            Store (Zero, Index (UPCP, Zero))
                        }

                        Store (Zero, Index (UPCP, Zero))
                        Return (UPCP)
                    }

                    Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                    {
                        Name (PLDP, Package (0x01)
                        {
                            Buffer (0x10)
                            {
                                /* 0000 */  0x01, 0xC6, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00,
                                /* 0008 */  0x69, 0x0C, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00 
                            }
                        })
                        CreateBitField (DerefOf (Index (PLDP, Zero)), 0x40, VIS)
                        If (LNot (And (PR3, 0x08)))
                        {
                            And (VIS, Zero, VIS)
                        }

                        And (VIS, Zero, VIS)
                        Return (PLDP)
                    }
                }
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If (LEqual (Arg2, Zero))
                {
                    Return (Buffer (One)
                    {
                         0x03                                           
                    })
                }

                Return (Package (0x1A)
                {
                    "AAPL,slot-name", 
                    "Built In", 
                    "name", 
                    "Intel USB Controller", 
                    "model", 
                    Buffer (0x3B)
                    {
                        "Intel Corporation, Series Chipset USB xHCI Host Controller"
                    }, 

                    "device_type", 
                    Buffer (0x0F)
                    {
                        "USB Controller"
                    }, 

                    "AAPL,clock-id", 
                    Buffer (One)
                    {
                         0x02                                           
                    }, 

                    "built-in", 
                    Buffer (One)
                    {
                         0x00                                           
                    }, 

                    "subsystem-id", 
                    Buffer (0x04)
                    {
                         0x70, 0x72, 0x00, 0x00                         
                    }, 

                    "subsystem-vendor-id", 
                    Buffer (0x04)
                    {
                         0x86, 0x80, 0x00, 0x00                         
                    }, 

                    "AAPL,current-available", 
                    0x0834, 
                    "AAPL,current-extra", 
                    0x0898, 
                    "AAPL,current-extra-in-sleep", 
                    0x0640, 
                    "AAPL,device-internal", 
                    0x02, 
                    "AAPL,max-port-current-in-sleep", 
                    0x0834
                })
            }
        }

        Device (HDEF)
        {
            Name (_ADR, 0x001B0000)  // _ADR: Address
            OperationRegion (HDAR, PCI_Config, 0x4C, 0x10)
            Field (HDAR, WordAcc, NoLock, Preserve)
            {
                DCKA,   1, 
                Offset (0x01), 
                DCKM,   1, 
                    ,   6, 
                DCKS,   1, 
                Offset (0x08), 
                    ,   15, 
                PMES,   1
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If (LEqual (Arg2, Zero))
                {
                    Return (Buffer (One)
                    {
                         0x03                                           
                    })
                }

                Return (Package (0x10)
                {
                    "AAPL,slot-name", 
                    "Built In", 
                    "name", 
                    "Audio Controller", 
                    "model", 
                    Buffer (0x27)
                    {
                        "Apple High Definition Audio Controller"
                    }, 

                    "device_type", 
                    Buffer (0x11)
                    {
                        "Audio Controller"
                    }, 

                    "layout-id", 
                    Buffer (0x04)
                    {
                         0x03, 0x00, 0x00, 0x00                         
                    }, 

                    "MaximumBootBeepVolume", 
                    Buffer (One)
                    {
                         0x01                                           
                    }, 

                    "PinConfigurations", 
                    Buffer (Zero){}, 
                    "hda-gfx", 
                    Buffer (0x0A)
                    {
                        "onboard-1"
                    }
                })
            }
        }

        Device (RP01)
        {
            Name (_ADR, 0x001C0000)  // _ADR: Address
            OperationRegion (PXCS, PCI_Config, 0x40, 0xC0)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                Offset (0x10), 
                L0SE,   1, 
                Offset (0x11), 
                Offset (0x12), 
                    ,   13, 
                LASX,   1, 
                Offset (0x1A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x1B), 
                Offset (0x20), 
                Offset (0x22), 
                PSPX,   1, 
                Offset (0x98), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0x9C), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
            }

            Method (HPME, 0, Serialized)
            {
                If (PMSX)
                {
                    Store (0xC8, Local0)
                    While (Local0)
                    {
                        Store (One, PMSX)
                        If (PMSX)
                        {
                            Decrement (Local0)
                        }
                        Else
                        {
                            Store (Zero, Local0)
                        }
                    }

                    Notify (PXSX, 0x02)
                }
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR04 ())
                }

                Return (PR04 ())
            }
        }

        Device (RP02)
        {
            Name (_ADR, 0x001C0001)  // _ADR: Address
            OperationRegion (PXCS, PCI_Config, 0x40, 0xC0)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                Offset (0x10), 
                L0SE,   1, 
                Offset (0x11), 
                Offset (0x12), 
                    ,   13, 
                LASX,   1, 
                Offset (0x1A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x1B), 
                Offset (0x20), 
                Offset (0x22), 
                PSPX,   1, 
                Offset (0x98), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0x9C), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
            }

            Method (HPME, 0, Serialized)
            {
                If (PMSX)
                {
                    Store (0xC8, Local0)
                    While (Local0)
                    {
                        Store (One, PMSX)
                        If (PMSX)
                        {
                            Decrement (Local0)
                        }
                        Else
                        {
                            Store (Zero, Local0)
                        }
                    }

                    Notify (PXSX, 0x02)
                }
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR05 ())
                }

                Return (PR05 ())
            }
        }

        Device (RP03)
        {
            Name (_ADR, 0x001C0002)  // _ADR: Address
            OperationRegion (PXCS, PCI_Config, 0x40, 0xC0)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                Offset (0x10), 
                L0SE,   1, 
                Offset (0x11), 
                Offset (0x12), 
                    ,   13, 
                LASX,   1, 
                Offset (0x1A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x1B), 
                Offset (0x20), 
                Offset (0x22), 
                PSPX,   1, 
                Offset (0x98), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0x9C), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
            }

            Method (HPME, 0, Serialized)
            {
                If (PMSX)
                {
                    Store (0xC8, Local0)
                    While (Local0)
                    {
                        Store (One, PMSX)
                        If (PMSX)
                        {
                            Decrement (Local0)
                        }
                        Else
                        {
                            Store (Zero, Local0)
                        }
                    }

                    Notify (PXSX, 0x02)
                }
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR06 ())
                }

                Return (PR06 ())
            }

            Device (ETH0)
            {
                Name (_ADR, 0x02)  // _ADR: Address
                Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                {
                    If (LEqual (Arg2, Zero))
                    {
                        Return (Buffer (One)
                        {
                             0x03                                           
                        })
                    }

                    Return (Package (0x0C)
                    {
                        "AAPL,slot-name", 
                        "Built In", 
                        "built-in", 
                        Buffer (One)
                        {
                             0x00                                           
                        }, 

                        "model", 
                        Buffer (0x2D)
                        {
                            "Realtek RTL8411 PCI Express Gigabit Ethernet"
                        }, 

                        "name", 
                        Buffer (0x14)
                        {
                            "Ethernet Controller"
                        }, 

                        "device_type", 
                        Buffer (0x14)
                        {
                            "Ethernet Controller"
                        }, 

                        "empty", 
                        Zero
                    })
                }
            }
        }

        Device (RP04)
        {
            Name (_ADR, 0x001C0003)  // _ADR: Address
            OperationRegion (PXCS, PCI_Config, 0x40, 0xC0)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                Offset (0x10), 
                L0SE,   1, 
                Offset (0x11), 
                Offset (0x12), 
                    ,   13, 
                LASX,   1, 
                Offset (0x1A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x1B), 
                Offset (0x20), 
                Offset (0x22), 
                PSPX,   1, 
                Offset (0x98), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0x9C), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
            }

            Method (HPME, 0, Serialized)
            {
                If (PMSX)
                {
                    Store (0xC8, Local0)
                    While (Local0)
                    {
                        Store (One, PMSX)
                        If (PMSX)
                        {
                            Decrement (Local0)
                        }
                        Else
                        {
                            Store (Zero, Local0)
                        }
                    }

                    Notify (PXSX, 0x02)
                }
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR07 ())
                }

                Return (PR07 ())
            }
        }

        Device (RP05)
        {
            Name (_ADR, 0x001C0004)  // _ADR: Address
            OperationRegion (PXCS, PCI_Config, 0x40, 0xC0)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                Offset (0x10), 
                L0SE,   1, 
                Offset (0x11), 
                Offset (0x12), 
                    ,   13, 
                LASX,   1, 
                Offset (0x1A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x1B), 
                Offset (0x20), 
                Offset (0x22), 
                PSPX,   1, 
                Offset (0x98), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0x9C), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
            }

            Method (HPME, 0, Serialized)
            {
                If (PMSX)
                {
                    Store (0xC8, Local0)
                    While (Local0)
                    {
                        Store (One, PMSX)
                        If (PMSX)
                        {
                            Decrement (Local0)
                        }
                        Else
                        {
                            Store (Zero, Local0)
                        }
                    }

                    Notify (PXSX, 0x02)
                }
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR08 ())
                }

                Return (PR08 ())
            }
        }

        Device (RP06)
        {
            Name (_ADR, 0x001C0005)  // _ADR: Address
            OperationRegion (PXCS, PCI_Config, 0x40, 0xC0)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                Offset (0x10), 
                L0SE,   1, 
                Offset (0x11), 
                Offset (0x12), 
                    ,   13, 
                LASX,   1, 
                Offset (0x1A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x1B), 
                Offset (0x20), 
                Offset (0x22), 
                PSPX,   1, 
                Offset (0x98), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0x9C), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
            }

            Method (HPME, 0, Serialized)
            {
                If (PMSX)
                {
                    Store (0xC8, Local0)
                    While (Local0)
                    {
                        Store (One, PMSX)
                        If (PMSX)
                        {
                            Decrement (Local0)
                        }
                        Else
                        {
                            Store (Zero, Local0)
                        }
                    }

                    Notify (PXSX, 0x02)
                }
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR09 ())
                }

                Return (PR09 ())
            }
        }

        Device (RP07)
        {
            Name (_ADR, 0x001C0006)  // _ADR: Address
            OperationRegion (PXCS, PCI_Config, 0x40, 0xC0)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                Offset (0x10), 
                L0SE,   1, 
                Offset (0x11), 
                Offset (0x12), 
                    ,   13, 
                LASX,   1, 
                Offset (0x1A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x1B), 
                Offset (0x20), 
                Offset (0x22), 
                PSPX,   1, 
                Offset (0x98), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0x9C), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
            }

            Method (HPME, 0, Serialized)
            {
                If (PMSX)
                {
                    Store (0xC8, Local0)
                    While (Local0)
                    {
                        Store (One, PMSX)
                        If (PMSX)
                        {
                            Decrement (Local0)
                        }
                        Else
                        {
                            Store (Zero, Local0)
                        }
                    }

                    Notify (PXSX, 0x02)
                }
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR0E)
                }

                Return (PR0E)
            }
        }

        Device (RP08)
        {
            Name (_ADR, 0x001C0007)  // _ADR: Address
            OperationRegion (PXCS, PCI_Config, 0x40, 0xC0)
            Field (PXCS, AnyAcc, NoLock, Preserve)
            {
                Offset (0x10), 
                L0SE,   1, 
                Offset (0x11), 
                Offset (0x12), 
                    ,   13, 
                LASX,   1, 
                Offset (0x1A), 
                ABPX,   1, 
                    ,   2, 
                PDCX,   1, 
                    ,   2, 
                PDSX,   1, 
                Offset (0x1B), 
                Offset (0x20), 
                Offset (0x22), 
                PSPX,   1, 
                Offset (0x98), 
                    ,   30, 
                HPEX,   1, 
                PMEX,   1
            }

            Field (PXCS, AnyAcc, NoLock, WriteAsZeros)
            {
                Offset (0x9C), 
                    ,   30, 
                HPSX,   1, 
                PMSX,   1
            }

            Device (PXSX)
            {
                Name (_ADR, Zero)  // _ADR: Address
            }

            Method (HPME, 0, Serialized)
            {
                If (PMSX)
                {
                    Store (0xC8, Local0)
                    While (Local0)
                    {
                        Store (One, PMSX)
                        If (PMSX)
                        {
                            Decrement (Local0)
                        }
                        Else
                        {
                            Store (Zero, Local0)
                        }
                    }

                    Notify (PXSX, 0x02)
                }
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR0F)
                }

                Return (PR0F)
            }
        }

        Device (SATA)
        {
            Name (_ADR, 0x001F0002)  // _ADR: Address
            Device (PRID)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                {
                    Name (PBUF, Buffer (0x14)
                    {
                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        /* 0010 */  0x00, 0x00, 0x00, 0x00                         
                    })
                    CreateDWordField (PBUF, Zero, PIO0)
                    CreateDWordField (PBUF, 0x04, DMA0)
                    CreateDWordField (PBUF, 0x08, PIO1)
                    CreateDWordField (PBUF, 0x0C, DMA1)
                    CreateDWordField (PBUF, 0x10, FLAG)
                    Store (0x78, PIO0)
                    Store (0x14, DMA0)
                    Store (0x78, PIO1)
                    Store (0x14, DMA1)
                    Store (0x1F, FLAG)
                    Return (PBUF)
                }
            }

            Device (SECD)
            {
                Name (_ADR, One)  // _ADR: Address
                Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                {
                    Name (SBUF, Buffer (0x14)
                    {
                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        /* 0010 */  0x00, 0x00, 0x00, 0x00                         
                    })
                    CreateDWordField (SBUF, Zero, PIO0)
                    CreateDWordField (SBUF, 0x04, DMA0)
                    CreateDWordField (SBUF, 0x08, PIO1)
                    CreateDWordField (SBUF, 0x0C, DMA1)
                    CreateDWordField (SBUF, 0x10, FLAG)
                    Store (0x78, PIO0)
                    Store (0x14, DMA0)
                    Store (0x78, PIO1)
                    Store (0x14, DMA1)
                    Store (0x1F, FLAG)
                    Return (SBUF)
                }
            }

            Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
            {
                If (LEqual (Arg2, Zero))
                {
                    Return (Buffer (One)
                    {
                         0x03                                           
                    })
                }

                Return (Package (0x0A)
                {
                    "AAPL,slot-name", 
                    "Built In", 
                    "built-in", 
                    Buffer (One)
                    {
                         0x00                                           
                    }, 

                    "name", 
                    "Intel AHCI Controller", 
                    "model", 
                    Buffer (0x32)
                    {
                        "Intel Corporation, Series Chipset SATA Controller"
                    }, 

                    "device_type", 
                    Buffer (0x10)
                    {
                        "AHCI Controller"
                    }
                })
            }
        }

        Device (SAT1)
        {
            Name (_ADR, 0x001F0005)  // _ADR: Address
            Device (PRID)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                {
                    Name (PBUF, Buffer (0x14)
                    {
                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        /* 0010 */  0x00, 0x00, 0x00, 0x00                         
                    })
                    CreateDWordField (PBUF, Zero, PIO0)
                    CreateDWordField (PBUF, 0x04, DMA0)
                    CreateDWordField (PBUF, 0x08, PIO1)
                    CreateDWordField (PBUF, 0x0C, DMA1)
                    CreateDWordField (PBUF, 0x10, FLAG)
                    Store (0x78, PIO0)
                    Store (0x14, DMA0)
                    Store (0x78, PIO1)
                    Store (0x14, DMA1)
                    Store (0x1F, FLAG)
                    Return (PBUF)
                }
            }

            Device (SECD)
            {
                Name (_ADR, One)  // _ADR: Address
                Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                {
                    Name (SBUF, Buffer (0x14)
                    {
                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
                        /* 0010 */  0x00, 0x00, 0x00, 0x00                         
                    })
                    CreateDWordField (SBUF, Zero, PIO0)
                    CreateDWordField (SBUF, 0x04, DMA0)
                    CreateDWordField (SBUF, 0x08, PIO1)
                    CreateDWordField (SBUF, 0x0C, DMA1)
                    CreateDWordField (SBUF, 0x10, FLAG)
                    Store (0x78, PIO0)
                    Store (0x14, DMA0)
                    Store (0x78, PIO1)
                    Store (0x14, DMA1)
                    Store (0x1F, FLAG)
                    Return (SBUF)
                }
            }
        }

        Device (SBUS)
        {
            Name (_ADR, 0x001F0003)  // _ADR: Address
            OperationRegion (SMBP, PCI_Config, 0x40, 0xC0)
            Field (SMBP, DWordAcc, NoLock, Preserve)
            {
                    ,   2, 
                I2CE,   1
            }

            OperationRegion (SMPB, PCI_Config, 0x20, 0x04)
            Field (SMPB, DWordAcc, NoLock, Preserve)
            {
                    ,   5, 
                SBAR,   11
            }

            OperationRegion (SMBI, SystemIO, ShiftLeft (SBAR, 0x05), 0x10)
            Field (SMBI, ByteAcc, NoLock, Preserve)
            {
                HSTS,   8, 
                Offset (0x02), 
                HCON,   8, 
                HCOM,   8, 
                TXSA,   8, 
                DAT0,   8, 
                DAT1,   8, 
                HBDR,   8, 
                PECR,   8, 
                RXSA,   8, 
                SDAT,   16
            }

            Method (SSXB, 2, Serialized)
            {
                If (STRT ())
                {
                    Return (Zero)
                }

                Store (Zero, I2CE)
                Store (0xBF, HSTS)
                Store (Arg0, TXSA)
                Store (Arg1, HCOM)
                Store (0x48, HCON)
                If (COMP ())
                {
                    Or (HSTS, 0xFF, HSTS)
                    Return (One)
                }

                Return (Zero)
            }

            Method (SRXB, 1, Serialized)
            {
                If (STRT ())
                {
                    Return (0xFFFF)
                }

                Store (Zero, I2CE)
                Store (0xBF, HSTS)
                Or (Arg0, One, TXSA)
                Store (0x44, HCON)
                If (COMP ())
                {
                    Or (HSTS, 0xFF, HSTS)
                    Return (DAT0)
                }

                Return (0xFFFF)
            }

            Method (SWRB, 3, Serialized)
            {
                If (STRT ())
                {
                    Return (Zero)
                }

                Store (Zero, I2CE)
                Store (0xBF, HSTS)
                Store (Arg0, TXSA)
                Store (Arg1, HCOM)
                Store (Arg2, DAT0)
                Store (0x48, HCON)
                If (COMP ())
                {
                    Or (HSTS, 0xFF, HSTS)
                    Return (One)
                }

                Return (Zero)
            }

            Method (SRDB, 2, Serialized)
            {
                If (STRT ())
                {
                    Return (0xFFFF)
                }

                Store (Zero, I2CE)
                Store (0xBF, HSTS)
                Or (Arg0, One, TXSA)
                Store (Arg1, HCOM)
                Store (0x48, HCON)
                If (COMP ())
                {
                    Or (HSTS, 0xFF, HSTS)
                    Return (DAT0)
                }

                Return (0xFFFF)
            }

            Method (SWRW, 3, Serialized)
            {
                If (STRT ())
                {
                    Return (Zero)
                }

                Store (Zero, I2CE)
                Store (0xBF, HSTS)
                Store (Arg0, TXSA)
                Store (Arg1, HCOM)
                And (Arg2, 0xFF, DAT1)
                And (ShiftRight (Arg2, 0x08), 0xFF, DAT0)
                Store (0x4C, HCON)
                If (COMP ())
                {
                    Or (HSTS, 0xFF, HSTS)
                    Return (One)
                }

                Return (Zero)
            }

            Method (SRDW, 2, Serialized)
            {
                If (STRT ())
                {
                    Return (0xFFFF)
                }

                Store (Zero, I2CE)
                Store (0xBF, HSTS)
                Or (Arg0, One, TXSA)
                Store (Arg1, HCOM)
                Store (0x4C, HCON)
                If (COMP ())
                {
                    Or (HSTS, 0xFF, HSTS)
                    Return (Or (ShiftLeft (DAT0, 0x08), DAT1))
                }

                Return (0xFFFFFFFF)
            }

            Method (SBLW, 4, Serialized)
            {
                If (STRT ())
                {
                    Return (Zero)
                }

                Store (Arg3, I2CE)
                Store (0xBF, HSTS)
                Store (Arg0, TXSA)
                Store (Arg1, HCOM)
                Store (SizeOf (Arg2), DAT0)
                Store (Zero, Local1)
                Store (DerefOf (Index (Arg2, Zero)), HBDR)
                Store (0x54, HCON)
                While (LGreater (SizeOf (Arg2), Local1))
                {
                    Store (0x0FA0, Local0)
                    While (LAnd (LNot (And (HSTS, 0x80)), Local0))
                    {
                        Decrement (Local0)
                        Stall (0x32)
                    }

                    If (LNot (Local0))
                    {
                        KILL ()
                        Return (Zero)
                    }

                    Store (0x80, HSTS)
                    Increment (Local1)
                    If (LGreater (SizeOf (Arg2), Local1))
                    {
                        Store (DerefOf (Index (Arg2, Local1)), HBDR)
                    }
                }

                If (COMP ())
                {
                    Or (HSTS, 0xFF, HSTS)
                    Return (One)
                }

                Return (Zero)
            }

            Method (SBLR, 3, Serialized)
            {
                Name (TBUF, Buffer (0x0100){})
                If (STRT ())
                {
                    Return (Zero)
                }

                Store (Arg2, I2CE)
                Store (0xBF, HSTS)
                Or (Arg0, One, TXSA)
                Store (Arg1, HCOM)
                Store (0x54, HCON)
                Store (0x0FA0, Local0)
                While (LAnd (LNot (And (HSTS, 0x80)), Local0))
                {
                    Decrement (Local0)
                    Stall (0x32)
                }

                If (LNot (Local0))
                {
                    KILL ()
                    Return (Zero)
                }

                Store (DAT0, Index (TBUF, Zero))
                Store (0x80, HSTS)
                Store (One, Local1)
                While (LLess (Local1, DerefOf (Index (TBUF, Zero))))
                {
                    Store (0x0FA0, Local0)
                    While (LAnd (LNot (And (HSTS, 0x80)), Local0))
                    {
                        Decrement (Local0)
                        Stall (0x32)
                    }

                    If (LNot (Local0))
                    {
                        KILL ()
                        Return (Zero)
                    }

                    Store (HBDR, Index (TBUF, Local1))
                    Store (0x80, HSTS)
                    Increment (Local1)
                }

                If (COMP ())
                {
                    Or (HSTS, 0xFF, HSTS)
                    Return (TBUF)
                }

                Return (Zero)
            }

            Method (STRT, 0, Serialized)
            {
                Store (0xC8, Local0)
                While (Local0)
                {
                    If (And (HSTS, 0x40))
                    {
                        Decrement (Local0)
                        Sleep (One)
                        If (LEqual (Local0, Zero))
                        {
                            Return (One)
                        }
                    }
                    Else
                    {
                        Store (Zero, Local0)
                    }
                }

                Store (0x0FA0, Local0)
                While (Local0)
                {
                    If (And (HSTS, One))
                    {
                        Decrement (Local0)
                        Stall (0x32)
                        If (LEqual (Local0, Zero))
                        {
                            KILL ()
                        }
                    }
                    Else
                    {
                        Return (Zero)
                    }
                }

                Return (One)
            }

            Method (COMP, 0, Serialized)
            {
                Store (0x0FA0, Local0)
                While (Local0)
                {
                    If (And (HSTS, 0x02))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Decrement (Local0)
                        Stall (0x32)
                        If (LEqual (Local0, Zero))
                        {
                            KILL ()
                        }
                    }
                }

                Return (Zero)
            }

            Method (KILL, 0, Serialized)
            {
                Or (HCON, 0x02, HCON)
                Or (HSTS, 0xFF, HSTS)
            }

            Device (BUS0)
            {
                Name (_CID, "smbus")  // _CID: Compatible ID
                Name (_ADR, Zero)  // _ADR: Address
                Device (MKY0)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Name (_CID, "mikey")  // _CID: Compatible ID
                    Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                    {
                        If (LEqual (Arg2, Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                           
                            })
                        }

                        Return (Package (0x07)
                        {
                            "refnum", 
                            Zero, 
                            "address", 
                            0x39, 
                            "device-id", 
                            0x0CCB, 
                            Buffer (One)
                            {
                                 0x00                                           
                            }
                        })
                    }

                    Method (H1EN, 1, Serialized)
                    {
                        If (LLessEqual (Arg0, One))
                        {
                            If (LEqual (Arg0, One))
                            {
                                Or (GL04, 0x04, GL04)
                            }
                            Else
                            {
                                And (GL04, 0xFB, GL04)
                            }
                        }
                    }

                    Method (H1IL, 0, Serialized)
                    {
                        ShiftRight (And (GL00, 0x02), One, Local0)
                        Return (Local0)
                    }

                    Method (H1IP, 1, Serialized)
                    {
                        If (LLessEqual (Arg0, One))
                        {
                            Not (Arg0, Arg0)
                        }
                    }

                    Name (H1IN, 0x11)
                    Scope (\_GPE)
                    {
                        Method (_L11, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
                        {
                            Notify (\_SB.PCI0.SBUS.BUS0.MKY0, 0x80)
                        }
                    }

                    Method (P1IL, 0, Serialized)
                    {
                        ShiftRight (And (GL00, 0x40), 0x06, Local0)
                        Return (Local0)
                    }

                    Method (P1IP, 1, Serialized)
                    {
                        If (LLessEqual (Arg0, One))
                        {
                            Not (Arg0, Arg0)
                        }
                    }

                    Name (P1IN, 0x16)
                    Scope (\_GPE)
                    {
                        Method (_L16, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
                        {
                            Notify (\_SB.PCI0.SBUS.BUS0.MKY0, 0x81)
                        }
                    }
                }

                Device (DVL0)
                {
                    Name (_ADR, 0x57)  // _ADR: Address
                    Name (_CID, "diagsvault")  // _CID: Compatible ID
                    Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
                    {
                        If (LEqual (Arg2, Zero))
                        {
                            Return (Buffer (One)
                            {
                                 0x03                                           
                            })
                        }

                        Return (Package (0x03)
                        {
                            "address", 
                            0x57, 
                            Buffer (One)
                            {
                                 0x00                                           
                            }
                        })
                    }
                }
            }

            Device (BUS1)
            {
                Name (_CID, "smbus")  // _CID: Compatible ID
                Name (_ADR, One)  // _ADR: Address
            }
        }
    }

    Scope (_SB.PCI0)
    {
        Device (PEG0)
        {
            Name (_ADR, 0x00010000)  // _ADR: Address
            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x09, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR02 ())
                }

                Return (PR02 ())
            }

            Device (PEGP)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }
        }

        Device (PEG1)
        {
            Name (_ADR, 0x00010001)  // _ADR: Address
            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x09, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR0A ())
                }

                Return (PR0A ())
            }

            Device (PEGP)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }
        }

        Device (PEG2)
        {
            Name (_ADR, 0x00010002)  // _ADR: Address
            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x09, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR0B ())
                }

                Return (PR0B ())
            }
        }

        Device (PEG3)
        {
            Name (_ADR, 0x00060000)  // _ADR: Address
            Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
            {
                Return (GPRW (0x09, 0x04))
            }

            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR0C)
                }

                Return (PR0C)
            }
        }

        Device (B0D4)
        {
            Name (_ADR, 0x00040000)  // _ADR: Address
        }

        Device (IGPU)
        {
            Name (_ADR, 0x00020000)  // _ADR: Address
            Method (_INI, 0, NotSerialized)  // _INI: Initialize
            {
                Store (One, CLID)
                Return (Zero)
            }

            Method (PCPC, 0, NotSerialized)
            {
            }

            Method (PAPR, 0, NotSerialized)
            {
                Return (Zero)
            }

            Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
            {
                And (Arg0, 0x03, DSEN)
                If (LEqual (And (Arg0, 0x03), Zero))
                {
                    If (CondRefOf (HDOS))
                    {
                        HDOS ()
                    }
                }
            }

            Method (_DOD, 0, NotSerialized)  // _DOD: Display Output Devices
            {
                If (CondRefOf (IDAB))
                {
                    IDAB ()
                }
                Else
                {
                    Store (NDID, Local0)
                    Store (Zero, NDID)
                    If (LNotEqual (DIDL, Zero))
                    {
                        Store (SDDL (DIDL), DID1)
                    }

                    If (LNotEqual (DDL2, Zero))
                    {
                        Store (SDDL (DDL2), DID2)
                    }

                    If (LNotEqual (DDL3, Zero))
                    {
                        Store (SDDL (DDL3), DID3)
                    }

                    If (LNotEqual (DDL4, Zero))
                    {
                        Store (SDDL (DDL4), DID4)
                    }

                    If (LNotEqual (DDL5, Zero))
                    {
                        Store (SDDL (DDL5), DID5)
                    }

                    If (LNotEqual (DDL6, Zero))
                    {
                        Store (SDDL (DDL6), DID6)
                    }

                    If (LNotEqual (DDL7, Zero))
                    {
                        Store (SDDL (DDL7), DID7)
                    }

                    If (LNotEqual (DDL8, Zero))
                    {
                        Store (SDDL (DDL8), DID8)
                    }

                    If (LEqual (NDID, Zero))
                    {
                        Store (Local0, NDID)
                    }
                }

                If (LEqual (NDID, One))
                {
                    Name (TMP1, Package (0x01)
                    {
                        0xFFFFFFFF
                    })
                    Or (0x00010000, DID1, Index (TMP1, Zero))
                    Return (TMP1)
                }

                If (LEqual (NDID, 0x02))
                {
                    Name (TMP2, Package (0x02)
                    {
                        0xFFFFFFFF, 
                        0xFFFFFFFF
                    })
                    Or (0x00010000, DID1, Index (TMP2, Zero))
                    Or (0x00010000, DID2, Index (TMP2, One))
                    Return (TMP2)
                }

                If (LEqual (NDID, 0x03))
                {
                    Name (TMP3, Package (0x03)
                    {
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF
                    })
                    Or (0x00010000, DID1, Index (TMP3, Zero))
                    Or (0x00010000, DID2, Index (TMP3, One))
                    Or (0x00010000, DID3, Index (TMP3, 0x02))
                    Return (TMP3)
                }

                If (LEqual (NDID, 0x04))
                {
                    Name (TMP4, Package (0x04)
                    {
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF
                    })
                    Or (0x00010000, DID1, Index (TMP4, Zero))
                    Or (0x00010000, DID2, Index (TMP4, One))
                    Or (0x00010000, DID3, Index (TMP4, 0x02))
                    Or (0x00010000, DID4, Index (TMP4, 0x03))
                    Return (TMP4)
                }

                If (LEqual (NDID, 0x05))
                {
                    Name (TMP5, Package (0x05)
                    {
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF
                    })
                    Or (0x00010000, DID1, Index (TMP5, Zero))
                    Or (0x00010000, DID2, Index (TMP5, One))
                    Or (0x00010000, DID3, Index (TMP5, 0x02))
                    Or (0x00010000, DID4, Index (TMP5, 0x03))
                    Or (0x00010000, DID5, Index (TMP5, 0x04))
                    Return (TMP5)
                }

                If (LEqual (NDID, 0x06))
                {
                    Name (TMP6, Package (0x06)
                    {
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF
                    })
                    Or (0x00010000, DID1, Index (TMP6, Zero))
                    Or (0x00010000, DID2, Index (TMP6, One))
                    Or (0x00010000, DID3, Index (TMP6, 0x02))
                    Or (0x00010000, DID4, Index (TMP6, 0x03))
                    Or (0x00010000, DID5, Index (TMP6, 0x04))
                    Or (0x00010000, DID6, Index (TMP6, 0x05))
                    Return (TMP6)
                }

                If (LEqual (NDID, 0x07))
                {
                    Name (TMP7, Package (0x07)
                    {
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF
                    })
                    Or (0x00010000, DID1, Index (TMP7, Zero))
                    Or (0x00010000, DID2, Index (TMP7, One))
                    Or (0x00010000, DID3, Index (TMP7, 0x02))
                    Or (0x00010000, DID4, Index (TMP7, 0x03))
                    Or (0x00010000, DID5, Index (TMP7, 0x04))
                    Or (0x00010000, DID6, Index (TMP7, 0x05))
                    Or (0x00010000, DID7, Index (TMP7, 0x06))
                    Return (TMP7)
                }

                If (LEqual (NDID, 0x08))
                {
                    Name (TMP8, Package (0x08)
                    {
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF, 
                        0xFFFFFFFF
                    })
                    Or (0x00010000, DID1, Index (TMP8, Zero))
                    Or (0x00010000, DID2, Index (TMP8, One))
                    Or (0x00010000, DID3, Index (TMP8, 0x02))
                    Or (0x00010000, DID4, Index (TMP8, 0x03))
                    Or (0x00010000, DID5, Index (TMP8, 0x04))
                    Or (0x00010000, DID6, Index (TMP8, 0x05))
                    Or (0x00010000, DID7, Index (TMP8, 0x06))
                    Or (0x00010000, DID8, Index (TMP8, 0x07))
                    Return (TMP8)
                }

                If (LEqual (NDID, 0x09))
                {
                    If (CondRefOf (HWID))
                    {
                        Return (HWID)
                    }
                }

                Return (Package (0x01)
                {
                    0x0400
                })
            }

            Device (DD01)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    If (LEqual (DID1, Zero))
                    {
                        Return (One)
                    }
                    Else
                    {
                        Return (And (0xFFFF, DID1))
                    }
                }

                Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                {
                    Return (CDDS (DID1))
                }

                Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                {
                    If (LAnd (LEqual (And (SGMD, 0x7F), One), CondRefOf (SNXD)))
                    {
                        Return (NXD1)
                    }

                    Return (NDDS (DID1))
                }

                Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                {
                    If (LEqual (And (Arg0, 0xC0000000), 0xC0000000))
                    {
                        Store (NSTE, CSTE)
                    }
                }
            }

            Device (DD02)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    If (LEqual (DID2, Zero))
                    {
                        Return (0x02)
                    }
                    Else
                    {
                        Return (And (0xFFFF, DID2))
                    }
                }

                Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                {
                    Return (CDDS (DID2))
                }

                Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                {
                    If (LAnd (LEqual (And (SGMD, 0x7F), One), CondRefOf (SNXD)))
                    {
                        Return (NXD2)
                    }

                    Return (NDDS (DID2))
                }

                Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                {
                    If (LEqual (And (Arg0, 0xC0000000), 0xC0000000))
                    {
                        Store (NSTE, CSTE)
                    }
                }
            }

            Device (DD03)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    If (LEqual (DID3, Zero))
                    {
                        Return (0x03)
                    }
                    Else
                    {
                        Return (And (0xFFFF, DID3))
                    }
                }

                Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                {
                    If (LEqual (DID3, Zero))
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (CDDS (DID3))
                    }
                }

                Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                {
                    If (LAnd (LEqual (And (SGMD, 0x7F), One), CondRefOf (SNXD)))
                    {
                        Return (NXD3)
                    }

                    Return (NDDS (DID3))
                }

                Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                {
                    If (LEqual (And (Arg0, 0xC0000000), 0xC0000000))
                    {
                        Store (NSTE, CSTE)
                    }
                }
            }

            Device (DD04)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    If (LEqual (DID4, Zero))
                    {
                        Return (0x04)
                    }
                    Else
                    {
                        Return (And (0xFFFF, DID4))
                    }
                }

                Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                {
                    If (LEqual (DID4, Zero))
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (CDDS (DID4))
                    }
                }

                Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                {
                    If (LAnd (LEqual (And (SGMD, 0x7F), One), CondRefOf (SNXD)))
                    {
                        Return (NXD4)
                    }

                    Return (NDDS (DID4))
                }

                Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                {
                    If (LEqual (And (Arg0, 0xC0000000), 0xC0000000))
                    {
                        Store (NSTE, CSTE)
                    }
                }
            }

            Device (DD05)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    If (LEqual (DID5, Zero))
                    {
                        Return (0x05)
                    }
                    Else
                    {
                        Return (And (0xFFFF, DID5))
                    }
                }

                Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                {
                    If (LEqual (DID5, Zero))
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (CDDS (DID5))
                    }
                }

                Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                {
                    If (LAnd (LEqual (And (SGMD, 0x7F), One), CondRefOf (SNXD)))
                    {
                        Return (NXD5)
                    }

                    Return (NDDS (DID5))
                }

                Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                {
                    If (LEqual (And (Arg0, 0xC0000000), 0xC0000000))
                    {
                        Store (NSTE, CSTE)
                    }
                }
            }

            Device (DD06)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    If (LEqual (DID6, Zero))
                    {
                        Return (0x06)
                    }
                    Else
                    {
                        Return (And (0xFFFF, DID6))
                    }
                }

                Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                {
                    If (LEqual (DID6, Zero))
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (CDDS (DID6))
                    }
                }

                Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                {
                    If (LAnd (LEqual (And (SGMD, 0x7F), One), CondRefOf (SNXD)))
                    {
                        Return (NXD6)
                    }

                    Return (NDDS (DID6))
                }

                Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                {
                    If (LEqual (And (Arg0, 0xC0000000), 0xC0000000))
                    {
                        Store (NSTE, CSTE)
                    }
                }
            }

            Device (DD07)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    If (LEqual (DID7, Zero))
                    {
                        Return (0x07)
                    }
                    Else
                    {
                        Return (And (0xFFFF, DID7))
                    }
                }

                Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                {
                    If (LEqual (DID7, Zero))
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (CDDS (DID7))
                    }
                }

                Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                {
                    If (LAnd (LEqual (And (SGMD, 0x7F), One), CondRefOf (SNXD)))
                    {
                        Return (NXD7)
                    }

                    Return (NDDS (DID7))
                }

                Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                {
                    If (LEqual (And (Arg0, 0xC0000000), 0xC0000000))
                    {
                        Store (NSTE, CSTE)
                    }
                }
            }

            Device (DD08)
            {
                Method (_ADR, 0, Serialized)  // _ADR: Address
                {
                    If (LEqual (DID8, Zero))
                    {
                        Return (0x08)
                    }
                    Else
                    {
                        Return (And (0xFFFF, DID8))
                    }
                }

                Method (_DCS, 0, NotSerialized)  // _DCS: Display Current Status
                {
                    If (LEqual (DID8, Zero))
                    {
                        Return (0x0B)
                    }
                    Else
                    {
                        Return (CDDS (DID8))
                    }
                }

                Method (_DGS, 0, NotSerialized)  // _DGS: Display Graphics State
                {
                    If (LAnd (LEqual (And (SGMD, 0x7F), One), CondRefOf (SNXD)))
                    {
                        Return (NXD8)
                    }

                    Return (NDDS (DID8))
                }

                Method (_DSS, 1, NotSerialized)  // _DSS: Device Set State
                {
                    If (LEqual (And (Arg0, 0xC0000000), 0xC0000000))
                    {
                        Store (NSTE, CSTE)
                    }
                }
            }

            Method (SDDL, 1, NotSerialized)
            {
                Increment (NDID)
                And (Arg0, 0x0F0F, Local0)
                Or (0x80000000, Local0, Local1)
                If (LEqual (DIDL, Local0))
                {
                    Return (Local1)
                }

                If (LEqual (DDL2, Local0))
                {
                    Return (Local1)
                }

                If (LEqual (DDL3, Local0))
                {
                    Return (Local1)
                }

                If (LEqual (DDL4, Local0))
                {
                    Return (Local1)
                }

                If (LEqual (DDL5, Local0))
                {
                    Return (Local1)
                }

                If (LEqual (DDL6, Local0))
                {
                    Return (Local1)
                }

                If (LEqual (DDL7, Local0))
                {
                    Return (Local1)
                }

                If (LEqual (DDL8, Local0))
                {
                    Return (Local1)
                }

                Return (Zero)
            }

            Method (CDDS, 1, NotSerialized)
            {
                And (Arg0, 0x0F0F, Local0)
                If (LEqual (Zero, Local0))
                {
                    Return (0x1D)
                }

                If (LEqual (CADL, Local0))
                {
                    Return (0x1F)
                }

                If (LEqual (CAL2, Local0))
                {
                    Return (0x1F)
                }

                If (LEqual (CAL3, Local0))
                {
                    Return (0x1F)
                }

                If (LEqual (CAL4, Local0))
                {
                    Return (0x1F)
                }

                If (LEqual (CAL5, Local0))
                {
                    Return (0x1F)
                }

                If (LEqual (CAL6, Local0))
                {
                    Return (0x1F)
                }

                If (LEqual (CAL7, Local0))
                {
                    Return (0x1F)
                }

                If (LEqual (CAL8, Local0))
                {
                    Return (0x1F)
                }

                If (LEqual (CADL, Zero))
                {
                    If (LEqual (And (Arg0, 0x0F0F), 0x0400))
                    {
                        Return (0x1F)
                    }
                }

                Return (0x1D)
            }

            Method (NDDS, 1, NotSerialized)
            {
                And (Arg0, 0x0F0F, Local0)
                If (LEqual (Zero, Local0))
                {
                    Return (Zero)
                }

                If (LEqual (NADL, Local0))
                {
                    Return (One)
                }

                If (LEqual (NDL2, Local0))
                {
                    Return (One)
                }

                If (LEqual (NDL3, Local0))
                {
                    Return (One)
                }

                If (LEqual (NDL4, Local0))
                {
                    Return (One)
                }

                If (LEqual (NDL5, Local0))
                {
                    Return (One)
                }

                If (LEqual (NDL6, Local0))
                {
                    Return (One)
                }

                If (LEqual (NDL7, Local0))
                {
                    Return (One)
                }

                If (LEqual (NDL8, Local0))
                {
                    Return (One)
                }

                If (LEqual (NADL, Zero))
                {
                    If (LEqual (And (Arg0, 0x0F0F), 0x0400))
                    {
                        Return (One)
                    }
                }

                Return (Zero)
            }

            Scope (^^PCI0)
            {
                OperationRegion (MCHP, PCI_Config, 0x40, 0xC0)
                Field (MCHP, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x60), 
                    TASM,   10, 
                    Offset (0x62)
                }
            }

            OperationRegion (IGDP, PCI_Config, 0x40, 0xC0)
            Field (IGDP, AnyAcc, NoLock, Preserve)
            {
                Offset (0x12), 
                    ,   1, 
                GIVD,   1, 
                    ,   2, 
                GUMA,   3, 
                Offset (0x14), 
                    ,   4, 
                GMFN,   1, 
                Offset (0x18), 
                Offset (0xA4), 
                ASLE,   8, 
                Offset (0xA8), 
                GSSE,   1, 
                GSSB,   14, 
                GSES,   1, 
                Offset (0xB0), 
                    ,   12, 
                CDVL,   1, 
                Offset (0xB2), 
                Offset (0xB5), 
                LBPC,   8, 
                Offset (0xBC), 
                ASLS,   32
            }

            OperationRegion (IGDM, SystemMemory, ASLB, 0x2000)
            Field (IGDM, AnyAcc, NoLock, Preserve)
            {
                SIGN,   128, 
                SIZE,   32, 
                OVER,   32, 
                SVER,   256, 
                VVER,   128, 
                GVER,   128, 
                MBOX,   32, 
                DMOD,   32, 
                Offset (0x100), 
                DRDY,   32, 
                CSTS,   32, 
                CEVT,   32, 
                Offset (0x120), 
                DIDL,   32, 
                DDL2,   32, 
                DDL3,   32, 
                DDL4,   32, 
                DDL5,   32, 
                DDL6,   32, 
                DDL7,   32, 
                DDL8,   32, 
                CPDL,   32, 
                CPL2,   32, 
                CPL3,   32, 
                CPL4,   32, 
                CPL5,   32, 
                CPL6,   32, 
                CPL7,   32, 
                CPL8,   32, 
                CADL,   32, 
                CAL2,   32, 
                CAL3,   32, 
                CAL4,   32, 
                CAL5,   32, 
                CAL6,   32, 
                CAL7,   32, 
                CAL8,   32, 
                NADL,   32, 
                NDL2,   32, 
                NDL3,   32, 
                NDL4,   32, 
                NDL5,   32, 
                NDL6,   32, 
                NDL7,   32, 
                NDL8,   32, 
                ASLP,   32, 
                TIDX,   32, 
                CHPD,   32, 
                CLID,   32, 
                CDCK,   32, 
                SXSW,   32, 
                EVTS,   32, 
                CNOT,   32, 
                NRDY,   32, 
                Offset (0x200), 
                SCIE,   1, 
                GEFC,   4, 
                GXFC,   3, 
                GESF,   8, 
                Offset (0x204), 
                PARM,   32, 
                DSLP,   32, 
                Offset (0x300), 
                ARDY,   32, 
                ASLC,   32, 
                TCHE,   32, 
                ALSI,   32, 
                BCLP,   32, 
                PFIT,   32, 
                CBLV,   32, 
                BCLM,   320, 
                CPFM,   32, 
                EPFM,   32, 
                PLUT,   592, 
                PFMB,   32, 
                CCDV,   32, 
                PCFT,   32, 
                Offset (0x400), 
                GVD1,   49152, 
                PHED,   32, 
                BDDC,   2048
            }

            Name (DBTB, Package (0x15)
            {
                Zero, 
                0x07, 
                0x38, 
                0x01C0, 
                0x0E00, 
                0x3F, 
                0x01C7, 
                0x0E07, 
                0x01F8, 
                0x0E38, 
                0x0FC0, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                Zero, 
                0x7000, 
                0x7007, 
                0x7038, 
                0x71C0, 
                0x7E00
            })
            Name (CDCT, Package (0x05)
            {
                Package (0x02)
                {
                    0xE4, 
                    0x0140
                }, 

                Package (0x02)
                {
                    0xDE, 
                    0x014D
                }, 

                Package (0x02)
                {
                    0xDE, 
                    0x014D
                }, 

                Package (0x02)
                {
                    Zero, 
                    Zero
                }, 

                Package (0x02)
                {
                    0xDE, 
                    0x014D
                }
            })
            Name (SUCC, One)
            Name (NVLD, 0x02)
            Name (CRIT, 0x04)
            Name (NCRT, 0x06)
            Method (GSCI, 0, Serialized)
            {
                Method (GBDA, 0, Serialized)
                {
                    If (LEqual (GESF, Zero))
                    {
                        Store (0x0679, PARM)
                        Store (Zero, GESF)
                        Return (SUCC)
                    }

                    If (LEqual (GESF, One))
                    {
                        Store (0x0240, PARM)
                        Store (Zero, GESF)
                        Return (SUCC)
                    }

                    If (LEqual (GESF, 0x04))
                    {
                        And (PARM, 0xEFFF0000, PARM)
                        And (PARM, ShiftLeft (DerefOf (Index (DBTB, IBTT)), 0x10), PARM)
                        Or (PARM, IBTT, PARM)
                        Store (Zero, GESF)
                        Return (SUCC)
                    }

                    If (LEqual (GESF, 0x05))
                    {
                        Store (IPSC, PARM)
                        Or (PARM, ShiftLeft (IPAT, 0x08), PARM)
                        Add (PARM, 0x0100, PARM)
                        Or (PARM, ShiftLeft (LIDS, 0x10), PARM)
                        Add (PARM, 0x00010000, PARM)
                        Or (PARM, ShiftLeft (IBIA, 0x14), PARM)
                        Store (Zero, GESF)
                        Return (SUCC)
                    }

                    If (LEqual (GESF, 0x06))
                    {
                        Store (ITVF, PARM)
                        Or (PARM, ShiftLeft (ITVM, 0x04), PARM)
                        Store (Zero, GESF)
                        Return (SUCC)
                    }

                    If (LEqual (GESF, 0x07))
                    {
                        Store (GIVD, PARM)
                        XOr (PARM, One, PARM)
                        Or (PARM, ShiftLeft (GMFN, One), PARM)
                        Or (PARM, 0x1800, PARM)
                        Or (PARM, ShiftLeft (IDMS, 0x11), PARM)
                        Or (PARM, ShiftLeft (DerefOf (Index (DerefOf (Index (CDCT, HVCO)), CDVL)), 0x15), PARM)
                        Store (One, GESF)
                        Return (SUCC)
                    }

                    If (LEqual (GESF, 0x0A))
                    {
                        Store (Zero, PARM)
                        If (ISSC)
                        {
                            Or (PARM, 0x03, PARM)
                        }

                        Store (Zero, GESF)
                        Return (SUCC)
                    }

                    If (LEqual (GESF, 0x0B))
                    {
                        Store (KSV0, PARM)
                        Store (KSV1, GESF)
                        Return (SUCC)
                    }

                    Store (Zero, GESF)
                    Return (CRIT)
                }

                Method (SBCB, 0, Serialized)
                {
                    If (LEqual (GESF, Zero))
                    {
                        Store (Zero, PARM)
                        Store (0x000F87FD, PARM)
                        Store (Zero, GESF)
                        Return (SUCC)
                    }

                    If (LEqual (GESF, One))
                    {
                        Store (Zero, GESF)
                        Store (Zero, PARM)
                        Return (SUCC)
                    }

                    If (LEqual (GESF, 0x03))
                    {
                        Store (Zero, GESF)
                        Store (Zero, PARM)
                        Return (SUCC)
                    }

                    If (LEqual (GESF, 0x04))
                    {
                        Store (Zero, GESF)
                        Store (Zero, PARM)
                        Return (SUCC)
                    }

                    If (LEqual (GESF, 0x05))
                    {
                        Store (Zero, GESF)
                        Store (Zero, PARM)
                        Return (SUCC)
                    }

                    If (LEqual (GESF, 0x06))
                    {
                        And (PARM, 0x0F, ITVF)
                        ShiftRight (And (PARM, 0xF0), 0x04, ITVM)
                        Store (Zero, GESF)
                        Store (Zero, PARM)
                        Return (SUCC)
                    }

                    If (LEqual (GESF, 0x07))
                    {
                        If (LEqual (PARM, Zero))
                        {
                            Store (CLID, Local0)
                            If (And (0x80000000, Local0))
                            {
                                And (CLID, 0x0F, CLID)
                                GLID (CLID)
                            }
                        }

                        Store (Zero, GESF)
                        Store (Zero, PARM)
                        Return (SUCC)
                    }

                    If (LEqual (GESF, 0x08))
                    {
                        Store (Zero, GESF)
                        Store (Zero, PARM)
                        Return (SUCC)
                    }

                    If (LEqual (GESF, 0x09))
                    {
                        And (PARM, 0xFF, IBTT)
                        Store (Zero, GESF)
                        Store (Zero, PARM)
                        Return (SUCC)
                    }

                    If (LEqual (GESF, 0x0A))
                    {
                        And (PARM, 0xFF, IPSC)
                        If (And (ShiftRight (PARM, 0x08), 0xFF))
                        {
                            And (ShiftRight (PARM, 0x08), 0xFF, IPAT)
                            Decrement (IPAT)
                        }

                        And (ShiftRight (PARM, 0x14), 0x07, IBIA)
                        Store (Zero, GESF)
                        Store (Zero, PARM)
                        Return (SUCC)
                    }

                    If (LEqual (GESF, 0x0B))
                    {
                        And (ShiftRight (PARM, One), One, IF1E)
                        If (And (PARM, 0x0001E000))
                        {
                            And (ShiftRight (PARM, 0x0D), 0x0F, IDMS)
                        }
                        Else
                        {
                            And (ShiftRight (PARM, 0x11), 0x0F, IDMS)
                        }

                        Store (Zero, GESF)
                        Store (Zero, PARM)
                        Return (SUCC)
                    }

                    If (LEqual (GESF, 0x10))
                    {
                        Store (Zero, GESF)
                        Store (Zero, PARM)
                        Return (SUCC)
                    }

                    If (LEqual (GESF, 0x11))
                    {
                        ShiftLeft (LIDS, 0x08, PARM)
                        Add (PARM, 0x0100, PARM)
                        Store (Zero, GESF)
                        Return (SUCC)
                    }

                    If (LEqual (GESF, 0x12))
                    {
                        If (And (PARM, One))
                        {
                            If (LEqual (ShiftRight (PARM, One), One))
                            {
                                Store (One, ISSC)
                            }
                            Else
                            {
                                Store (Zero, GESF)
                                Return (CRIT)
                            }
                        }
                        Else
                        {
                            Store (Zero, ISSC)
                        }

                        Store (Zero, GESF)
                        Store (Zero, PARM)
                        Return (SUCC)
                    }

                    If (LEqual (GESF, 0x13))
                    {
                        Store (Zero, GESF)
                        Store (Zero, PARM)
                        Return (SUCC)
                    }

                    If (LEqual (GESF, 0x14))
                    {
                        And (PARM, 0x0F, PAVP)
                        Store (Zero, GESF)
                        Store (Zero, PARM)
                        Return (SUCC)
                    }

                    Store (Zero, GESF)
                    Return (SUCC)
                }

                If (LEqual (GEFC, 0x04))
                {
                    Store (GBDA (), GXFC)
                }

                If (LEqual (GEFC, 0x06))
                {
                    Store (SBCB (), GXFC)
                }

                Store (Zero, GEFC)
                Store (One, SCIS)
                Store (Zero, GSSE)
                Store (Zero, SCIE)
                Return (Zero)
            }

            Method (PDRD, 0, NotSerialized)
            {
                If (LNot (DRDY))
                {
                    Sleep (ASLP)
                }

                Return (LNot (DRDY))
            }

            Method (PSTS, 0, NotSerialized)
            {
                If (LGreater (CSTS, 0x02))
                {
                    Sleep (ASLP)
                }

                Return (LEqual (CSTS, 0x03))
            }

            Method (GNOT, 2, NotSerialized)
            {
                If (PDRD ())
                {
                    Return (One)
                }

                Store (Arg0, CEVT)
                Store (0x03, CSTS)
                If (LAnd (LEqual (CHPD, Zero), LEqual (Arg1, Zero)))
                {
                    If (LOr (LGreater (OSYS, 0x07D0), LLess (OSYS, 0x07D6)))
                    {
                        Notify (PCI0, Arg1)
                    }
                }

                If (CondRefOf (HNOT))
                {
                    HNOT (Arg0)
                }

                Return (Zero)
            }

            Method (GHDS, 1, NotSerialized)
            {
                Store (Arg0, TIDX)
                Return (GNOT (One, Zero))
            }

            Method (GLID, 1, NotSerialized)
            {
                If (LEqual (Arg0, One))
                {
                    Store (0x03, CLID)
                }
                Else
                {
                    Store (Arg0, CLID)
                }

                Return (GNOT (0x02, Zero))
            }

            Method (GDCK, 1, NotSerialized)
            {
                Store (Arg0, CDCK)
                Return (GNOT (0x04, Zero))
            }

            Method (PARD, 0, NotSerialized)
            {
                If (LNot (ARDY))
                {
                    Sleep (ASLP)
                }

                Return (LNot (ARDY))
            }

            Method (AINT, 2, NotSerialized)
            {
                If (LNot (And (TCHE, ShiftLeft (One, Arg0))))
                {
                    Return (One)
                }

                If (PARD ())
                {
                    Return (One)
                }

                If (LEqual (Arg0, 0x02))
                {
                    If (CPFM)
                    {
                        And (CPFM, 0x0F, Local0)
                        And (EPFM, 0x0F, Local1)
                        If (LEqual (Local0, One))
                        {
                            If (And (Local1, 0x06))
                            {
                                Store (0x06, PFIT)
                            }
                            ElseIf (And (Local1, 0x08))
                            {
                                Store (0x08, PFIT)
                            }
                            Else
                            {
                                Store (One, PFIT)
                            }
                        }

                        If (LEqual (Local0, 0x06))
                        {
                            If (And (Local1, 0x08))
                            {
                                Store (0x08, PFIT)
                            }
                            ElseIf (And (Local1, One))
                            {
                                Store (One, PFIT)
                            }
                            Else
                            {
                                Store (0x06, PFIT)
                            }
                        }

                        If (LEqual (Local0, 0x08))
                        {
                            If (And (Local1, One))
                            {
                                Store (One, PFIT)
                            }
                            ElseIf (And (Local1, 0x06))
                            {
                                Store (0x06, PFIT)
                            }
                            Else
                            {
                                Store (0x08, PFIT)
                            }
                        }
                    }
                    Else
                    {
                        XOr (PFIT, 0x07, PFIT)
                    }

                    Or (PFIT, 0x80000000, PFIT)
                    Store (0x04, ASLC)
                }
                ElseIf (LEqual (Arg0, One))
                {
                    Divide (Multiply (Arg1, 0xFF), 0x64, , BCLP)
                    Or (BCLP, 0x80000000, BCLP)
                    Store (0x02, ASLC)
                }
                ElseIf (LEqual (Arg0, Zero))
                {
                    Store (Arg1, ALSI)
                    Store (One, ASLC)
                }
                Else
                {
                    Return (One)
                }

                Store (One, ASLE)
                Return (Zero)
            }

            Method (SCIP, 0, NotSerialized)
            {
                If (LNotEqual (OVER, Zero))
                {
                    Return (LNot (GSMI))
                }

                Return (Zero)
            }

            Device (^^MEM2)
            {
                Name (_HID, EisaId ("PNP0C01"))  // _HID: Hardware ID
                Name (_UID, 0x02)  // _UID: Unique ID
                Name (CRS1, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x20000000,         // Address Base
                        0x00200000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0x40000000,         // Address Base
                        0x00200000,         // Address Length
                        )
                })
                Name (CRS2, ResourceTemplate ()
                {
                    Memory32Fixed (ReadWrite,
                        0x20000000,         // Address Base
                        0x00200000,         // Address Length
                        )
                    Memory32Fixed (ReadWrite,
                        0x40004000,         // Address Base
                        0x00001000,         // Address Length
                        )
                })
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    If (IGDS)
                    {
                        If (LOr (LEqual (And (PNHM, 0x0FFF0FF0), 0x000206A0), LEqual (And (PNHM, 0x0FFF0FFF), 0x000306A0)))
                        {
                            Return (0x0F)
                        }
                    }

                    Return (Zero)
                }

                Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                {
                    If (LOr (LEqual (And (PNHM, 0x0FFF0FF0), 0x000206A0), LEqual (And (PNHM, 0x0FFF0FFF), 0x000306A0)))
                    {
                        Return (CRS1)
                    }

                    Return (CRS2)
                }
            }

            Name (_SUN, 0x03)  // _SUN: Slot User Number
            OperationRegion (RMP3, PCI_Config, Zero, 0x14)
            Device (PNLF)
            {
                Name (_ADR, Zero)  // _ADR: Address
                Name (_HID, EisaId ("APP0002"))  // _HID: Hardware ID
                Name (_CID, "backlight")  // _CID: Compatible ID
                Name (_UID, Zero)  // _UID: Unique ID
                Name (_STA, 0x0B)  // _STA: Status
                Field (RMP3, AnyAcc, NoLock, Preserve)
                {
                    Offset (0x02), 
                    GDID,   16, 
                    Offset (0x10), 
                    BAR1,   32
                }

                OperationRegion (RMB1, SystemMemory, And (BAR1, 0xFFFFFFFFFFFFFFF0), 0x000E1184)
                Field (RMB1, AnyAcc, Lock, Preserve)
                {
                    Offset (0x48250), 
                    LEV2,   32, 
                    LEVL,   32, 
                    Offset (0x70040), 
                    P0BL,   32, 
                    Offset (0xC2000), 
                    GRAN,   32, 
                    Offset (0xC8250), 
                    LEVW,   32, 
                    LEVX,   32, 
                    Offset (0xE1180), 
                    PCHL,   32
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    Store (One, Local4)
                    If (CondRefOf (\RMCF.BKLT))
                    {
                        Store (\RMCF.BKLT, Local4)
                    }

                    If (LEqual (Zero, And (One, Local4)))
                    {
                        Return (Zero)
                    }

                    Store (GDID, Local0)
                    Store (Ones, Local2)
                    If (CondRefOf (\RMCF.LMAX))
                    {
                        Store (\RMCF.LMAX, Local2)
                    }

                    Store (Zero, Local3)
                    If (CondRefOf (\RMCF.FBTP))
                    {
                        Store (\RMCF.FBTP, Local3)
                    }

                    If (LEqual (Zero, Local3))
                    {
                        If (LNotEqual (Ones, Match (Package (0x10)
                                        {
                                            0x010B, 
                                            0x0102, 
                                            0x0106, 
                                            0x1106, 
                                            0x1601, 
                                            0x0116, 
                                            0x0126, 
                                            0x0112, 
                                            0x0122, 
                                            0x0152, 
                                            0x0156, 
                                            0x0162, 
                                            0x0166, 
                                            0x016A, 
                                            0x46, 
                                            0x42
                                        }, MEQ, Local0, MTR, Zero, Zero)))
                        {
                            Store (One, Local3)
                        }
                        Else
                        {
                            Store (0x02, Local3)
                        }
                    }

                    If (LEqual (One, Local3))
                    {
                        If (LEqual (Ones, Local2))
                        {
                            Store (0x0710, Local2)
                        }

                        ShiftRight (LEVX, 0x10, Local1)
                        If (LNot (Local1))
                        {
                            Store (Local2, Local1)
                        }

                        If (LNotEqual (Local2, Local1))
                        {
                            Divide (Multiply (LEVL, Local2), Local1, , Local0)
                            ShiftLeft (Local2, 0x10, Local3)
                            If (LGreater (Local2, Local1))
                            {
                                Store (Local3, LEVX)
                                Store (Local0, LEVL)
                            }
                            Else
                            {
                                Store (Local0, LEVL)
                                Store (Local3, LEVX)
                            }
                        }
                    }
                    ElseIf (LEqual (0x02, Local3))
                    {
                        If (LEqual (Ones, Local2))
                        {
                            If (LNotEqual (Ones, Match (Package (0x16)
                                            {
                                                0x0D26, 
                                                0x0A26, 
                                                0x0D22, 
                                                0x0412, 
                                                0x0416, 
                                                0x0A16, 
                                                0x0A1E, 
                                                0x0A1E, 
                                                0x0A2E, 
                                                0x041E, 
                                                0x041A, 
                                                0x0BD1, 
                                                0x0BD2, 
                                                0x0BD3, 
                                                0x1606, 
                                                0x160E, 
                                                0x1616, 
                                                0x161E, 
                                                0x1626, 
                                                0x1622, 
                                                0x1612, 
                                                0x162B
                                            }, MEQ, Local0, MTR, Zero, Zero)))
                            {
                                Store (0x0AD9, Local2)
                            }
                            Else
                            {
                                Store (0x056C, Local2)
                            }
                        }

                        If (LEqual (Zero, And (0x02, Local4)))
                        {
                            Store (0xC0000000, Local5)
                            If (CondRefOf (\RMCF.LEVW))
                            {
                                If (LNotEqual (Ones, \RMCF.LEVW))
                                {
                                    Store (\RMCF.LEVW, Local5)
                                }
                            }

                            Store (Local5, LEVW)
                        }

                        If (And (0x04, Local4))
                        {
                            If (CondRefOf (\RMCF.GRAN))
                            {
                                Store (\RMCF.GRAN, GRAN)
                            }
                            Else
                            {
                                Store (Zero, GRAN)
                            }
                        }

                        ShiftRight (LEVX, 0x10, Local1)
                        If (LNot (Local1))
                        {
                            Store (Local2, Local1)
                        }

                        If (LNotEqual (Local2, Local1))
                        {
                            Or (Divide (Multiply (And (LEVX, 0xFFFF), Local2), Local1, ), ShiftLeft (Local2, 0x10), Local0)
                            Store (Local0, LEVX)
                        }
                    }

                    If (LEqual (Local2, 0x0710))
                    {
                        Store (0x0E, _UID)
                    }
                    ElseIf (LEqual (Local2, 0x0AD9))
                    {
                        Store (0x0F, _UID)
                    }
                    ElseIf (LEqual (Local2, 0x056C))
                    {
                        Store (0x10, _UID)
                    }
                    ElseIf (LEqual (Local2, 0x07A1))
                    {
                        Store (0x11, _UID)
                    }
                    ElseIf (LEqual (Local2, 0x1499))
                    {
                        Store (0x12, _UID)
                    }
                    Else
                    {
                        Store (0x63, _UID)
                    }

                    Return (Zero)
                }
            }
        }
    }

    Scope (\)
    {
        OperationRegion (CNVS, SystemMemory, 0xDAF9E018, 0x0800)
        Field (CNVS, AnyAcc, Lock, Preserve)
        {
            SFUN,   8, 
            SPR0,   8, 
            SPR1,   8, 
            SPR2,   8, 
            WNVA,   32, 
            WNVB,   32, 
            WNVC,   32, 
            WNVD,   32, 
            WFLG,   32, 
            WNVS,   32, 
            WNVI,   32, 
            TSMI,   8, 
            Offset (0x400), 
            WDBA,   32, 
            SVID,   16, 
            Offset (0x408), 
            Offset (0x40A), 
            DSID,   16, 
            CDST,   16, 
            NDST,   16, 
            Offset (0x411), 
            Offset (0x412), 
            SKUT,   8, 
            MOID,   8, 
            GPUT,   8, 
            PMDP,   8, 
            Offset (0x417), 
            TRBO,   8, 
            DDST,   16, 
            BRAN,   8, 
            Offset (0x41C), 
            OSBT,   8, 
            Offset (0x41E), 
            Offset (0x41F), 
            Offset (0x420), 
            Offset (0x440), 
            AWCB,   384, 
            AWDB,   640, 
            Offset (0x600), 
            Offset (0x60C), 
            LVID,   16, 
            LDID,   16, 
            LTPY,   8, 
            LDIS,   8, 
            CRVI,   16, 
            CRDI,   16, 
            CRTP,   8, 
            CRDS,   8, 
            CMVI,   16, 
            CMDI,   16, 
            CMTP,   8, 
            CMDS,   8, 
            ADVI,   16, 
            ADDI,   16, 
            ADTP,   8, 
            ADDS,   8, 
            FPVI,   16, 
            FPDI,   16, 
            FPTP,   8, 
            FPDS,   8, 
            WLVI,   16, 
            WLDI,   16, 
            WLTP,   8, 
            WLDS,   8, 
            BTVI,   16, 
            BTDI,   16, 
            BTTP,   8, 
            BTDS,   8, 
            WMVI,   16, 
            WMDI,   16, 
            WMTP,   8, 
            WMDS,   8, 
            WWVI,   16, 
            WWDI,   16, 
            WWTP,   8, 
            WWDS,   8, 
            Offset (0x64E), 
            TMVI,   16, 
            TMDI,   16, 
            TMTP,   8, 
            TMDS,   8, 
            Offset (0x660), 
            USBD,   1, 
            EH02,   1, 
            Offset (0x661), 
            ODDD,   1, 
            ODDE,   1, 
            Offset (0x662), 
            EXCD,   1, 
            EXCE,   1, 
            Offset (0x663), 
            ESAD,   1, 
            ESAE,   1, 
            Offset (0x664), 
            Offset (0x666), 
            DCKS,   8, 
            Offset (0x6E1), 
            UCST,   8, 
            LLOB,   8, 
            Offset (0x6E4), 
            BNCV,   8, 
            BND0,   8, 
            BND1,   8, 
            BND2,   8, 
            BND3,   8, 
            BND4,   8, 
            BND5,   8, 
            BND6,   8, 
            BND7,   8, 
            BND8,   8, 
            BND9,   8, 
            BNDA,   8
        }

        Method (TRPS, 2, NotSerialized)
        {
            Acquire (MSMI, 0xFFFF)
            Store (Arg1, SPR0)
            Store (Arg0, SFUN)
            Store (TSMI, SSMP)
            Store (SPR0, Local0)
            Release (MSMI)
            Return (Local0)
        }
    }

    Scope (\)
    {
        Mutex (MSMI, 0x00)
        Method (WSMI, 1, NotSerialized)
        {
            Store (Arg0, SFUN)
            Store (TSMI, SSMP)
        }

        Method (HKEY, 1, NotSerialized)
        {
            TRPS (0x14, Arg0)
        }

        Method (LAMN, 1, NotSerialized)
        {
            If (\_SB.AMW0.WLMP)
            {
                Store (Arg0, \_SB.AMW0.WLID)
                Notify (\_SB.AMW0, 0xB0)
            }
            Else
            {
                TRPS (0x13, Arg0)
            }
        }

        Method (RBEC, 1, NotSerialized)
        {
            Return (TRPS (0x10, Arg0))
        }

        Method (WBEC, 2, NotSerialized)
        {
            Acquire (MSMI, 0xFFFF)
            Store (Arg1, SPR1)
            Store (Arg0, SPR0)
            Store (0x11, SFUN)
            Store (TSMI, SSMP)
            Release (MSMI)
        }

        Method (MBEC, 3, NotSerialized)
        {
            Acquire (MSMI, 0xFFFF)
            Store (Arg2, SPR2)
            Store (Arg1, SPR1)
            Store (Arg0, SPR0)
            Store (0x12, SFUN)
            Store (TSMI, SSMP)
            Release (MSMI)
        }
    }

    Scope (\)
    {
        Name (BCEN, One)
        Name (BCVE, Zero)
        Name (BRLI, 0x0A)
        Name (TSLD, One)
    }

    Scope (_SB.PCI0.LPCB)
    {
        Device (EC0)
        {
            Name (_HID, EisaId ("PNP0C09"))  // _HID: Hardware ID
            Name (_GPE, 0x17)  // _GPE: General Purpose Events
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }

            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0062,             // Range Minimum
                    0x0062,             // Range Maximum
                    0x00,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0066,             // Range Minimum
                    0x0066,             // Range Maximum
                    0x00,               // Alignment
                    0x01,               // Length
                    )
            })
            OperationRegion (ECO1, SystemIO, 0x62, One)
            Field (ECO1, ByteAcc, Lock, Preserve)
            {
                PX62,   8
            }

            OperationRegion (ECO2, SystemIO, 0x66, One)
            Field (ECO2, ByteAcc, Lock, Preserve)
            {
                PX66,   8
            }

            OperationRegion (ECMB, SystemMemory, 0xFE802000, 0x0200)
            OperationRegion (RAM, EmbeddedControl, Zero, 0xFF)
            Field (RAM, ByteAcc, Lock, Preserve)
            {
                Offset (0x0A), 
                    ,   1, 
                BLNK,   1, 
                WLLD,   2, 
                BTLD,   2, 
                Offset (0x10), 
                    ,   1, 
                KTEE,   1, 
                Offset (0x13), 
                URTB,   8, 
                Offset (0x52), 
                WLEX,   1, 
                BTEX,   1, 
                WWEX,   1, 
                WMEX,   1, 
                Offset (0x54), 
                    ,   2, 
                IOAC,   3, 
                Offset (0x5A), 
                FVPS,   8, 
                Offset (0x5C), 
                OSTP,   8, 
                DKEC,   1, 
                Offset (0x6F), 
                ECTC,   8, 
                    ,   2, 
                DKIN,   1, 
                Offset (0x71), 
                WLEN,   1, 
                BTEN,   1, 
                    ,   1, 
                MUTE,   1, 
                KBID,   3, 
                USBP,   1, 
                    ,   2, 
                KEYW,   1, 
                RTCW,   1, 
                LIDW,   1, 
                BL2W,   1, 
                TPDW,   1, 
                Offset (0x73), 
                WWEN,   1, 
                Offset (0x76), 
                SYSC,   4, 
                SYSO,   4, 
                Offset (0x8C), 
                DBG0,   8, 
                DBG1,   8, 
                DBG2,   8, 
                DBG3,   8, 
                Offset (0x91), 
                TTID,   8, 
                KTAF,   8
            }

            Field (RAM, ByteAcc, Lock, Preserve)
            {
                Offset (0x7F), 
                BNEN,   1, 
                BNCM,   1, 
                BNDM,   1, 
                BNVE,   1, 
                Offset (0x83), 
                BNAC,   4, 
                BNDC,   4
            }

            Field (ECMB, ByteAcc, Lock, Preserve)
            {
                Offset (0x0D), 
                MLMA,   1
            }

            Field (RAM, ByteAcc, Lock, Preserve)
            {
                Offset (0x90), 
                SCPM,   1, 
                Offset (0x92), 
                KCSS,   1, 
                KCTT,   1, 
                KDTT,   1, 
                KOSD,   1, 
                KVTP,   1, 
                KCP1,   1, 
                    ,   1, 
                KCP2,   1
            }

            Method (RDEC, 1, Serialized)
            {
                If (ECON)
                {
                    OperationRegion (ECRM, EmbeddedControl, Arg0, One)
                    Field (ECRM, ByteAcc, Lock, Preserve)
                    {
                        ECRB,   8
                    }

                    Return (ECRB)
                }
                Else
                {
                    Return (RBEC (Arg0))
                }
            }

            Method (WREC, 2, Serialized)
            {
                If (ECON)
                {
                    OperationRegion (ECRM, EmbeddedControl, Arg0, One)
                    Field (ECRM, ByteAcc, Lock, Preserve)
                    {
                        ECRB,   8
                    }

                    Store (Arg1, ECRB)
                }
                Else
                {
                    WBEC (Arg0, Arg1)
                }
            }

            Method (MDEC, 3, Serialized)
            {
                If (ECON)
                {
                    OperationRegion (ECRM, EmbeddedControl, Arg0, One)
                    Field (ECRM, ByteAcc, Lock, Preserve)
                    {
                        ECRB,   8
                    }

                    Store (ECRB, Local0)
                    And (Local0, Arg1, Local0)
                    Or (Local0, Arg2, Local0)
                    Store (Local0, ECRB)
                }
                Else
                {
                    MBEC (Arg0, Arg1, Arg2)
                }
            }

            Method (_REG, 2, NotSerialized)  // _REG: Region Availability
            {
                If (LEqual (Arg0, 0x03))
                {
                    Store (Arg1, ECON)
                    TINI ()
                    Store (0x05, SYSO)
                    If (LGreaterEqual (OSYS, 0x07D6))
                    {
                        Store (Zero, BNEN)
                    }

                    Store (BNEN, BCEN)
                    Store (BNVE, BCVE)
                    If (BCEN)
                    {
                        If (BCVE){}
                    }

                    Store (GOST (), OSTP)
                    ^^^PEG1.PEGP.USPL (One)
                }

                If (TSLD)
                {
                    ^^^IGPU.GLID (MLID)
                }
                Else
                {
                    ^^^IGPU.GLID (One)
                }
            }

            Method (TINI, 0, NotSerialized)
            {
                If (ECON)
                {
                    Store (Zero, KTAF)
                    Store (One, KTEE)
                }
                Else
                {
                    WBEC (0x92, Zero)
                    MBEC (0x10, 0xFD, 0x02)
                }
            }

            Name (WLES, Zero)
            Name (BTES, Zero)
            Name (WWES, Zero)
            Name (WLE3, Zero)
            Name (BTE3, Zero)
            Name (WWE3, Zero)
            Name (WME3, Zero)
            Name (ARFS, Zero)
            Name (IOES, Zero)
            Name (ACIS, Zero)
            Name (LDST, One)
            Method (ECPS, 1, NotSerialized)
            {
                Store (Arg0, SYSC)
                Store (One, MUTE)
                Store (OSYS, WNVA)
                TRPS (0xC9, Arg0)
                If (LEqual (Arg0, 0x03))
                {
                    Store (WLEX, WLE3)
                    Store (BTEX, BTE3)
                    Store (WWEX, WWE3)
                    Store (WMEX, WME3)
                    Store (WLEN, WLES)
                    Store (BTEN, BTES)
                    Store (WWEN, WWES)
                }

                If (LEqual (Arg0, 0x04))
                {
                    If (LLess (OSYS, 0x07DC))
                    {
                        Store (One, BLNK)
                    }
                }

                If (LOr (LEqual (Arg0, 0x03), LEqual (Arg0, 0x04)))
                {
                    Store (Zero, WLEN)
                    Store (Zero, WWEN)
                    Store (MACS, ACIS)
                    Store (MLID, LDST)
                    Store (^^^^AMWA.ARFA, ARFS)
                    Store (IOAC, IOES)
                }
            }

            Method (ECWK, 1, NotSerialized)
            {
                Store (Arg0, SYSO)
                Store (Zero, MUTE)
                TINI ()
                Notify (BAT0, 0x81)
                If (LEqual (Arg0, 0x03))
                {
                    Store (WLE3, WLEX)
                    Store (BTE3, BTEX)
                    Store (WWE3, WWEX)
                    Store (WME3, WMEX)
                    Store (WLES, WLEN)
                    Store (BTES, BTEN)
                    Store (WWES, WWEN)
                }

                If (LEqual (Arg0, 0x04)){}
                If (LOr (LEqual (Arg0, 0x03), LEqual (Arg0, 0x04)))
                {
                    Store (BCEN, BNEN)
                    Store (BCVE, BNVE)
                    Store (GOST (), OSTP)
                    Store (ARFS, ^^^^AMWA.ARFA)
                    Store (IOES, IOAC)
                    If (TSLD)
                    {
                        Store (MLID, Local2)
                        If (LNotEqual (Local2, LDST))
                        {
                            If (Local2)
                            {
                                ^^^IGPU.GLID (One)
                            }
                            Else
                            {
                                ^^^IGPU.GLID (Zero)
                            }
                        }
                    }
                }
            }

            Method (GOST, 0, NotSerialized)
            {
                Store (Zero, Local0)
                If (LOr (LGreater (OSYS, 0x07D0), LLess (OSYS, 0x07D6)))
                {
                    Store (One, Local0)
                }

                If (LEqual (OSYS, 0x07D6))
                {
                    Store (0x02, Local0)
                }
                ElseIf (LEqual (OSYS, 0x07D9))
                {
                    Store (0x03, Local0)
                }
                ElseIf (LGreaterEqual (OSYS, 0x07DC))
                {
                    Store (0x04, Local0)
                }
                ElseIf (LEqual (OSYS, 0x03E8))
                {
                    Store (0x40, Local0)
                }

                If (LGreaterEqual (OSYS, 0x07DC))
                {
                    If (WLEX)
                    {
                        Store (One, WLEN)
                    }

                    If (BTEX)
                    {
                        Store (One, BTEN)
                    }

                    If (WWEX)
                    {
                        Store (One, WWEN)
                    }

                    If (WMEX)
                    {
                        Store (One, WLEN)
                    }
                }

                Return (Local0)
            }

            Scope (\_GPE)
            {
                Method (_L1B, 0, NotSerialized)  // _Lxx: Level-Triggered GPE
                {
                    Store (0x1B, P80H)
                    Notify (\_SB.SLPB, 0x02)
                }
            }
        }
    }

    Scope (_SB.PCI0.LPCB.EC0)
    {
        Field (ECMB, ByteAcc, Lock, Preserve)
        {
            Offset (0x02), 
                ,   5, 
            MACS,   1
        }

        Name (ACST, One)
        Device (ADP1)
        {
            Name (_HID, "ACPI0003")  // _HID: Hardware ID
            Method (_PSR, 0, NotSerialized)  // _PSR: Power Source
            {
                Store (MACS, Local0)
                If (Local0)
                {
                    Store (One, ACST)
                }
                Else
                {
                    Store (Zero, ACST)
                }

                Return (ACST)
            }

            Method (_PCL, 0, NotSerialized)  // _PCL: Power Consumer List
            {
                Return (_SB)
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (0x0F)
            }
        }
    }

    Scope (_SB.PCI0.LPCB.EC0)
    {
        Field (ECMB, ByteAcc, Lock, Preserve)
        {
            Offset (0x08), 
            NB0S,   8, 
            NB1S,   8
        }

        Mutex (BATM, 0x00)
        Method (GBIF, 3, NotSerialized)
        {
            Acquire (BATM, 0xFFFF)
            If (Arg2)
            {
                Store (0xFFFFFFFF, Index (Arg1, One))
                Store (0xFFFFFFFF, Index (Arg1, 0x02))
                Store (0xFFFFFFFF, Index (Arg1, 0x04))
                Store (Zero, Index (Arg1, 0x05))
                Store (Zero, Index (Arg1, 0x06))
            }
            Else
            {
                OperationRegion (ECMR, SystemMemory, Arg0, 0x80)
                Field (ECMR, ByteAcc, Lock, Preserve)
                {
                    BSRC,   16, 
                    BSFC,   16, 
                    BSPE,   16, 
                    BSAC,   16, 
                    BSVO,   16, 
                        ,   15, 
                    BSCM,   1, 
                    BSCU,   16, 
                    BSTV,   16, 
                    BSDC,   16, 
                    BSDV,   16, 
                    BSSN,   16, 
                    Offset (0x40), 
                    BSMN,   128, 
                    BSDN,   256, 
                    BSCH,   128
                }

                Store (BSCM, Local0)
                XOr (Local0, One, Index (Arg1, Zero))
                If (Local0)
                {
                    Multiply (BSDC, 0x0A, Local1)
                }
                Else
                {
                    Store (BSDC, Local1)
                }

                Store (Local1, Index (Arg1, One))
                If (Local0)
                {
                    Multiply (BSFC, 0x0A, Local2)
                }
                Else
                {
                    Store (BSFC, Local2)
                }

                Store (Local2, Index (Arg1, 0x02))
                Store (BSDV, Index (Arg1, 0x04))
                Divide (Local2, 0x64, Local7, Local6)
                Multiply (Local6, 0x07, Local3)
                Store (Local3, Index (Arg1, 0x05))
                Store (0x0A, Local4)
                Add (Local4, One, Local4)
                Multiply (Local4, Local6, Local4)
                Divide (Local4, 0x02, Local7, Local4)
                Store (Local4, Index (Arg1, 0x06))
                Store (BSSN, Local7)
                Name (SERN, Buffer (0x06)
                {
                    "     "
                })
                Store (0x04, Local6)
                While (Local7)
                {
                    Divide (Local7, 0x0A, Local5, Local7)
                    Add (Local5, 0x30, Index (SERN, Local6))
                    Decrement (Local6)
                }

                Store (SERN, Index (Arg1, 0x0A))
                Store (BSDN, Index (Arg1, 0x09))
                Store (BSCH, Index (Arg1, 0x0B))
                Store (BSMN, Index (Arg1, 0x0C))
            }

            Release (BATM)
            Return (Arg1)
        }

        Method (GBST, 4, NotSerialized)
        {
            Acquire (BATM, 0xFFFF)
            OperationRegion (ECMR, SystemMemory, Arg0, 0x10)
            Field (ECMR, ByteAcc, Lock, Preserve)
            {
                BSRC,   16, 
                BSFC,   16, 
                BSPE,   16, 
                BSAC,   16, 
                BSVO,   16, 
                    ,   15, 
                BSCM,   1, 
                BSCU,   16, 
                BSTV,   16
            }

            If (And (Arg1, 0x02))
            {
                Store (0x02, Local0)
                If (And (Arg1, 0x20))
                {
                    Store (Zero, Local0)
                }
            }
            ElseIf (And (Arg1, 0x04))
            {
                Store (One, Local0)
            }
            Else
            {
                Store (Zero, Local0)
            }

            If (And (Arg1, 0x10))
            {
                Or (Local0, 0x04, Local0)
            }

            If (And (Arg1, One))
            {
                Store (BSAC, Local1)
                Store (BSRC, Local2)
                If (ACST)
                {
                    If (And (Arg1, 0x20))
                    {
                        Store (BSFC, Local2)
                    }
                }

                If (Arg2)
                {
                    Multiply (Local2, 0x0A, Local2)
                }

                Store (BSVO, Local3)
                If (LGreaterEqual (Local1, 0x8000))
                {
                    If (And (Local0, One))
                    {
                        Subtract (0x00010000, Local1, Local1)
                    }
                    Else
                    {
                        Store (Zero, Local1)
                    }
                }
                ElseIf (LEqual (And (Local0, 0x02), Zero))
                {
                    Store (Zero, Local1)
                }

                If (Arg2)
                {
                    Multiply (Local1, Local3, Local1)
                    Divide (Local1, 0x03E8, Local7, Local1)
                }
            }
            Else
            {
                Store (Zero, Local0)
                Store (0xFFFFFFFF, Local1)
                Store (0xFFFFFFFF, Local2)
                Store (0xFFFFFFFF, Local3)
            }

            Store (Local0, Index (Arg3, Zero))
            Store (Local1, Index (Arg3, One))
            Store (Local2, Index (Arg3, 0x02))
            Store (Local3, Index (Arg3, 0x03))
            Release (BATM)
            Return (Arg3)
        }

        Name (B0ST, Zero)
        Device (BAT0)
        {
            Name (_HID, EisaId ("PNP0C0A"))  // _HID: Hardware ID
            Name (_UID, One)  // _UID: Unique ID
            Method (_PCL, 0, NotSerialized)  // _PCL: Power Consumer List
            {
                Return (_SB)
            }

            Name (B0IP, Package (0x0D)
            {
                One, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                One, 
                0xFFFFFFFF, 
                Zero, 
                Zero, 
                One, 
                One, 
                "", 
                "100", 
                "Lion", 
                Zero
            })
            Name (B0SP, Package (0x04)
            {
                Zero, 
                0xFFFFFFFF, 
                0xFFFFFFFF, 
                0xFFFFFFFF
            })
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Store (NB0S, Local0)
                And (Local0, One, Local1)
                If (And (Local1, 0x40))
                {
                    Store (Zero, Local1)
                }

                Store (Local1, B0ST)
                If (Local1)
                {
                    Return (0x1F)
                }
                Else
                {
                    Return (0x0F)
                }
            }

            Method (_BIF, 0, NotSerialized)  // _BIF: Battery Information
            {
                Store (B0ST, Local6)
                Store (0x14, Local7)
                While (LAnd (Local6, Local7))
                {
                    Store (NB0S, Local1)
                    If (And (Local1, 0x08))
                    {
                        Store (Zero, Local6)
                    }
                    Else
                    {
                        Sleep (0x01F4)
                        Decrement (Local7)
                    }
                }

                Return (GBIF (0xFE802080, B0IP, Local6))
            }

            Method (_BST, 0, NotSerialized)  // _BST: Battery Status
            {
                XOr (DerefOf (Index (B0IP, Zero)), One, Local0)
                Store (NB0S, Local1)
                Return (GBST (0xFE802080, Local1, Local0, B0SP))
            }
        }
    }

    Scope (_SB.PCI0.LPCB.EC0)
    {
        Field (ECMB, ByteAcc, Lock, Preserve)
        {
            Offset (0x06), 
            TPTP,   8
        }
    }

    Scope (_SB.PCI0.LPCB)
    {
        Device (KBD0)
        {
            Name (_HID, "10250759")  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0303"))  // _CID: Compatible ID
            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IO (Decode16,
                    0x0060,             // Range Minimum
                    0x0060,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IO (Decode16,
                    0x0064,             // Range Minimum
                    0x0064,             // Range Maximum
                    0x01,               // Alignment
                    0x01,               // Length
                    )
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {1}
            })
        }

        Device (PS2M)
        {
            Method (_HID, 0, NotSerialized)  // _HID: Hardware ID
            {
                Store (^^EC0.TPTP, Local0)
                If (LEqual (Local0, One))
                {
                    Return (0x731B2E4F)
                }

                If (LEqual (Local0, 0x02))
                {
                    Return (0x09058416)
                }

                If (LEqual (Local0, 0x04))
                {
                    Return (0x3120A906)
                }

                If (LEqual (Local0, 0x08))
                {
                    Return (0x43C08C4E)
                }

                If (LEqual (Local0, 0x10))
                {
                    Return (0x0100330F)
                }

                Return (0x09058416)
            }

            Method (_CID, 0, NotSerialized)  // _CID: Compatible ID
            {
                Store (^^EC0.TPTP, Local0)
                If (LEqual (Local0, One))
                {
                    Return (Package (0x03)
                    {
                        0x001B2E4F, 
                        0x02002E4F, 
                        0x130FD041
                    })
                }

                If (LEqual (Local0, 0x02))
                {
                    Return (Package (0x02)
                    {
                        0x8416, 
                        0x130FD041
                    })
                }

                If (LEqual (Local0, 0x04))
                {
                    Return (Package (0x01)
                    {
                        0x130FD041
                    })
                }

                If (LEqual (Local0, 0x08))
                {
                    Return (Package (0x01)
                    {
                        0x130FD041
                    })
                }

                If (LEqual (Local0, 0x10))
                {
                    Return (Package (0x01)
                    {
                        0x130FD041
                    })
                }

                Return (Package (0x02)
                {
                    0x8416, 
                    0x130FD041
                })
            }

            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                IRQ (Edge, ActiveHigh, Exclusive, )
                    {12}
            })
        }
    }

    Scope (\)
    {
        Mutex (MSGF, 0x00)
    }

    Scope (_SB.PCI0.LPCB.EC0)
    {
        Method (_Q5C, 0, NotSerialized)  // _Qxx: EC Query
        {
            Store (0x5C, P80H)
        }

        Method (_Q1C, 0, NotSerialized)  // _Qxx: EC Query
        {
            Store (0x1C, P80H)
            Acquire (MSGF, 0xFFFF)
            If (BCEN)
            {
                If (LLessEqual (BRLI, 0x09))
                {
                    Increment (BRLI)
                }

                SDBN (BNTL (), One)
            }
            ElseIf (LNotEqual (^^^IGPU.IGID, 0xFFFF))
            {
                BIAN (0x86)
            }

            Release (MSGF)
        }

        Method (_Q1D, 0, NotSerialized)  // _Qxx: EC Query
        {
            Store (0x1D, P80H)
            Acquire (MSGF, 0xFFFF)
            If (BCEN)
            {
                If (LGreaterEqual (BRLI, One))
                {
                    Decrement (BRLI)
                }

                SDBN (BNTL (), One)
            }
            ElseIf (LNotEqual (^^^IGPU.IGID, 0xFFFF))
            {
                BIAN (0x87)
            }

            Release (MSGF)
        }

        Method (_Q28, 0, NotSerialized)  // _Qxx: EC Query
        {
            Store (0x28, P80H)
        }

        Method (_Q29, 0, NotSerialized)  // _Qxx: EC Query
        {
            Store (0x29, P80H)
            Store (Zero, \_PR.CPU0._PPC)
            PNOT ()
            If (ECON)
            {
                Store (Zero, KCP1)
                Store (Zero, KCP2)
            }
            Else
            {
                MBEC (0x92, 0xDF, Zero)
                MBEC (0x92, 0x7F, Zero)
            }
        }

        Method (_Q2A, 0, NotSerialized)  // _Qxx: EC Query
        {
            Store (0x2A, P80H)
            Divide (SizeOf (\_PR.CPU0._PSS), 0x03, , \_PR.CPU0._PPC)
            PNOT ()
            If (ECON)
            {
                Store (One, KCP1)
                Store (Zero, KCP2)
            }
            Else
            {
                MBEC (0x92, 0xDF, 0x20)
                MBEC (0x92, 0xDF, Zero)
            }
        }

        Method (_Q2B, 0, NotSerialized)  // _Qxx: EC Query
        {
            Store (0x2B, P80H)
            Divide (Multiply (SizeOf (\_PR.CPU0._PSS), 0x02), 0x03, , \_PR.CPU0._PPC)
            PNOT ()
            If (ECON)
            {
                Store (One, KCP1)
                Store (One, KCP2)
            }
            Else
            {
                MBEC (0x92, 0xDF, 0x20)
                MBEC (0x92, 0x7F, 0x20)
            }
        }

        Method (_Q2D, 0, NotSerialized)  // _Qxx: EC Query
        {
            Store (0x2D, P80H)
        }

        Method (_Q32, 0, NotSerialized)  // _Qxx: EC Query
        {
            Store (0x32, P80H)
            HKEY (0x32)
            If (ECON)
            {
                Store (Zero, KCTT)
            }
            Else
            {
                MBEC (0x92, 0xFD, Zero)
            }
        }

        Method (_Q33, 0, NotSerialized)  // _Qxx: EC Query
        {
            Store (0x33, P80H)
            If (ECON)
            {
                Store (Zero, KCSS)
            }
            Else
            {
                MBEC (0x92, 0xFE, Zero)
            }

            NTMR ()
        }

        Method (_Q34, 0, NotSerialized)  // _Qxx: EC Query
        {
            Store (0x34, P80H)
            If (ECON)
            {
                Store (One, KCSS)
            }
            Else
            {
                MBEC (0x92, 0xFE, One)
            }

            NTMR ()
        }

        Method (_Q35, 0, NotSerialized)  // _Qxx: EC Query
        {
            Store (0x35, P80H)
            HKEY (0x35)
            If (ECON)
            {
                Store (One, KCTT)
            }
            Else
            {
                MBEC (0x92, 0xFD, 0x02)
            }
        }

        Method (_Q36, 0, NotSerialized)  // _Qxx: EC Query
        {
            Store (0x36, P80H)
            If (ECON)
            {
                Store (One, KOSD)
            }
            Else
            {
                MBEC (0x92, 0xF7, 0x08)
            }

            Sleep (0x01F4)
            NTMR ()
        }

        Method (_Q3B, 0, NotSerialized)  // _Qxx: EC Query
        {
            Store (0x3B, P80H)
            TRPS (0xCA, Zero)
        }

        Method (_Q3C, 0, NotSerialized)  // _Qxx: EC Query
        {
            Store (0x3C, P80H)
            TRPS (0xCA, One)
        }

        Method (_Q3D, 0, NotSerialized)  // _Qxx: EC Query
        {
            Store (0x3D, P80H)
            If (LGreaterEqual (OSYS, 0x07DC))
            {
                Store (0x05, Local0)
            }
            Else
            {
                Store (0x03, Local0)
            }

            If (LLess (Local0, SizeOf (\_PR.CPU0._PSS)))
            {
                Store (Local0, \_PR.CPU0._PPC)
                PNOT ()
            }
        }

        Method (_Q3E, 0, NotSerialized)  // _Qxx: EC Query
        {
            Store (0x3E, P80H)
            ^^^PEG1.PEGP.USPL (One)
        }

        Method (_Q40, 0, NotSerialized)  // _Qxx: EC Query
        {
            Store (0x40, P80H)
            Notify (BAT0, 0x81)
        }

        Method (_Q41, 0, NotSerialized)  // _Qxx: EC Query
        {
            Store (0x41, P80H)
            Notify (BAT0, 0x81)
        }

        Method (_Q48, 0, NotSerialized)  // _Qxx: EC Query
        {
            Store (0x48, P80H)
            Notify (BAT0, 0x80)
        }

        Method (_Q4C, 0, NotSerialized)  // _Qxx: EC Query
        {
            Store (0x4C, P80H)
            If (B0ST)
            {
                Notify (BAT0, 0x80)
            }
        }

        Method (_Q4D, 0, NotSerialized)  // _Qxx: EC Query
        {
            Store (0x4D, P80H)
        }

        Method (_Q50, 0, NotSerialized)  // _Qxx: EC Query
        {
            Store (0x50, P80H)
            Notify (ADP1, 0x80)
        }

        Method (_Q51, 0, NotSerialized)  // _Qxx: EC Query
        {
            Store (0x51, P80H)
            Notify (ADP1, 0x80)
        }

        Method (_Q52, 0, NotSerialized)  // _Qxx: EC Query
        {
            Store (0x52, P80H)
            Notify (LID0, 0x80)
            If (TSLD)
            {
                ^^^IGPU.GLID (One)
            }
        }

        Method (_Q53, 0, NotSerialized)  // _Qxx: EC Query
        {
            Store (0x53, P80H)
            Notify (LID0, 0x80)
            If (TSLD)
            {
                ^^^IGPU.GLID (Zero)
            }
        }

        Method (NTMR, 0, NotSerialized)
        {
            Notify (\_TZ.TZS0, 0x80)
            Notify (\_TZ.TZS1, 0x80)
        }

        Method (SBNL, 2, NotSerialized)
        {
            If (BCEN)
            {
                SDBN (Arg0, One)
            }
        }

        Method (BNTL, 0, NotSerialized)
        {
            If (LEqual (BRLI, Zero))
            {
                Store (BND0, Local0)
            }
            ElseIf (LEqual (BRLI, One))
            {
                Store (BND1, Local0)
            }
            ElseIf (LEqual (BRLI, 0x02))
            {
                Store (BND2, Local0)
            }
            ElseIf (LEqual (BRLI, 0x03))
            {
                Store (BND3, Local0)
            }
            ElseIf (LEqual (BRLI, 0x04))
            {
                Store (BND4, Local0)
            }
            ElseIf (LEqual (BRLI, 0x05))
            {
                Store (BND5, Local0)
            }
            ElseIf (LEqual (BRLI, 0x06))
            {
                Store (BND6, Local0)
            }
            ElseIf (LEqual (BRLI, 0x07))
            {
                Store (BND7, Local0)
            }
            ElseIf (LEqual (BRLI, 0x08))
            {
                Store (BND8, Local0)
            }
            ElseIf (LEqual (BRLI, 0x09))
            {
                Store (BND9, Local0)
            }
            ElseIf (LEqual (BRLI, 0x0A))
            {
                Store (BNDA, Local0)
            }

            Store (Local0, BNCV)
            Return (Local0)
        }

        Method (SDBN, 2, NotSerialized)
        {
            If (BCVE)
            {
                If (LNotEqual (^^^IGPU.IGID, 0xFFFF))
                {
                    If (LEqual (Arg1, One))
                    {
                        ^^^IGPU.SBLX (Arg0)
                    }
                }
            }
        }
    }

    Scope (_SB.PCI0.LPCB.EC0)
    {
        Method (HKDS, 1, NotSerialized)
        {
            If (LEqual (Zero, DSEN))
            {
                Store (One, Local2)
                If (LEqual (PMDP, 0x02)){}
                If (Local2){}
                If (LNotEqual (CADL, PADL))
                {
                    Store (CADL, PADL)
                    If (LOr (LGreater (OSYS, 0x07D0), LLess (OSYS, 0x07D6)))
                    {
                        Notify (PCI0, Zero)
                    }
                    Else
                    {
                        If (LNotEqual (^^^IGPU.IGID, 0xFFFF))
                        {
                            Notify (IGPU, Zero)
                        }

                        If (LEqual (PMDP, 0x02))
                        {
                            If (LNotEqual (^^^PEG1.PEGP.DGID, 0xFFFF))
                            {
                                Notify (^^^PEG1.PEGP, Zero)
                            }
                        }
                    }

                    Sleep (0x02EE)
                }

                If (LEqual (Arg0, 0x10))
                {
                    If (LNotEqual (^^^IGPU.IGID, 0xFFFF))
                    {
                        ^^^IGPU.GHDS (Zero)
                        Return (Zero)
                    }

                    Store (One, Local2)
                    If (LEqual (PMDP, 0x02)){}
                    If (Local2){}
                    Store (GNDI (), Local0)
                }
                Else
                {
                    Store (Arg0, Local0)
                }

                SNDI (Local0)
                If (LNotEqual (^^^IGPU.IGID, 0xFFFF))
                {
                    ^^^IGPU.SNDL (NDST)
                    ^^^IGPU.GHDS (Zero)
                }

                If (LEqual (PMDP, 0x02))
                {
                    If (LNotEqual (^^^PEG1.PEGP.DGID, 0xFFFF))
                    {
                        Notify (^^^PEG1.PEGP, 0x80)
                    }
                }
            }

            If (LEqual (One, DSEN)){}
        }

        Method (GNDI, 0, NotSerialized)
        {
            Store (One, Local1)
            Store (CADL, Local2)
            If (LEqual (CDST, 0x0808))
            {
                If (And (0x0101, Local2))
                {
                    Store (0x02, Local1)
                }
                ElseIf (And (0x0404, Local2))
                {
                    Store (0x03, Local1)
                }
            }

            If (LEqual (CDST, 0x0101))
            {
                If (And (0x0404, Local2))
                {
                    Store (0x05, Local1)
                }
                Else
                {
                    Store (One, Local1)
                }
            }

            If (LEqual (CDST, 0x0404))
            {
                Store (One, Local1)
            }

            If (LEqual (CDST, 0x0909))
            {
                If (And (0x0404, Local2))
                {
                    Store (0x03, Local1)
                }
                Else
                {
                    Store (0x04, Local1)
                }
            }

            If (LEqual (CDST, 0x0C0C))
            {
                If (And (0x0101, Local2))
                {
                    Store (0x04, Local1)
                }
                Else
                {
                    Store (0x05, Local1)
                }
            }

            Return (Local1)
        }

        Method (SNDI, 1, NotSerialized)
        {
            If (LEqual (Arg0, 0x04))
            {
                Store (0x0101, NDST)
            }

            If (LEqual (Arg0, One))
            {
                Store (0x0808, NDST)
            }

            If (LEqual (Arg0, 0x02))
            {
                Store (0x0909, NDST)
            }

            If (LEqual (Arg0, 0x05))
            {
                Store (0x0404, NDST)
            }

            If (LEqual (Arg0, 0x06))
            {
                Store (0x0202, NDST)
            }

            If (LEqual (Arg0, 0x03))
            {
                Store (0x0C0C, NDST)
            }

            If (LEqual (Arg0, 0x07))
            {
                Store (0x0A0A, NDST)
            }

            If (LEqual (Arg0, 0x08))
            {
                Store (0x0505, NDST)
            }
        }

        Method (_Q19, 0, NotSerialized)  // _Qxx: EC Query
        {
            Store (0x19, P80H)
            Store (One, Local2)
            If (LEqual (PMDP, 0x02)){}
            If (Local2)
            {
                HKDS (0x10)
            }
        }
    }

    Scope (_SB.PCI0.LPCB.EC0)
    {
        Field (ECMB, ByteAcc, Lock, Preserve)
        {
            Offset (0x20), 
            THS0,   8, 
            THS1,   8, 
            THS2,   8, 
            THS3,   8, 
            THS4,   8, 
            THS5,   8, 
            THS6,   8, 
            THS7,   8, 
            THS8,   8, 
            THS9,   8, 
            THSA,   8, 
            THSB,   8, 
            Offset (0x53), 
            MCSS,   1, 
            MCTT,   1, 
            MDTT,   1, 
            MOSD,   1, 
            MVTP,   1, 
            Offset (0x54), 
            TSP0,   8, 
            TSC0,   8, 
            TCC0,   8, 
            TSC1,   8
        }
    }

    Scope (_TZ)
    {
        Name (TBSE, 0x0AAC)
        Name (CRT0, Zero)
        Name (PSV0, Zero)
        ThermalZone (TZS0)
        {
            Method (_TMP, 0, NotSerialized)  // _TMP: Temperature
            {
                Store (\_SB.PCI0.LPCB.EC0.THS0, Local0)
                Store (\_SB.PCI0.LPCB.EC0.MCSS, Local1)
                Store (\_SB.PCI0.LPCB.EC0.MOSD, Local2)
                If (Local1)
                {
                    Add (PSV0, One, Local0)
                }

                If (Local2)
                {
                    If (LLessEqual (Local0, CRT0))
                    {
                        Add (CRT0, 0x02, Local0)
                    }
                }

                Return (C2K (Local0))
            }

            Method (_CRT, 0, NotSerialized)  // _CRT: Critical Temperature
            {
                Store (\_SB.PCI0.LPCB.EC0.TSC0, Local0)
                If (LOr (LGreaterEqual (Local0, 0x80), LLess (Local0, 0x1E)))
                {
                    Store (0x78, Local0)
                }

                Store (Local0, CRT0)
                Return (C2K (Local0))
            }

            Method (_SCP, 1, Serialized)  // _SCP: Set Cooling Policy
            {
                If (ECON)
                {
                    Store (Arg0, \_SB.PCI0.LPCB.EC0.SCPM)
                }
                Else
                {
                    MBEC (0x90, 0xFE, Arg0)
                }
            }

            Method (_PSL, 0, Serialized)  // _PSL: Passive List
            {
                If (LEqual (TCNT, 0x08))
                {
                    Return (Package (0x08)
                    {
                        \_PR.CPU0, 
                        \_PR.CPU1, 
                        \_PR.CPU2, 
                        \_PR.CPU3, 
                        \_PR.CPU4, 
                        \_PR.CPU5, 
                        \_PR.CPU6, 
                        \_PR.CPU7
                    })
                }

                If (LEqual (TCNT, 0x04))
                {
                    Return (Package (0x04)
                    {
                        \_PR.CPU0, 
                        \_PR.CPU1, 
                        \_PR.CPU2, 
                        \_PR.CPU3
                    })
                }

                If (LEqual (TCNT, 0x02))
                {
                    Return (Package (0x02)
                    {
                        \_PR.CPU0, 
                        \_PR.CPU1
                    })
                }

                Return (Package (0x01)
                {
                    \_PR.CPU0
                })
            }

            Method (_PSV, 0, NotSerialized)  // _PSV: Passive Temperature
            {
                Store (\_SB.PCI0.LPCB.EC0.TSP0, Local0)
                If (LOr (LGreaterEqual (Local0, 0x80), LLess (Local0, 0x1E)))
                {
                    Store (0x5A, Local0)
                }

                Store (Local0, PSV0)
                Return (C2K (Local0))
            }

            Name (_TC1, Zero)  // _TC1: Thermal Constant 1
            Name (_TC2, 0x32)  // _TC2: Thermal Constant 2
            Name (_TSP, Zero)  // _TSP: Thermal Sampling Period
        }

        ThermalZone (TZS1)
        {
            Method (_TMP, 0, NotSerialized)  // _TMP: Temperature
            {
                Store (\_SB.PCI0.LPCB.EC0.THS1, Local0)
                Return (C2K (Local0))
            }

            Method (_CRT, 0, NotSerialized)  // _CRT: Critical Temperature
            {
                Store (\_SB.PCI0.LPCB.EC0.TSC1, Local0)
                If (LOr (LGreaterEqual (Local0, 0x80), LLess (Local0, 0x1E)))
                {
                    Store (0x78, Local0)
                }

                Return (C2K (Local0))
            }
        }

        Method (C2K, 1, NotSerialized)
        {
            Store (Arg0, Local0)
            If (LLessEqual (Local0, 0x10))
            {
                Store (0x1E, Local0)
            }

            If (LGreaterEqual (Local0, 0x7F))
            {
                Store (0x1E, Local0)
            }

            Add (Multiply (Local0, 0x0A), TBSE, Local0)
            Return (Local0)
        }
    }

    Scope (_SB.PCI0.LPCB.EC0)
    {
        Field (ECMB, ByteAcc, Lock, Preserve)
        {
            Offset (0x02), 
                ,   1, 
            MLID,   1
        }
    }

    Scope (_SB)
    {
        Device (LID0)
        {
            Name (_HID, EisaId ("PNP0C0D"))  // _HID: Hardware ID
            Method (_LID, 0, NotSerialized)  // _LID: Lid Status
            {
                Store (^^PCI0.LPCB.EC0.MLID, Local0)
                If (Local0)
                {
                    Return (One)
                }
                Else
                {
                    Return (Zero)
                }
            }

            Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
            {
                If (ECON)
                {
                    Store (Arg0, ^^PCI0.LPCB.EC0.LIDW)
                }
                ElseIf (Arg0)
                {
                    MBEC (0x72, 0xEF, 0x10)
                }
                Else
                {
                    MBEC (0x72, 0xEF, Zero)
                }
            }

            Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
            {
                0x1B, 
                0x03
            })
        }
    }

    Scope (_SB)
    {
    }

    Scope (\)
    {
        Name (B2ED, Buffer (0x1C)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0018 */  0x00, 0x00, 0x00, 0x00                         
        })
        Method (WH15, 2, NotSerialized)
        {
            Acquire (MSMI, 0xFFFF)
            CreateDWordField (Arg1, Zero, DEAX)
            CreateDWordField (Arg1, 0x04, DEBX)
            CreateDWordField (Arg1, 0x08, DECX)
            CreateDWordField (Arg1, 0x0C, DEDX)
            CreateDWordField (B2ED, Zero, OEAX)
            CreateDWordField (B2ED, 0x04, OEBX)
            CreateDWordField (B2ED, 0x08, OECX)
            CreateDWordField (B2ED, 0x0C, OEDX)
            CreateDWordField (B2ED, 0x10, OFLG)
            Store (DECX, OECX)
            Store (DEDX, OEDX)
            If (LEqual (\_SB.AMW0.WMID, One))
            {
                CreateDWordField (Arg1, 0x10, DESI)
                CreateDWordField (Arg1, 0x14, DEDI)
                CreateDWordField (B2ED, 0x14, OESI)
                CreateDWordField (B2ED, 0x18, OEDI)
                Store (DESI, OESI)
                Store (DEDI, OEDI)
            }

            If (LEqual (And (DEAX, 0xFFFF), 0x9630))
            {
                If (LEqual (And (DEBX, 0xFF), 0x06))
                {
                    WB15 (B2ED, DEBX, DECX, DEDX, DESI, DEDI)
                    Release (MSMI)
                    Return (B2ED)
                }
            }

            Store (DEAX, WNVA)
            Store (DEBX, WNVB)
            Store (DECX, WNVC)
            Store (DEDX, WNVD)
            If (LEqual (\_SB.AMW0.WMID, One))
            {
                Store (DESI, WNVS)
                Store (DEDI, WNVI)
            }

            WSMI (One)
            Store (WNVA, OEAX)
            Store (WNVB, OEBX)
            Store (WNVC, OECX)
            Store (WNVD, OEDX)
            Store (WFLG, OFLG)
            If (LEqual (\_SB.AMW0.WMID, One))
            {
                Store (WNVS, OESI)
                Store (WNVI, OEDI)
            }

            Release (MSMI)
            Return (B2ED)
        }

        Method (I15H, 5, NotSerialized)
        {
            Acquire (MSMI, 0xFFFF)
            Store (Arg0, Local1)
            Store (Arg1, WNVA)
            Store (Arg2, WNVB)
            Store (Arg3, WNVC)
            Store (Arg4, WNVD)
            WSMI (One)
            If (LEqual (Local1, One))
            {
                Store (WNVA, Local0)
            }

            If (LEqual (Local1, 0x02))
            {
                Store (WNVB, Local0)
            }

            If (LEqual (Local1, 0x03))
            {
                Store (WNVC, Local0)
            }

            If (LEqual (Local1, 0x04))
            {
                Store (WNVD, Local0)
            }

            Release (MSMI)
            Return (Local0)
        }
    }

    Scope (_SB)
    {
        Device (AMWA)
        {
            Name (_HID, EisaId ("PNP0C14"))  // _HID: Hardware ID
            Name (_UID, "APGe")  // _UID: Unique ID
            Name (FLMA, Zero)
            Name (FRFA, Zero)
            Name (BGET, Buffer (0x08)
            {
                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
            })
            CreateWordField (BGET, Zero, BGER)
            CreateWordField (BGET, 0x02, BGDM)
            CreateByteField (BGET, 0x04, BGD0)
            CreateByteField (BGET, One, BGSB)
            CreateByteField (BGET, 0x02, BGS1)
            CreateDWordField (BGET, One, BGSD)
            Name (BSET, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                         
            })
            CreateWordField (BSET, Zero, BSER)
            CreateByteField (BSET, 0x02, BBTR)
            Name (B6ED, Buffer (0x08)
            {
                 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
            })
            CreateByteField (B6ED, Zero, WFUN)
            CreateByteField (B6ED, One, KEYN)
            CreateWordField (B6ED, 0x02, DEVM)
            Name (_SD0, Zero)
            Name (_SD1, Zero)
            Name (_SDN, Zero)
            OperationRegion (RAM, EmbeddedControl, Zero, 0xFF)
            Field (RAM, ByteAcc, Lock, Preserve)
            {
                Offset (0x15), 
                DEB0,   16, 
                Offset (0x52), 
                    ,   6, 
                ARFA,   1, 
                Offset (0x57), 
                    ,   7, 
                AHKB,   1, 
                AHKE,   8, 
                Offset (0x75), 
                    ,   1, 
                ALMA,   1, 
                Offset (0x8D)
            }

            Name (_WDG, Buffer (0x78)
            {
                /* 0000 */  0x5E, 0xA1, 0x6A, 0x67, 0x47, 0x6A, 0x9F, 0x4D,
                /* 0008 */  0xA2, 0xCC, 0x1E, 0x6D, 0x18, 0xD1, 0x40, 0x26,
                /* 0010 */  0xBC, 0x00, 0x01, 0x08, 0xEA, 0x69, 0xEF, 0x61,
                /* 0018 */  0x5C, 0x86, 0xC3, 0x4B, 0xA5, 0x02, 0xA0, 0xDE,
                /* 0020 */  0xBA, 0x0C, 0xB5, 0x31, 0x41, 0x41, 0x01, 0x02,
                /* 0028 */  0x21, 0x12, 0x90, 0x05, 0x66, 0xD5, 0xD1, 0x11,
                /* 0030 */  0xB2, 0xF0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10,
                /* 0038 */  0x45, 0x45, 0x01, 0x00, 0xC5, 0x2E, 0x77, 0x79,
                /* 0040 */  0xB1, 0x04, 0xFD, 0x4B, 0x84, 0x3C, 0x61, 0xE7,
                /* 0048 */  0xF7, 0x7B, 0x6C, 0xC9, 0x42, 0x45, 0x01, 0x02,
                /* 0050 */  0x66, 0x56, 0x5F, 0xF7, 0xB3, 0xB8, 0x5D, 0x4A,
                /* 0058 */  0xA9, 0x1C, 0x74, 0x88, 0xF6, 0x2E, 0x56, 0x37,
                /* 0060 */  0x42, 0x4B, 0x01, 0x02, 0xDA, 0xBB, 0x1D, 0xFE,
                /* 0068 */  0x14, 0x30, 0x56, 0x48, 0x87, 0x0C, 0x5B, 0x3A,
                /* 0070 */  0x74, 0x4B, 0xF3, 0x41, 0x42, 0x4C, 0x01, 0x02 
            })
            Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event
            {
                Store (Arg0, P80H)
                If (LEqual (Arg0, 0xBC))
                {
                    Store (Zero, B6ED)
                    Store (AHKB, Local0)
                    Store (AHKE, Local1)
                    Store (Local1, WNVA)
                    If (Local0)
                    {
                        Store (0x02, WFUN)
                        Store (Zero, DEVM)
                    }
                    Else
                    {
                        Store (One, WFUN)
                        TRPS (0x90, Zero)
                        Store (WNVD, DEVM)
                    }

                    Store (Local1, KEYN)
                    Return (B6ED)
                }
            }

            Method (WMAA, 3, NotSerialized)
            {
                CreateByteField (Arg2, Zero, AAFN)
                CreateByteField (Arg2, One, AAKN)
                CreateWordField (Arg2, 0x02, AADM)
                If (LEqual (Arg1, One))
                {
                    Store (Zero, BSET)
                    If (LEqual (AAFN, One))
                    {
                        CreateDWordField (Arg2, One, AAD1)
                        CreateByteField (Arg2, 0x05, AAD5)
                        CreateByteField (Arg2, 0x06, AAD6)
                        And (AAD5, One, Local0)
                        And (AAD6, One, Local1)
                        And (AAD5, 0x10, Local2)
                        And (AAD6, 0x10, Local3)
                        If (LEqual (And (AAD5, 0xC0), 0x40))
                        {
                            Store (AAD1, WNVD)
                            TRPS (0x91, Zero)
                            Store (WNVA, BSER)
                        }
                        Else
                        {
                            Store (Zero, BSER)
                        }

                        If (LNotEqual (Local1, Zero))
                        {
                            Store (Local0, FLMA)
                            Store (Local0, ALMA)
                        }

                        If (LNotEqual (Local3, Zero))
                        {
                            If (LEqual (Local2, 0x10))
                            {
                                Store (One, ARFA)
                            }
                            Else
                            {
                                Store (Zero, ARFA)
                            }
                        }

                        Store (OSBT, BBTR)
                        Return (BSET)
                    }

                    If (LEqual (AAFN, 0x02))
                    {
                        CreateByteField (Arg2, 0x04, AAD4)
                        Store (AAKN, WNVA)
                        Store (AADM, WNVD)
                        Store (AAD4, WNVC)
                        Store (Zero, WNVB)
                        TRPS (0x92, Zero)
                        Store (WNVA, BSER)
                        If (LEqual (WNVB, One))
                        {
                            If (LNotEqual (^^PCI0.IGPU.IGID, 0xFFFF))
                            {
                                If (LAnd (LGreaterEqual (WNVC, Zero), LLessEqual (WNVC, 0x64)))
                                {
                                    ^^PCI0.IGPU.AINT (One, WNVC)
                                }
                            }
                        }

                        Return (BSET)
                    }

                    If (LEqual (AAFN, 0x03))
                    {
                        CreateByteField (Arg2, One, AASO)
                        CreateByteField (Arg2, 0x03, AASB)
                        CreateDWordField (Arg2, 0x02, AASD)
                        If (LEqual (AASO, One))
                        {
                            Store (0x9610, WNVA)
                            Store (0x0116, WNVB)
                            Store (AASB, WNVC)
                            TRPS (One, Zero)
                        }

                        If (LEqual (AASO, 0x02)){}
                        If (LAnd (LGreater (AASO, 0x02), LLess (AASO, 0x0A)))
                        {
                            Store (AASD, WNVA)
                            Store (One, SPR1)
                            TRPS (0xC8, AASO)
                            If (WNVB)
                            {
                                Store (WNVB, BSER)
                            }
                        }

                        Return (BSET)
                    }

                    If (LEqual (AAFN, 0x04)){}
                    If (LEqual (AAFN, 0x05)){}
                    If (LEqual (AAFN, 0x06))
                    {
                        CreateByteField (Arg2, One, AAS0)
                        CreateByteField (Arg2, 0x02, AAS1)
                        Store (AAS0, _SD0)
                        Store (AAS1, _SD1)
                        Store (0xAA, _SDN)
                        Return (BSET)
                    }

                    Store (0xE1, BSER)
                    Return (BSET)
                }

                If (LEqual (Arg1, 0x02))
                {
                    Store (Zero, BGET)
                    If (LEqual (AAFN, One))
                    {
                        Store (AAKN, WNVA)
                        Store (AADM, WNVD)
                        Store (Zero, WNVB)
                        TRPS (0x93, Zero)
                        Store (WNVD, BGDM)
                        Store (WNVA, BGER)
                        If (LEqual (WNVB, One))
                        {
                            Store (0x64, WNVC)
                            If (LNotEqual (^^PCI0.IGPU.IGID, 0xFFFF))
                            {
                                Store (^^PCI0.IGPU.CBLV, WNVC)
                            }
                        }

                        Store (WNVC, BGD0)
                        Return (BGET)
                    }

                    If (LEqual (AAFN, 0x02))
                    {
                        CreateByteField (Arg2, One, AAGO)
                        If (LEqual (AAGO, One))
                        {
                            Store (0x9610, WNVA)
                            Store (0x16, WNVB)
                            TRPS (One, Zero)
                            Store (WNVC, BGSB)
                        }

                        If (LEqual (AAGO, 0x02))
                        {
                            Store (Zero, BGSB)
                            If (LGreater (OSYS, 0x07D0))
                            {
                                Store (One, BGSB)
                            }
                        }

                        If (LAnd (LGreater (AAGO, 0x02), LLess (AAGO, 0x0A)))
                        {
                            Store (Zero, SPR1)
                            TRPS (0xC8, AAGO)
                            Store (WNVA, BGSD)
                            If (WNVB)
                            {
                                Store (WNVB, BGER)
                            }
                        }

                        Return (BGET)
                    }

                    If (LEqual (AAFN, 0x03))
                    {
                        CreateWordField (BGET, One, BGDD)
                        Store (Zero, BGER)
                        Store (DDST, BGDD)
                        Return (BGET)
                    }

                    If (LEqual (AAFN, 0x05)){}
                    If (LEqual (AAFN, 0x06))
                    {
                        If (LEqual (_SDN, 0xAA))
                        {
                            Store (_SD0, BGSB)
                            Store (_SD1, BGS1)
                        }
                        Else
                        {
                            Store (0xEF, BGER)
                        }

                        Return (BGET)
                    }

                    Store (0xE1, BGER)
                    Return (BGET)
                }
            }

            Method (ALMN, 0, NotSerialized)
            {
                If (LOr (FLMA, FRFA))
                {
                    Notify (AMWA, 0xBC)
                }
            }
        }
    }

    Scope (_SB.PCI0.LPCB.EC0)
    {
        Method (_Q2C, 0, NotSerialized)  // _Qxx: EC Query
        {
            ^^^^AMWA.ALMN ()
        }
    }

    Scope (\)
    {
        Field (CNVS, AnyAcc, Lock, Preserve)
        {
            Offset (0x470), 
            CBS1,   32, 
            CBS2,   32, 
            CBS3,   32, 
            CBS4,   32
        }
    }

    Scope (\)
    {
        Field (CNVS, AnyAcc, Lock, Preserve)
        {
            Offset (0x470), 
            CASR,   560
        }

        Field (CNVS, AnyAcc, Lock, Preserve)
        {
            Offset (0x470), 
            CAS0,   32, 
            CAS1,   16, 
            CAS2,   512
        }
    }

    Scope (_SB.AMWA)
    {
        Name (BRSC, Buffer (0x08)
        {
             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        })
        CreateDWordField (BRSC, Zero, BREC)
        CreateDWordField (BRSC, 0x04, BRST)
        Name (BFBS, Buffer (0x14)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0010 */  0x00, 0x00, 0x00, 0x00                         
        })
        CreateDWordField (BFBS, Zero, BSRB)
        Name (BFAT, Buffer (0x48)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        })
        CreateDWordField (BFAT, Zero, ATRB)
        Method (WMBK, 3, NotSerialized)
        {
            Store (Zero, BRSC)
            Store (One, BREC)
            If (LEqual (Arg1, One))
            {
                Store (Zero, BRSC)
                Store (0x03, BREC)
                CreateWordField (Arg2, Zero, BK1C)
                Store (PWSC (BK1C, 0x02, Arg2), BK1C)
                If (LOr (LEqual (BK1C, 0x0A), LEqual (BK1C, 0x08)))
                {
                    Store (Zero, BREC)
                    Store (PASK (BK1C), Local0)
                    If (LEqual (Local0, Zero))
                    {
                        Store (One, BRST)
                    }
                    Else
                    {
                        Store (Local0, BREC)
                        If (LOr (LEqual (BREC, 0x04), LEqual (BREC, 0x05)))
                        {
                            Store (Zero, BREC)
                        }

                        Store (Zero, BRST)
                    }
                }

                Return (BRSC)
            }

            If (LEqual (Arg1, 0x02))
            {
                Store (Zero, BRSC)
                Store (One, BREC)
                Return (BRSC)
            }

            If (LEqual (Arg1, 0x03))
            {
                Store (Zero, BRSC)
                Store (One, BREC)
                Return (BRSC)
            }

            If (LEqual (Arg1, 0x08))
            {
                Store (Zero, BFAT)
                Store (One, ATRB)
                Return (BFAT)
            }

            If (LEqual (Arg1, 0x09))
            {
                Store (Zero, BFAT)
                Store (One, ATRB)
                Return (BFAT)
            }

            If (LEqual (Arg1, 0x0A))
            {
                Store (Zero, BFAT)
                Store (One, ATRB)
                Return (BFAT)
            }

            If (LEqual (Arg1, 0x0B))
            {
                Store (Zero, BRSC)
                Store (One, BREC)
                Return (BREC)
            }

            If (LOr (LEqual (Arg1, 0x0D), LEqual (Arg1, 0x0E)))
            {
                Store (Zero, BRSC)
                Store (One, BREC)
                Return (BREC)
            }

            If (LEqual (Arg1, 0x10))
            {
                CreateDWordField (BFBS, 0x04, GBS1)
                CreateDWordField (BFBS, 0x08, GBS2)
                CreateDWordField (BFBS, 0x0C, GBS3)
                CreateDWordField (BFBS, 0x10, GBS4)
                Store (Zero, BFBS)
                Store (0x03, BSRB)
                Store (Zero, GBS1)
                Store (Zero, GBS2)
                Store (Zero, GBS3)
                Store (Zero, GBS4)
                Store (Zero, CBS1)
                Store (Zero, CBS2)
                Store (Zero, CBS3)
                Store (Zero, CBS4)
                Store (0x9610, WNVA)
                Store (0x17, WNVB)
                Store (WDBA, WNVS)
                TRPS (One, Zero)
                Store (CBS1, GBS1)
                Store (CBS2, GBS2)
                Store (CBS3, GBS3)
                Store (CBS4, GBS4)
                Store (Zero, BSRB)
                Return (BFBS)
            }

            If (LEqual (Arg1, 0x11))
            {
                Store (Zero, BRSC)
                Store (0x03, BREC)
                CreateWordField (Arg2, Zero, BK0L)
                CreateDWordField (Arg2, 0x02, BK00)
                Store (BK00, CBP0)
                CreateDWordField (Arg2, 0x06, BK01)
                Store (BK01, CBP4)
                CreateDWordField (Arg2, 0x0A, BK02)
                Store (BK02, CBP8)
                Store (SPWC (0x0A, BK0L), BREC)
                If (LOr (LEqual (BREC, Zero), LEqual (BREC, 0x05)))
                {
                    Store (Zero, CBS1)
                    Store (Zero, CBS2)
                    Store (Zero, CBS3)
                    Store (Zero, CBS4)
                    CreateDWordField (Arg2, 0x0E, SBS1)
                    Store (SBS1, CBS1)
                    CreateDWordField (Arg2, 0x12, SBS2)
                    Store (SBS2, CBS2)
                    CreateDWordField (Arg2, 0x16, SBS3)
                    Store (SBS3, CBS3)
                    CreateDWordField (Arg2, 0x1A, SBS4)
                    Store (SBS4, CBS4)
                    Store (0x9610, WNVA)
                    Store (0x0117, WNVB)
                    Store (WDBA, WNVS)
                    TRPS (One, Zero)
                    Store (Zero, BREC)
                }

                Return (BREC)
            }

            If (LEqual (Arg1, 0x12))
            {
                Store (Zero, BRST)
                Store (One, BREC)
                Return (BRSC)
            }

            If (LEqual (Arg1, 0x13))
            {
                Store (Zero, BRSC)
                Store (One, BREC)
                Return (BRSC)
            }
        }
    }

    Scope (\)
    {
        Field (CNVS, AnyAcc, Lock, Preserve)
        {
            Offset (0x470), 
            TEMP,   128
        }

        Field (CNVS, AnyAcc, Lock, Preserve)
        {
            Offset (0x470), 
            BLEN,   16, 
            Offset (0x480), 
            MNIT,   672
        }
    }

    Scope (\)
    {
        Field (CNVS, AnyAcc, Lock, Preserve)
        {
            Offset (0x470), 
            CBP0,   32, 
            CBP4,   32, 
            CBP8,   32, 
            CBPL,   16
        }
    }

    Scope (_SB.AMWA)
    {
        Name (BCPW, Buffer (0x08)
        {
             0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        })
        CreateDWordField (BCPW, Zero, BCPE)
        CreateDWordField (BCPW, 0x04, BCPS)
        Name (BSPW, Buffer (0x04)
        {
             0x00, 0x00, 0x00, 0x00                         
        })
        CreateDWordField (BSPW, Zero, BSPE)
        Name (BIOS, Buffer (0x0808)
        {
            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0070 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0078 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0080 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0088 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0098 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 00A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 00A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 00B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 00B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 00C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 00C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 00D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 00D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 00E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 00E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 00F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 00F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0100 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0108 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0110 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0118 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0120 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0128 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0130 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0138 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0140 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0148 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0150 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0158 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0160 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0168 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0170 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0178 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0180 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0188 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0190 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0198 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 01A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 01A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 01B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 01B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 01C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 01C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 01D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 01D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 01E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 01E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 01F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 01F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0200 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0208 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0210 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0218 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0220 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0228 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0230 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0238 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0240 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0248 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0250 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0258 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0260 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0268 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0270 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0278 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0280 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0288 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0290 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0298 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 02A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 02A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 02B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 02B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 02C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 02C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 02D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 02D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 02E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 02E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 02F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 02F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0300 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0308 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0310 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0318 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0320 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0328 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0330 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0338 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0340 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0348 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0350 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0358 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0360 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0368 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0370 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0378 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0380 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0388 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0390 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0398 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 03A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 03A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 03B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 03B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 03C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 03C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 03D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 03D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 03E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 03E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 03F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 03F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0400 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0408 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0410 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0418 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0420 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0428 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0430 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0438 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0440 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0448 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0450 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0458 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0460 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0468 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0470 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0478 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0480 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0488 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0490 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0498 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 04A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 04A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 04B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 04B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 04C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 04C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 04D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 04D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 04E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 04E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 04F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 04F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0500 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0508 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0510 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0518 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0520 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0528 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0530 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0538 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0540 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0548 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0550 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0558 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0560 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0568 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0570 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0578 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0580 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0588 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0590 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0598 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 05A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 05A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 05B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 05B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 05C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 05C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 05D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 05D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 05E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 05E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 05F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 05F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0600 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0608 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0610 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0618 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0620 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0628 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0630 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0638 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0640 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0648 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0650 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0658 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0660 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0668 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0670 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0678 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0680 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0688 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0690 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0698 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 06A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 06A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 06B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 06B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 06C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 06C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 06D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 06D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 06E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 06E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 06F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 06F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0700 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0708 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0710 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0718 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0720 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0728 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0730 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0738 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0740 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0748 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0750 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0758 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0760 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0768 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0770 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0778 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0780 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0788 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0790 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0798 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 07A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 07A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 07B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 07B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 07C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 07C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 07D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 07D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 07E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 07E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 07F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 07F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
            /* 0800 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
        })
        CreateDWordField (BIOS, Zero, BSRC)
        CreateWordField (BIOS, 0x04, BSLN)
        CreateDWordField (BIOS, 0x06, RBSV)
        CreateDWordField (BIOS, 0x0A, RMID)
        CreateField (BIOS, 0x70, 0x80, RBSB)
        CreateField (BIOS, 0xF0, 0x80, RAPB)
        CreateField (BIOS, 0x0170, 0x80, RUPB)
        CreateField (BIOS, 0x01F0, 0x02A0, RMIB)
        Method (WMBL, 3, NotSerialized)
        {
            If (LEqual (Arg1, One))
            {
                Store (0x03, BCPE)
                CreateWordField (Arg2, Zero, BL1L)
                CreateDWordField (Arg2, 0x02, BL10)
                Store (BL10, CBP0)
                CreateDWordField (Arg2, 0x06, BL11)
                Store (BL11, CBP4)
                CreateDWordField (Arg2, 0x0A, BL12)
                Store (BL12, CBP8)
                CreateWordField (Arg2, 0x0E, BL1C)
                Store (PWSC (BL1C, 0x10, Arg2), BL1C)
                Store (SPWC (BL1C, BL1L), Local1)
                Store (Local1, BCPE)
                If (LEqual (Local1, 0x02))
                {
                    Store (Zero, BCPE)
                    Store (One, BCPS)
                }
                ElseIf (LEqual (Local1, Zero))
                {
                    Store (Zero, BCPE)
                    Store (Zero, BCPS)
                }
                ElseIf (LOr (LEqual (Local1, 0x04), LEqual (Local1, 0x05)))
                {
                    Store (Zero, BCPE)
                    Store (Zero, BCPS)
                    If (LNotEqual (BL1L, Zero))
                    {
                        Store (One, BCPS)
                    }
                }

                Return (BCPW)
            }

            If (LEqual (Arg1, 0x02))
            {
                Store (0x03, BSPE)
                CreateWordField (Arg2, Zero, BL2L)
                CreateDWordField (Arg2, 0x02, BL20)
                Store (BL20, CBP0)
                CreateDWordField (Arg2, 0x06, BL21)
                Store (BL21, CBP4)
                CreateDWordField (Arg2, 0x0A, BL22)
                Store (BL22, CBP8)
                CreateWordField (Arg2, 0x1C, BL2C)
                Store (PWSC (BL2C, 0x1E, Arg2), BL2C)
                Store (SPWC (BL2C, BL2L), BSPE)
                If (LEqual (BSPE, 0x04))
                {
                    Store (One, Local0)
                }
                ElseIf (LEqual (BSPE, 0x05))
                {
                    Store (One, Local0)
                }
                ElseIf (LEqual (BSPE, Zero))
                {
                    Store (Zero, Local0)
                }
                ElseIf (LEqual (BSPE, 0x02))
                {
                    Store (Zero, Local0)
                }
                ElseIf (LEqual (BSPE, 0x07))
                {
                    Store (Zero, Local0)
                }

                If (LAnd (LEqual (BL2L, Zero), LEqual (Local0, Zero)))
                {
                    Store (0x02, BSPE)
                }
                ElseIf (LNotEqual (BL2L, Zero))
                {
                    If (LEqual (Local0, One))
                    {
                        Store (0x02, BSPE)
                    }
                    ElseIf (LEqual (Local0, Zero))
                    {
                        If (LEqual (BL2C, 0x08))
                        {
                            Store (PASK (0x0A), Local2)
                            If (LNotEqual (Local2, Zero))
                            {
                                Store (Local2, BSPE)
                            }
                        }
                    }
                }
                ElseIf (LEqual (BL2C, 0x0A))
                {
                    Store (Zero, BSPE)
                }
                Else
                {
                    Store (PASK (0x0A), Local2)
                    If (LNotEqual (Local2, Zero))
                    {
                        Store (Local2, BSPE)
                    }
                    Else
                    {
                        Store (Zero, BSPE)
                    }
                }

                If (LEqual (BSPE, Zero))
                {
                    CreateWordField (Arg2, 0x0E, BLBL)
                    CreateDWordField (Arg2, 0x10, BLB0)
                    Store (BLB0, CBP0)
                    CreateDWordField (Arg2, 0x14, BLB1)
                    Store (BLB1, CBP4)
                    CreateDWordField (Arg2, 0x18, BLB2)
                    Store (BLB2, CBP8)
                    If (LEqual (BLBL, Zero))
                    {
                        If (LEqual (BL2C, 0x0A))
                        {
                            Store (PASK (0x08), Local2)
                            If (LEqual (Local2, Zero))
                            {
                                Store (PDIS (0x08), BSPE)
                            }

                            Store (PDIS (0x0A), BSPE)
                        }
                        Else
                        {
                            Store (PDIS (0x08), BSPE)
                        }
                    }
                    ElseIf (LOr (LEqual (BL2C, 0x08), LEqual (BL2C, 0x0A)))
                    {
                        Store (0x9610, WNVA)
                        Store (BLBL, WNVC)
                        Store (WDBA, WNVS)
                        If (LEqual (BL2C, 0x08))
                        {
                            Store (0x1207, WNVB)
                        }
                        ElseIf (LEqual (BL2C, 0x0A))
                        {
                            Store (0x1208, WNVB)
                        }

                        TRPS (One, Zero)
                        And (WNVA, 0xFFFF, Local1)
                        If (LEqual (Local1, Zero))
                        {
                            Store (Zero, BSPE)
                        }
                        Else
                        {
                            Store (One, BSPE)
                        }
                    }
                }

                Return (BSPW)
            }

            If (LEqual (Arg1, 0x03))
            {
                Store (Zero, BIOS)
                Store (One, BSRC)
                Return (BIOS)
            }

            If (LEqual (Arg1, 0x04))
            {
                Store (Zero, BSPW)
                Store (One, BSPE)
                Return (BSPW)
            }

            If (LEqual (Arg1, 0x05))
            {
                Store (Zero, BSPW)
                Store (One, BSPE)
                CreateWordField (Arg2, Zero, BL5D)
                CreateDWordField (Arg2, 0x02, BL50)
                Store (BL50, CBP0)
                CreateDWordField (Arg2, 0x06, BL51)
                Store (BL51, CBP4)
                CreateDWordField (Arg2, 0x0A, BL52)
                Store (BL52, CBP8)
                CreateWordField (Arg2, 0x0E, BL5L)
                Store (BL5L, CBPL)
                Store (TRPS (0xC7, BL5D), BSPE)
                Return (BSPW)
            }
        }

        Method (PASK, 1, NotSerialized)
        {
            Store (0x03, Local1)
            If (LOr (LEqual (Arg0, 0x0A), LEqual (Arg0, 0x08)))
            {
                If (LEqual (Arg0, 0x0A))
                {
                    Store (0x05, Local1)
                    Store (0x0108, Local0)
                }
                Else
                {
                    Store (0x04, Local1)
                    Store (0x0107, Local0)
                }

                Store (0x9610, WNVA)
                Store (Local0, WNVB)
                TRPS (One, Zero)
                And (WNVA, 0x0F, Local0)
                If (LEqual (Local0, Zero))
                {
                    Store (Zero, Local1)
                }
                ElseIf (LEqual (Local0, One)){}
                Else
                {
                    Store (One, Local1)
                }
            }

            Return (Local1)
        }

        Method (PDIS, 1, NotSerialized)
        {
            Store (0x03, Local0)
            If (LOr (LEqual (Arg0, 0x0A), LEqual (Arg0, 0x08)))
            {
                If (LEqual (Arg0, 0x0A))
                {
                    Store (0x08, Local1)
                }
                Else
                {
                    Store (0x07, Local1)
                }

                Store (0x9610, WNVA)
                Store (Local1, WNVB)
                TRPS (One, Zero)
                And (WNVA, 0xFF, Local0)
                If (LEqual (Local0, Zero))
                {
                    Store (Zero, Local0)
                }
                Else
                {
                    Store (One, Local0)
                }
            }

            Return (Local0)
        }

        Method (PWSC, 3, NotSerialized)
        {
            Store (Zero, Local0)
            CreateDWordField (Arg2, Arg1, PCM0)
            If (LAnd (LEqual (Arg0, 0x0A), LEqual (PCM0, 0x00440041)))
            {
                Store (0x0A, Local0)
            }
            ElseIf (LAnd (LEqual (Arg0, 0x08), LEqual (PCM0, 0x00530055)))
            {
                Store (0x08, Local0)
            }

            Return (Local0)
        }

        Method (PACH, 2, NotSerialized)
        {
            Store (0x03, Local1)
            If (LOr (LEqual (Arg0, 0x0A), LEqual (Arg0, 0x08)))
            {
                If (LEqual (Arg0, 0x0A))
                {
                    Store (0x1308, Local0)
                }
                Else
                {
                    Store (0x1307, Local0)
                }

                Store (WDBA, WNVS)
                Store (0x9610, WNVA)
                Store (Local0, WNVB)
                Store (Arg1, WNVC)
                TRPS (One, Zero)
                And (WNVA, 0xFFFF, Local1)
                If (LEqual (Local1, Zero))
                {
                    Store (Zero, Local1)
                }
                ElseIf (LEqual (Local1, 0x0100))
                {
                    Store (0x02, Local1)
                }
                ElseIf (LEqual (Local1, 0x07))
                {
                    Store (0x07, Local1)
                }
            }

            Return (Local1)
        }

        Method (SPWC, 2, NotSerialized)
        {
            Store (0x03, Local0)
            If (LOr (LEqual (Arg0, 0x08), LEqual (Arg0, 0x0A)))
            {
                Store (PASK (Arg0), Local0)
                If (LEqual (Local0, Zero))
                {
                    Store (PACH (Arg0, Arg1), Local0)
                }

                If (LOr (LEqual (Local0, 0x05), LEqual (Local0, 0x04)))
                {
                    If (LNotEqual (Arg1, Zero))
                    {
                        Store (0x02, Local0)
                    }
                }
            }

            Return (Local0)
        }
    }

    Scope (_SB)
    {
        Device (AMW0)
        {
            Name (_HID, EisaId ("PNP0C14"))  // _HID: Hardware ID
            Name (_UID, Zero)  // _UID: Unique ID
            Name (WLMP, Zero)
            Name (WMID, Zero)
            Name (B0ED, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                         
            })
            CreateDWordField (B0ED, Zero, WLID)
            Name (B1ED, Buffer (0x04)
            {
                 0x00, 0x00, 0x00, 0x00                         
            })
            Name (_WDG, Buffer (0x64)
            {
                /* 0000 */  0x81, 0x17, 0xF4, 0xD9, 0x33, 0xF6, 0x00, 0x44,
                /* 0008 */  0x93, 0x55, 0x60, 0x17, 0x70, 0xBE, 0xC5, 0x10,
                /* 0010 */  0x41, 0x41, 0x01, 0x00, 0x1D, 0x37, 0xC3, 0x67,
                /* 0018 */  0xA3, 0x95, 0x37, 0x4C, 0xBB, 0x61, 0xDD, 0x47,
                /* 0020 */  0xB4, 0x91, 0xDA, 0xAB, 0x41, 0x42, 0x01, 0x02,
                /* 0028 */  0xED, 0x16, 0x1F, 0x43, 0x2B, 0x0C, 0x4C, 0x44,
                /* 0030 */  0xB2, 0x67, 0x27, 0xDE, 0xB1, 0x40, 0xCF, 0x9C,
                /* 0038 */  0x41, 0x43, 0x01, 0x02, 0x71, 0xBF, 0xD1, 0x40,
                /* 0040 */  0x2D, 0xA8, 0x59, 0x4E, 0xA1, 0x68, 0x39, 0x85,
                /* 0048 */  0xE0, 0x3B, 0x2E, 0x87, 0xB0, 0x00, 0x01, 0x08,
                /* 0050 */  0x21, 0x12, 0x90, 0x05, 0x66, 0xD5, 0xD1, 0x11,
                /* 0058 */  0xB2, 0xF0, 0x00, 0xA0, 0xC9, 0x06, 0x29, 0x10,
                /* 0060 */  0x44, 0x44, 0x01, 0x00                         
            })
            Method (_WED, 1, NotSerialized)  // _Wxx: Wake Event
            {
                Store (Arg0, P80H)
                If (LEqual (Arg0, 0xB0))
                {
                    Return (B0ED)
                }
            }

            Method (WQAA, 1, NotSerialized)
            {
                Store (0xAA, P80H)
                Return (B1ED)
            }

            Method (WSAA, 2, NotSerialized)
            {
                Store (0xA1, P80H)
                CreateDWordField (Arg1, Zero, DDD0)
                If (LEqual (DDD0, One))
                {
                    Add (DDD0, 0x02, DDD0)
                    Store (DDD0, Index (B1ED, Zero))
                }
            }

            Method (WMAB, 3, NotSerialized)
            {
                Store (0xAB, P80H)
                Store (One, WLMP)
                Store (Zero, WMID)
                Return (WH15 (Arg1, Arg2))
            }

            Method (WMAC, 3, NotSerialized)
            {
                Store (0xAC, P80H)
                Store (One, WLMP)
                Store (One, WMID)
                Return (WH15 (Arg1, Arg2))
            }
        }
    }

    Scope (_SB.AMW0)
    {
        Name (WQDD, Buffer (0x0560)
        {
            /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,
            /* 0008 */  0x50, 0x05, 0x00, 0x00, 0x70, 0x1D, 0x00, 0x00,
            /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,
            /* 0018 */  0x18, 0xCB, 0x8D, 0x00, 0x01, 0x06, 0x18, 0x42,
            /* 0020 */  0x10, 0x09, 0x10, 0x8A, 0xE7, 0x80, 0x42, 0x04,
            /* 0028 */  0x0A, 0x0D, 0xA1, 0x40, 0x30, 0x28, 0x38, 0x4B,
            /* 0030 */  0x82, 0x90, 0x0B, 0x26, 0x26, 0x40, 0x08, 0x84,
            /* 0038 */  0x24, 0x0A, 0x30, 0x2F, 0x40, 0xB7, 0x00, 0xC3,
            /* 0040 */  0x02, 0x6C, 0x0B, 0x30, 0x2D, 0xC0, 0x31, 0x90,
            /* 0048 */  0xFA, 0xF7, 0x87, 0x28, 0x0D, 0x44, 0x22, 0x20,
            /* 0050 */  0xA9, 0x14, 0x08, 0x09, 0x15, 0xA0, 0x5C, 0x80,
            /* 0058 */  0x6F, 0x01, 0xDA, 0x11, 0x25, 0x59, 0x80, 0x65,
            /* 0060 */  0x18, 0x11, 0xD8, 0x2B, 0x32, 0x41, 0xE3, 0x04,
            /* 0068 */  0xE5, 0x0C, 0x03, 0x05, 0x6F, 0xC0, 0x36, 0x05,
            /* 0070 */  0x98, 0x1C, 0x04, 0x95, 0x3D, 0x08, 0x94, 0x0C,
            /* 0078 */  0x08, 0x79, 0x14, 0x60, 0x15, 0x4E, 0xD3, 0x49,
            /* 0080 */  0x60, 0xF7, 0x73, 0x91, 0x30, 0x18, 0x19, 0x13,
            /* 0088 */  0xA0, 0x50, 0x80, 0x46, 0x01, 0xDE, 0x40, 0x64,
            /* 0090 */  0x4B, 0x80, 0x41, 0x01, 0xE2, 0x04, 0x28, 0x83,
            /* 0098 */  0x12, 0x4A, 0xB8, 0x83, 0x69, 0x4D, 0x80, 0x39,
            /* 00A0 */  0x28, 0x82, 0x56, 0x1B, 0x98, 0x50, 0x3A, 0x03,
            /* 00A8 */  0x12, 0x48, 0xAC, 0x16, 0xC1, 0x05, 0x13, 0x3B,
            /* 00B0 */  0x6A, 0x94, 0x40, 0xD1, 0xDB, 0x1F, 0x04, 0x09,
            /* 00B8 */  0xA7, 0x00, 0xA2, 0x06, 0x10, 0x45, 0x1A, 0x0D,
            /* 00C0 */  0x6A, 0x44, 0x09, 0x0E, 0xCC, 0xA3, 0x39, 0xD5,
            /* 00C8 */  0xCE, 0x05, 0x48, 0x9F, 0xAB, 0x40, 0x8E, 0xF5,
            /* 00D0 */  0x34, 0xEA, 0x1C, 0x2E, 0x01, 0x49, 0x60, 0xAC,
            /* 00D8 */  0x04, 0xB7, 0xEE, 0x21, 0xE2, 0x5D, 0x03, 0x6A,
            /* 00E0 */  0xE2, 0x87, 0xC8, 0x04, 0xC1, 0xA1, 0x86, 0xE8,
            /* 00E8 */  0xF1, 0x86, 0x3B, 0x81, 0xA3, 0x3E, 0x12, 0x06,
            /* 00F0 */  0x71, 0x50, 0x47, 0x83, 0x39, 0x07, 0xD8, 0xE1,
            /* 00F8 */  0x64, 0x34, 0xE3, 0x52, 0x05, 0x98, 0x1D, 0xBA,
            /* 0100 */  0x46, 0x96, 0xE0, 0x78, 0x0C, 0x7D, 0xF6, 0xE7,
            /* 0108 */  0xD3, 0x33, 0x24, 0x91, 0x3F, 0x08, 0xD4, 0xC8,
            /* 0110 */  0x0C, 0xED, 0xA1, 0x9E, 0x56, 0xCC, 0x90, 0x4F,
            /* 0118 */  0x01, 0x87, 0xC5, 0xC4, 0x42, 0x68, 0x93, 0x1A,
            /* 0120 */  0x0F, 0xC4, 0xFF, 0xFF, 0x78, 0xC0, 0xA3, 0xF8,
            /* 0128 */  0x68, 0x20, 0x84, 0x57, 0x82, 0xD8, 0x1E, 0x50,
            /* 0130 */  0x82, 0x01, 0x21, 0xE4, 0x64, 0x3C, 0xA8, 0x51,
            /* 0138 */  0x18, 0x35, 0xDC, 0x61, 0x1C, 0xB5, 0x8F, 0x0F,
            /* 0140 */  0x3A, 0x3C, 0x50, 0x51, 0xC3, 0xA6, 0x67, 0x06,
            /* 0148 */  0x7E, 0x5C, 0x60, 0xE7, 0x82, 0x98, 0x8F, 0x00,
            /* 0150 */  0x1E, 0xC9, 0x09, 0xF9, 0x38, 0xE1, 0x81, 0xC1,
            /* 0158 */  0x07, 0xC4, 0x7B, 0x9F, 0x32, 0x19, 0xC1, 0x99,
            /* 0160 */  0x7A, 0x80, 0xE0, 0xB0, 0x3E, 0x7C, 0x02, 0xFC,
            /* 0168 */  0xB2, 0xF0, 0xB0, 0x90, 0xC0, 0xF7, 0x07, 0x03,
            /* 0170 */  0xE3, 0x46, 0x68, 0xBF, 0x02, 0x10, 0x82, 0x97,
            /* 0178 */  0x79, 0x02, 0x90, 0x53, 0x04, 0x8D, 0xCD, 0xD0,
            /* 0180 */  0x4F, 0x03, 0x2F, 0x0E, 0xE1, 0x83, 0x47, 0x38,
            /* 0188 */  0xDF, 0x03, 0x38, 0x85, 0xC7, 0x00, 0x0F, 0xC1,
            /* 0190 */  0x04, 0x16, 0x39, 0x02, 0x94, 0x98, 0x11, 0xA0,
            /* 0198 */  0x8E, 0x0D, 0x27, 0x70, 0x3C, 0x61, 0x8F, 0xE0,
            /* 01A0 */  0x78, 0xA2, 0x9C, 0xC4, 0x01, 0xF9, 0xA8, 0x61,
            /* 01A8 */  0x84, 0xE0, 0xE5, 0x9E, 0x38, 0x88, 0xE6, 0x71,
            /* 01B0 */  0x6A, 0x16, 0xEF, 0x00, 0x87, 0xC0, 0xC6, 0x84,
            /* 01B8 */  0x3B, 0x40, 0x78, 0x08, 0x7C, 0x00, 0x8F, 0x1A,
            /* 01C0 */  0xE7, 0x67, 0xA5, 0xB3, 0x42, 0x9E, 0x3B, 0xF8,
            /* 01C8 */  0x98, 0xB0, 0x03, 0xE0, 0xD2, 0x0F, 0x27, 0x28,
            /* 01D0 */  0xB1, 0xE7, 0x13, 0x50, 0xFC, 0xFF, 0xCF, 0x27,
            /* 01D8 */  0xC0, 0x1E, 0xE4, 0x99, 0xE4, 0xED, 0xE4, 0x68,
            /* 01E0 */  0x9E, 0x4B, 0x1E, 0x48, 0x9E, 0x48, 0x9E, 0x4F,
            /* 01E8 */  0x8C, 0xF3, 0x66, 0xF2, 0x64, 0x10, 0xE1, 0xF9,
            /* 01F0 */  0xC4, 0xD7, 0x14, 0x23, 0x44, 0x09, 0x19, 0xE8,
            /* 01F8 */  0xE1, 0x24, 0x42, 0x94, 0x70, 0x81, 0xC2, 0x1A,
            /* 0200 */  0x21, 0xC8, 0x63, 0xC1, 0x09, 0x1F, 0x76, 0xAC,
            /* 0208 */  0x40, 0x61, 0x9E, 0x4F, 0x98, 0xF0, 0xA7, 0x86,
            /* 0210 */  0x2C, 0x9C, 0x4F, 0x00, 0xBA, 0xFC, 0xFF, 0xCF,
            /* 0218 */  0x27, 0x80, 0x33, 0x81, 0xE7, 0x13, 0x90, 0x0E,
            /* 0220 */  0x8F, 0x1F, 0x4F, 0x80, 0xC9, 0x08, 0xB8, 0x16,
            /* 0228 */  0x13, 0x87, 0x2F, 0xD4, 0xE3, 0xC0, 0xA7, 0x11,
            /* 0230 */  0x40, 0xCE, 0x09, 0xE4, 0xFD, 0xE3, 0x38, 0x9F,
            /* 0238 */  0x44, 0x7C, 0xF7, 0xF2, 0xFF, 0xFF, 0xE6, 0xE5,
            /* 0240 */  0x83, 0xC8, 0x1B, 0xC8, 0xC1, 0x3E, 0x8D, 0xB0,
            /* 0248 */  0x51, 0x05, 0x33, 0xCA, 0xE9, 0x47, 0x88, 0xFA,
            /* 0250 */  0x52, 0x62, 0xC4, 0x08, 0xC1, 0x42, 0x05, 0x8A,
            /* 0258 */  0x11, 0x35, 0xB2, 0x61, 0x23, 0xC4, 0x79, 0xF8,
            /* 0260 */  0xA2, 0x0F, 0x06, 0x0D, 0xD5, 0xA7, 0x11, 0x80,
            /* 0268 */  0x1F, 0xA7, 0x09, 0xDC, 0xE9, 0x02, 0x4C, 0x93,
            /* 0270 */  0x38, 0x80, 0x28, 0x45, 0xC3, 0x68, 0x3A, 0x8F,
            /* 0278 */  0x03, 0x01, 0x9F, 0x2F, 0x80, 0x89, 0xE2, 0x97,
            /* 0280 */  0x9E, 0xCE, 0x27, 0xFE, 0xFF, 0xAB, 0x05, 0x91,
            /* 0288 */  0x8D, 0xB5, 0x7A, 0x58, 0x34, 0xF3, 0x03, 0x48,
            /* 0290 */  0xF0, 0xC5, 0x03, 0x6B, 0xD8, 0x27, 0x79, 0x16,
            /* 0298 */  0x27, 0x99, 0x60, 0x56, 0x28, 0xC1, 0x7A, 0xD8,
            /* 02A0 */  0x4E, 0x09, 0xA3, 0x04, 0x24, 0x1A, 0x8E, 0xA1,
            /* 02A8 */  0xAD, 0x19, 0x46, 0x70, 0x06, 0xF1, 0x79, 0xC8,
            /* 02B0 */  0x21, 0xCE, 0x31, 0x50, 0x8E, 0x0C, 0x1E, 0xC5,
            /* 02B8 */  0x59, 0x3D, 0x07, 0x78, 0x8C, 0x8F, 0x0B, 0x6C,
            /* 02C0 */  0x7C, 0x3E, 0x08, 0xF0, 0xC3, 0xA0, 0x6F, 0x06,
            /* 02C8 */  0x46, 0xB6, 0x9A, 0xD3, 0x0C, 0x0A, 0xCC, 0xC7,
            /* 02D0 */  0x0B, 0x4E, 0x50, 0xD7, 0xCD, 0x05, 0x64, 0x43,
            /* 02D8 */  0x82, 0x79, 0x10, 0x38, 0x24, 0x30, 0x4F, 0xD5,
            /* 02E0 */  0x43, 0x02, 0x1E, 0xE0, 0x87, 0x04, 0xE6, 0x2B,
            /* 02E8 */  0x81, 0x87, 0x04, 0x2C, 0xFE, 0xFF, 0xA8, 0x07,
            /* 02F0 */  0x71, 0x48, 0x60, 0x46, 0xF2, 0x90, 0xC0, 0xA6,
            /* 02F8 */  0xEF, 0xC8, 0x01, 0x0A, 0x20, 0xDF, 0x30, 0x7C,
            /* 0300 */  0xDC, 0x7B, 0xCA, 0x60, 0x63, 0x78, 0xE2, 0x33,
            /* 0308 */  0x9A, 0xD1, 0xB9, 0xC4, 0xE5, 0xE8, 0x42, 0xC1,
            /* 0310 */  0x45, 0xC1, 0xE8, 0x58, 0x60, 0x10, 0x4F, 0xCB,
            /* 0318 */  0x51, 0xA6, 0x8A, 0x9E, 0x89, 0x7D, 0x9E, 0x42,
            /* 0320 */  0xC8, 0x89, 0x82, 0x5F, 0xDD, 0x74, 0x9F, 0x81,
            /* 0328 */  0x76, 0xF7, 0x08, 0xEA, 0x8B, 0x0A, 0x83, 0xF3,
            /* 0330 */  0x64, 0x39, 0x9C, 0xAF, 0x14, 0xFC, 0xAE, 0xE3,
            /* 0338 */  0xCB, 0x15, 0xF8, 0x46, 0x05, 0xF7, 0x50, 0xC1,
            /* 0340 */  0x46, 0x05, 0xF6, 0xEB, 0x88, 0x47, 0x05, 0xD6,
            /* 0348 */  0xFF, 0xFF, 0xA8, 0x60, 0x9D, 0x2B, 0xD8, 0xA8,
            /* 0350 */  0xC0, 0x7E, 0x26, 0xF0, 0xA8, 0x80, 0xCB, 0xD1,
            /* 0358 */  0x82, 0x8D, 0x0A, 0xEC, 0x1E, 0x46, 0x05, 0xCA,
            /* 0360 */  0x20, 0xD7, 0x0F, 0x28, 0xD0, 0x8F, 0x96, 0xAF,
            /* 0368 */  0x40, 0x0F, 0x41, 0x8F, 0x51, 0x1E, 0x14, 0xB8,
            /* 0370 */  0x61, 0x7C, 0xDF, 0x03, 0x4E, 0x17, 0x10, 0x98,
            /* 0378 */  0xF0, 0x18, 0xC1, 0x47, 0x18, 0xF2, 0xFF, 0x27,
            /* 0380 */  0x28, 0x6B, 0x5C, 0xA8, 0xFB, 0x8A, 0xAF, 0x72,
            /* 0388 */  0xEC, 0x3A, 0x85, 0xBB, 0x2A, 0x62, 0x60, 0x3D,
            /* 0390 */  0x52, 0x0E, 0x6B, 0xB4, 0xB0, 0x07, 0xFC, 0xA6,
            /* 0398 */  0xE5, 0x63, 0x9A, 0x67, 0x66, 0x8C, 0xB0, 0x1E,
            /* 03A0 */  0xAD, 0x95, 0x92, 0xD2, 0x2B, 0x9F, 0x23, 0xDD,
            /* 03A8 */  0xFA, 0x00, 0x41, 0x73, 0x79, 0x10, 0x78, 0xCE,
            /* 03B0 */  0x7B, 0x4B, 0x78, 0x73, 0xF7, 0x59, 0xC2, 0xC7,
            /* 03B8 */  0xBD, 0xC7, 0x82, 0x97, 0x80, 0x97, 0x81, 0xF7,
            /* 03C0 */  0x92, 0x57, 0x5A, 0x76, 0xED, 0xF3, 0xAD, 0xCF,
            /* 03C8 */  0x48, 0x0F, 0x80, 0x46, 0x09, 0x12, 0x23, 0xE6,
            /* 03D0 */  0xFB, 0x89, 0x91, 0x1F, 0x6D, 0x7D, 0x69, 0xF0,
            /* 03D8 */  0xBD, 0x2F, 0xC6, 0x5B, 0x1F, 0x8B, 0x77, 0xEB,
            /* 03E0 */  0x03, 0x44, 0xFD, 0xFF, 0x6F, 0x7D, 0xC0, 0xFE,
            /* 03E8 */  0x72, 0xF1, 0xD6, 0x07, 0x1C, 0x30, 0x23, 0xBE,
            /* 03F0 */  0xF6, 0x01, 0x93, 0x34, 0x2B, 0xD0, 0x59, 0xC3,
            /* 03F8 */  0x49, 0x40, 0x74, 0xED, 0xC3, 0xE9, 0x01, 0xD2,
            /* 0400 */  0xB5, 0x0F, 0xAF, 0x03, 0x96, 0x8E, 0xDB, 0x0A,
            /* 0408 */  0x60, 0x94, 0xE4, 0x58, 0x85, 0xD2, 0x7E, 0xAC,
            /* 0410 */  0xA2, 0x20, 0x3E, 0xCE, 0xF8, 0xDA, 0x07, 0x58,
            /* 0418 */  0xF9, 0xFF, 0x5F, 0xFB, 0x00, 0x26, 0x0E, 0x09,
            /* 0420 */  0xE6, 0xF5, 0xE2, 0x09, 0xC7, 0x43, 0x02, 0xEB,
            /* 0428 */  0x8D, 0xC6, 0x43, 0x82, 0xFB, 0xFF, 0x1F, 0x34,
            /* 0430 */  0xD8, 0x86, 0x04, 0xE6, 0x8B, 0x9D, 0xAF, 0x8E,
            /* 0438 */  0xC0, 0x59, 0xF6, 0x82, 0x75, 0x29, 0xE1, 0x42,
            /* 0440 */  0x61, 0x74, 0xB4, 0x30, 0x88, 0x01, 0x7D, 0x75,
            /* 0448 */  0x04, 0x7E, 0x17, 0x3E, 0xE0, 0x73, 0x75, 0x04,
            /* 0450 */  0x0E, 0x17, 0x3E, 0xFC, 0xFF, 0xFF, 0xEA, 0x08,
            /* 0458 */  0x38, 0xB8, 0xF1, 0x81, 0xF3, 0xEA, 0x08, 0xFC,
            /* 0460 */  0x4C, 0x5C, 0x1D, 0x01, 0x1D, 0x2A, 0x46, 0x0E,
            /* 0468 */  0x74, 0x4E, 0x31, 0x8C, 0xE0, 0xFF, 0x7F, 0x54,
            /* 0470 */  0xE0, 0x06, 0xF6, 0xF1, 0x00, 0xD8, 0x8C, 0x0A,
            /* 0478 */  0x18, 0x9C, 0x06, 0x7C, 0x09, 0x05, 0xBC, 0x2A,
            /* 0480 */  0xB4, 0xE9, 0x53, 0xA3, 0x51, 0xAB, 0x06, 0x65,
            /* 0488 */  0x6A, 0x94, 0x69, 0x50, 0xAB, 0x4F, 0xA5, 0xC6,
            /* 0490 */  0x8C, 0x5D, 0x29, 0x13, 0x8C, 0xB1, 0x02, 0x8D,
            /* 0498 */  0xC5, 0x22, 0x96, 0x23, 0x10, 0x87, 0x04, 0xA1,
            /* 04A0 */  0x22, 0x1F, 0x43, 0x02, 0x71, 0x44, 0x10, 0x1A,
            /* 04A8 */  0xE1, 0x4D, 0x23, 0x10, 0xC7, 0x5B, 0x9B, 0x40,
            /* 04B0 */  0x2C, 0xEE, 0xA1, 0x21, 0x10, 0xFF, 0xFF, 0x83,
            /* 04B8 */  0x3C, 0x23, 0x64, 0x04, 0x44, 0xA9, 0x40, 0x74,
            /* 04C0 */  0x4B, 0x22, 0x6B, 0x12, 0x90, 0x95, 0x81, 0x08,
            /* 04C8 */  0xC8, 0x81, 0x80, 0x68, 0x3A, 0x20, 0x2A, 0xEA,
            /* 04D0 */  0x21, 0x20, 0x20, 0x2B, 0x04, 0x11, 0x90, 0xD5,
            /* 04D8 */  0xD8, 0x00, 0x62, 0xDA, 0x40, 0x04, 0xE4, 0x5C,
            /* 04E0 */  0x40, 0x34, 0x25, 0x10, 0x55, 0xA8, 0x03, 0x88,
            /* 04E8 */  0xE9, 0x05, 0x11, 0x90, 0xB3, 0x02, 0xD1, 0xE4,
            /* 04F0 */  0x40, 0x54, 0xB3, 0x0F, 0x20, 0x96, 0x00, 0x44,
            /* 04F8 */  0x40, 0x4E, 0x4A, 0x23, 0x10, 0xEB, 0x54, 0x02,
            /* 0500 */  0xC2, 0x52, 0xBD, 0x1D, 0x04, 0xE8, 0x88, 0x20,
            /* 0508 */  0x02, 0xB2, 0xB2, 0x2F, 0xAB, 0x80, 0x2C, 0x13,
            /* 0510 */  0x44, 0x40, 0x4E, 0x07, 0x44, 0xA3, 0x02, 0x51,
            /* 0518 */  0x85, 0x56, 0x80, 0x98, 0x5C, 0x10, 0x01, 0x39,
            /* 0520 */  0x25, 0x10, 0x8D, 0x0C, 0x44, 0x95, 0x6A, 0x01,
            /* 0528 */  0x62, 0xB2, 0x41, 0x04, 0x64, 0x89, 0x5E, 0x80,
            /* 0530 */  0x98, 0x60, 0x10, 0x01, 0x39, 0x2C, 0x10, 0x8D,
            /* 0538 */  0x0E, 0x44, 0x65, 0xBF, 0x0A, 0x04, 0xE4, 0x10,
            /* 0540 */  0x20, 0x3A, 0x25, 0x10, 0x33, 0x40, 0x4C, 0x0E,
            /* 0548 */  0x88, 0x0E, 0x00, 0x04, 0x88, 0xC6, 0x02, 0xA2,
            /* 0550 */  0x92, 0xFE, 0x5B, 0x02, 0xB2, 0x40, 0x10, 0x01,
            /* 0558 */  0x39, 0x1C, 0x10, 0x8D, 0x0A, 0x44, 0xFF, 0xFF 
        })
    }

    Scope (\)
    {
        Field (CNVS, DWordAcc, Lock, Preserve)
        {
            Offset (0x470), 
            CBE0,   32
        }

        Field (CNVS, DWordAcc, Lock, Preserve)
        {
            Offset (0x470), 
            BER4,   32
        }

        Field (CNVS, WordAcc, Lock, Preserve)
        {
            Offset (0x470), 
            BUF0,   16, 
            BER2,   16
        }
    }

    Scope (_SB.AMWA)
    {
        Field (RAM, ByteAcc, Lock, Preserve)
        {
            Offset (0x88), 
            NB0A,   1, 
            Offset (0x89), 
            NB1A,   1
        }

        Field (RAM, ByteAcc, Lock, Preserve)
        {
            Offset (0x17), 
            SMCS,   8, 
            SPTL,   8, 
            Offset (0x1A), 
            SADD,   8, 
            SCOM,   8, 
            SDTA,   16
        }

        Method (WMBE, 3, NotSerialized)
        {
            Store (0xBE, P80H)
            CreateDWordField (Arg2, Zero, CD04)
            CreateByteField (Arg2, Zero, CD01)
            CreateByteField (Arg2, 0x04, CD02)
            If (LEqual (Arg1, 0x13))
            {
                GBID (CD02)
                If (BER2)
                {
                    Return (CBE0)
                }

                If (LLess (CD01, 0x30))
                {
                    Decrement (CD02)
                    Store (CD02, SMCS)
                    Store (0x16, SADD)
                    Store (CD01, SCOM)
                    Store (0x09, SPTL)
                    Store (Zero, Local0)
                    Store (0x02, BER2)
                    While (LLess (Local0, 0x64))
                    {
                        If (LEqual (SPTL, Zero))
                        {
                            Store (Zero, BER2)
                            Store (SDTA, BUF0)
                            Break
                        }
                        Else
                        {
                            Sleep (One)
                            Increment (Local0)
                        }
                    }

                    Return (CBE0)
                }
            }

            Store (One, BER2)
            Return (CBE0)
        }

        Method (GBID, 1, NotSerialized)
        {
            Store (Zero, Local1)
            If (LEqual (Arg0, One))
            {
                If (NB0A)
                {
                    Store (Zero, Local0)
                }
                Else
                {
                    Store (0x02, Local1)
                }
            }
            ElseIf (LEqual (Arg0, 0x02))
            {
                If (NB1A)
                {
                    Store (0x10, Local0)
                }
                Else
                {
                    Store (0x02, Local1)
                }
            }
            Else
            {
                Store (0x02, Local1)
            }

            Store (Zero, BUF0)
            Store (Local1, BER2)
            Return (Local0)
        }
    }

    Scope (\)
    {
        OperationRegion (CMIO, SystemIO, 0x72, 0x02)
        Field (CMIO, ByteAcc, Lock, Preserve)
        {
            CINX,   8, 
            CDAT,   8
        }

        IndexField (CINX, CDAT, ByteAcc, NoLock, Preserve)
        {
            Offset (0x10), 
            CMX0,   32, 
            CMX1,   32, 
            CMX2,   32, 
            CMX3,   32, 
            CMX4,   32, 
            CMX5,   32, 
            CMX6,   32, 
            CMX7,   32
        }

        Method (WB15, 6, NotSerialized)
        {
            CreateDWordField (Arg0, Zero, OEAX)
            CreateDWordField (Arg0, 0x04, OEBX)
            CreateDWordField (Arg0, 0x08, OECX)
            CreateDWordField (Arg0, 0x0C, OEDX)
            CreateDWordField (Arg0, 0x10, OFLG)
            CreateDWordField (Arg0, 0x14, OESI)
            CreateDWordField (Arg0, 0x18, OEDI)
            Store (One, OFLG)
            ShiftRight (Arg1, 0x08, Local6)
            And (Local6, 0xFF, Local6)
            If (LEqual (Local6, Zero))
            {
                Store (CMX0, OECX)
                Store (CMX1, OEDX)
                Store (CMX2, OESI)
                Store (CMX3, OEDI)
                Store (Zero, OFLG)
                Return (Zero)
            }

            If (LEqual (Local6, 0x10))
            {
                Store (CMX4, OECX)
                Store (CMX5, OEDX)
                Store (CMX6, OESI)
                Store (CMX7, OEDI)
                Store (Zero, OFLG)
                Return (Zero)
            }

            If (LEqual (Local6, One))
            {
                Store (Arg2, CMX0)
                Store (Arg3, CMX1)
                Store (Arg4, CMX2)
                Store (Arg5, CMX3)
                Store (Zero, OFLG)
                Return (Zero)
            }

            If (LEqual (Local6, 0x11))
            {
                Store (Arg2, CMX4)
                Store (Arg3, CMX5)
                Store (Arg4, CMX6)
                Store (Arg5, CMX7)
                Store (Zero, OFLG)
                Return (Zero)
            }
        }
    }

    Scope (_SB.AMWA)
    {
        Name (WQEE, Buffer (0x1780)
        {
            /* 0000 */  0x46, 0x4F, 0x4D, 0x42, 0x01, 0x00, 0x00, 0x00,
            /* 0008 */  0x70, 0x17, 0x00, 0x00, 0xEC, 0x97, 0x00, 0x00,
            /* 0010 */  0x44, 0x53, 0x00, 0x01, 0x1A, 0x7D, 0xDA, 0x54,
            /* 0018 */  0x18, 0x3C, 0x88, 0x00, 0x01, 0x06, 0x18, 0x42,
            /* 0020 */  0x10, 0x15, 0x10, 0x22, 0x21, 0x04, 0x12, 0x01,
            /* 0028 */  0xA1, 0xC8, 0x2C, 0x0C, 0x86, 0x10, 0x38, 0x2E,
            /* 0030 */  0x84, 0x1C, 0x40, 0x48, 0x1C, 0x14, 0x4A, 0x08,
            /* 0038 */  0x84, 0xFA, 0x13, 0xC8, 0xAF, 0x00, 0x84, 0x0E,
            /* 0040 */  0x05, 0xC8, 0x14, 0x60, 0x50, 0x80, 0x53, 0x04,
            /* 0048 */  0x11, 0xF4, 0x2A, 0xC0, 0xA6, 0x00, 0x93, 0x02,
            /* 0050 */  0x2C, 0x0A, 0xD0, 0x2E, 0xC0, 0xB2, 0x00, 0xDD,
            /* 0058 */  0x02, 0xA4, 0xC3, 0x12, 0x91, 0xE0, 0x28, 0x31,
            /* 0060 */  0xE0, 0x28, 0x9D, 0xD8, 0xC2, 0x0D, 0x1B, 0xBC,
            /* 0068 */  0x50, 0x14, 0xCD, 0x20, 0x4A, 0x82, 0xCA, 0x05,
            /* 0070 */  0xF8, 0x46, 0x10, 0x78, 0xB9, 0x02, 0x24, 0x4F,
            /* 0078 */  0x40, 0x9A, 0x05, 0x18, 0x16, 0x60, 0x5D, 0x80,
            /* 0080 */  0xEC, 0x21, 0x50, 0xA9, 0x43, 0x40, 0xC9, 0x19,
            /* 0088 */  0x02, 0x6A, 0x00, 0xAD, 0x4E, 0x40, 0xF8, 0x95,
            /* 0090 */  0x4E, 0x09, 0x49, 0x10, 0xCE, 0x58, 0xC5, 0xE3,
            /* 0098 */  0x6B, 0x16, 0x4D, 0xCF, 0x49, 0xCE, 0x31, 0xE4,
            /* 00A0 */  0x78, 0x5C, 0xE8, 0x41, 0xF0, 0xA8, 0x12, 0x40,
            /* 00A8 */  0x98, 0xFC, 0x21, 0x2B, 0x1C, 0x0C, 0x4A, 0xC3,
            /* 00B0 */  0x58, 0xA8, 0x8B, 0x51, 0xA3, 0x46, 0xCA, 0x06,
            /* 00B8 */  0x64, 0x88, 0x92, 0xE0, 0x50, 0xA3, 0xB6, 0x44,
            /* 00C0 */  0x01, 0xE6, 0xC7, 0xA1, 0xD9, 0xB5, 0x3D, 0x16,
            /* 00C8 */  0x02, 0xC9, 0xA4, 0x0D, 0x05, 0x25, 0x05, 0x42,
            /* 00D0 */  0x63, 0x3B, 0x53, 0xCF, 0x28, 0xE2, 0x91, 0x1A,
            /* 00D8 */  0x26, 0x81, 0x47, 0x11, 0xD9, 0x68, 0x1C, 0x1A,
            /* 00E0 */  0x3B, 0x0C, 0x0F, 0x33, 0xD8, 0x41, 0x1C, 0xC6,
            /* 00E8 */  0x31, 0x47, 0x4E, 0xE0, 0x09, 0x1D, 0xE9, 0x91,
            /* 00F0 */  0x17, 0x36, 0x4F, 0xA1, 0xC6, 0x68, 0x0E, 0x8A,
            /* 00F8 */  0x08, 0x3E, 0x0A, 0xA0, 0xC7, 0x14, 0xF6, 0x68,
            /* 0100 */  0x63, 0x9F, 0xAF, 0x85, 0x0F, 0x56, 0x18, 0x47,
            /* 0108 */  0x70, 0x5C, 0x09, 0xFE, 0xFF, 0x27, 0x7E, 0x28,
            /* 0110 */  0x3D, 0xC2, 0x49, 0xD0, 0x14, 0x29, 0xC8, 0x51,
            /* 0118 */  0x63, 0x64, 0xE1, 0x48, 0xEB, 0xAC, 0xC8, 0xDC,
            /* 0120 */  0x0D, 0x6C, 0xA0, 0xCA, 0x04, 0xE8, 0x3A, 0x2F,
            /* 0128 */  0x90, 0xF1, 0x1C, 0x08, 0x46, 0x06, 0x84, 0x3C,
            /* 0130 */  0x9F, 0x0B, 0x34, 0x42, 0x13, 0xD8, 0xBD, 0x00,
            /* 0138 */  0x6D, 0x02, 0xBC, 0x41, 0x68, 0x1C, 0x11, 0x1A,
            /* 0140 */  0x13, 0x60, 0x6D, 0x12, 0xB2, 0x85, 0x43, 0xE6,
            /* 0148 */  0x15, 0x2B, 0x4A, 0x8C, 0x63, 0x3A, 0xB2, 0x1A,
            /* 0150 */  0x51, 0x84, 0x74, 0x0E, 0x6F, 0x06, 0x11, 0xA2,
            /* 0158 */  0xC4, 0x0C, 0x19, 0x31, 0x58, 0x90, 0xE3, 0x88,
            /* 0160 */  0xE1, 0x21, 0x1A, 0x2E, 0x52, 0xFB, 0x83, 0x20,
            /* 0168 */  0xF2, 0x1E, 0x13, 0x3A, 0x0F, 0x38, 0xD2, 0x68,
            /* 0170 */  0x50, 0x87, 0x05, 0x9F, 0x09, 0x3C, 0xB9, 0x67,
            /* 0178 */  0x04, 0x8F, 0xED, 0x9C, 0x83, 0x9C, 0xE7, 0xB1,
            /* 0180 */  0x3D, 0x42, 0x3C, 0x0C, 0x78, 0xD8, 0xEC, 0x96,
            /* 0188 */  0xE0, 0xB3, 0x85, 0x4F, 0x07, 0x78, 0xD7, 0x80,
            /* 0190 */  0xBA, 0x16, 0x3C, 0x14, 0xB0, 0x49, 0x86, 0xC3,
            /* 0198 */  0x0C, 0xD1, 0x63, 0x0D, 0x77, 0x02, 0x87, 0xC8,
            /* 01A0 */  0x00, 0x3D, 0xA4, 0xE7, 0x01, 0xEC, 0xDC, 0x4E,
            /* 01A8 */  0xE6, 0xD0, 0xDF, 0x27, 0x9A, 0xBD, 0x49, 0x10,
            /* 01B0 */  0x82, 0xE3, 0xF1, 0x25, 0x82, 0x4D, 0xF8, 0xD1,
            /* 01B8 */  0x81, 0x0C, 0x02, 0x35, 0x32, 0x43, 0x7B, 0xA8,
            /* 01C0 */  0xA7, 0xF5, 0x32, 0xE0, 0x63, 0x80, 0x09, 0x2C,
            /* 01C8 */  0x16, 0x42, 0x0A, 0x20, 0x34, 0x1E, 0xF0, 0x2B,
            /* 01D0 */  0x3E, 0x78, 0x90, 0x1B, 0x83, 0xE7, 0xEB, 0x33,
            /* 01D8 */  0x84, 0x4E, 0x16, 0x32, 0xB2, 0x0A, 0x8F, 0x87,
            /* 01E0 */  0x1E, 0x17, 0x7C, 0x47, 0xC0, 0x5C, 0x18, 0x3C,
            /* 01E8 */  0x74, 0x0F, 0xE9, 0xF9, 0xC0, 0x92, 0x0E, 0x19,
            /* 01F0 */  0xF4, 0xFF, 0x2F, 0x6A, 0xE4, 0xF4, 0x50, 0xC1,
            /* 01F8 */  0xCF, 0x13, 0x0C, 0x36, 0x68, 0x58, 0x0F, 0xE6,
            /* 0200 */  0x9C, 0xFC, 0x67, 0xF1, 0xD8, 0xE0, 0x03, 0xE2,
            /* 0208 */  0xBD, 0xCF, 0x9A, 0x8C, 0xE0, 0x64, 0x0D, 0xE8,
            /* 0210 */  0xC3, 0x03, 0xEE, 0x50, 0x01, 0x5E, 0x98, 0xC3,
            /* 0218 */  0xE2, 0xD7, 0x0A, 0xB8, 0x87, 0x05, 0x36, 0x4A,
            /* 0220 */  0x3E, 0x1A, 0x0F, 0xE1, 0x2C, 0x9E, 0x06, 0x0C,
            /* 0228 */  0x63, 0xF4, 0xA7, 0x00, 0xD8, 0x37, 0x0C, 0x8F,
            /* 0230 */  0xC5, 0x53, 0xF0, 0x49, 0x07, 0x1C, 0x83, 0xE3,
            /* 0238 */  0x57, 0x18, 0xDC, 0x49, 0x07, 0x78, 0xCC, 0xF5,
            /* 0240 */  0x49, 0x07, 0x6C, 0xE7, 0x03, 0x76, 0xCA, 0x81,
            /* 0248 */  0x25, 0xE1, 0x94, 0x84, 0x0A, 0x3D, 0x6E, 0xD4,
            /* 0250 */  0xFF, 0x9F, 0xC0, 0x81, 0x07, 0x4F, 0xE5, 0x0D,
            /* 0258 */  0x16, 0x14, 0x10, 0xC7, 0xF1, 0x76, 0xF0, 0x9A,
            /* 0260 */  0x04, 0xE3, 0x98, 0x04, 0xF0, 0xF1, 0x68, 0xC0,
            /* 0268 */  0x2E, 0x1D, 0x8F, 0x49, 0xF0, 0xFF, 0xFF, 0xC7,
            /* 0270 */  0x24, 0xB0, 0x1D, 0x07, 0xCE, 0xE8, 0x64, 0xDE,
            /* 0278 */  0x90, 0x22, 0x9C, 0xC3, 0x0B, 0xD2, 0x83, 0xD1,
            /* 0280 */  0xEB, 0xD1, 0x7B, 0xD2, 0x83, 0x92, 0xE7, 0xF5,
            /* 0288 */  0x98, 0x64, 0xAC, 0x20, 0xA1, 0xAC, 0xF0, 0x82,
            /* 0290 */  0x24, 0x67, 0xA8, 0x42, 0x09, 0xF1, 0xB8, 0xE4,
            /* 0298 */  0xDB, 0x82, 0x91, 0x8C, 0x7C, 0x26, 0x6F, 0x49,
            /* 02A0 */  0xC6, 0x7A, 0x4C, 0x02, 0x98, 0xF8, 0xFF, 0x3F,
            /* 02A8 */  0x26, 0x01, 0xCF, 0x43, 0x05, 0xDC, 0x63, 0x12,
            /* 02B0 */  0xE0, 0x64, 0x70, 0xEC, 0x7C, 0x09, 0xAC, 0x8E,
            /* 02B8 */  0x49, 0xC0, 0x25, 0xAA, 0x09, 0x10, 0x16, 0xE0,
            /* 02C0 */  0x8D, 0x20, 0x59, 0xEB, 0xA6, 0x30, 0x3E, 0xE5,
            /* 02C8 */  0x80, 0xE7, 0xFF, 0x7F, 0xCA, 0x01, 0x1C, 0xDC,
            /* 02D0 */  0x25, 0x7C, 0x6E, 0x03, 0x2B, 0xC6, 0xF3, 0x86,
            /* 02D8 */  0x45, 0x03, 0x6A, 0x04, 0xCF, 0x0F, 0xB0, 0x0F,
            /* 02E0 */  0x97, 0xF0, 0x2F, 0x94, 0xBE, 0xE4, 0x78, 0x52,
            /* 02E8 */  0x41, 0x0E, 0xE5, 0xF5, 0x26, 0x76, 0x98, 0xD7,
            /* 02F0 */  0x9C, 0xE7, 0x4A, 0x0F, 0xED, 0x21, 0x27, 0xC8,
            /* 02F8 */  0xFB, 0xCD, 0xC3, 0xA5, 0x91, 0x1E, 0x2B, 0x8D,
            /* 0300 */  0x62, 0x90, 0x33, 0x8B, 0x1A, 0x2D, 0x8A, 0xF1,
            /* 0308 */  0x82, 0x44, 0x8B, 0x78, 0x04, 0x8F, 0x39, 0x2C,
            /* 0310 */  0xD6, 0x81, 0x40, 0xFF, 0x28, 0x1F, 0x73, 0x00,
            /* 0318 */  0x47, 0xFF, 0xFF, 0x63, 0x0E, 0x70, 0x3F, 0xCC,
            /* 0320 */  0x81, 0xE3, 0xB4, 0xC0, 0x47, 0xC5, 0xAF, 0x0C,
            /* 0328 */  0xEC, 0x4C, 0x02, 0x4C, 0xA2, 0x3C, 0x3D, 0x34,
            /* 0330 */  0x4E, 0x6B, 0x7C, 0x0E, 0xC8, 0xC6, 0x49, 0x88,
            /* 0338 */  0x0E, 0xC2, 0x4A, 0xA8, 0x74, 0x62, 0x31, 0xE6,
            /* 0340 */  0x5B, 0x43, 0xDC, 0x67, 0x03, 0xCF, 0x07, 0x93,
            /* 0348 */  0xFE, 0xA0, 0xA0, 0xF3, 0x8F, 0xC1, 0x9D, 0x9B,
            /* 0350 */  0x44, 0xB9, 0x07, 0x44, 0xE1, 0x9D, 0xF4, 0x18,
            /* 0358 */  0x44, 0x41, 0x0C, 0xE8, 0x18, 0x10, 0xB2, 0x72,
            /* 0360 */  0x10, 0x40, 0x5F, 0x27, 0x7C, 0x64, 0xF0, 0x39,
            /* 0368 */  0x23, 0xCA, 0x19, 0xF9, 0x80, 0xF1, 0xB8, 0xC0,
            /* 0370 */  0x86, 0xE3, 0x83, 0x00, 0x3F, 0xA0, 0xF8, 0x66,
            /* 0378 */  0x60, 0x6C, 0xAB, 0x39, 0xEE, 0xA0, 0xC0, 0x0C,
            /* 0380 */  0xFF, 0x02, 0x63, 0x02, 0xDF, 0x33, 0xDE, 0x76,
            /* 0388 */  0xC0, 0x72, 0xC6, 0x78, 0x2C, 0xB1, 0xBE, 0xC3,
            /* 0390 */  0x00, 0x94, 0xFF, 0xFF, 0x61, 0x00, 0x0F, 0xE4,
            /* 0398 */  0xE9, 0xFB, 0x44, 0xF3, 0x08, 0xC0, 0xC6, 0xF0,
            /* 03A0 */  0x50, 0x63, 0x34, 0xA3, 0xF3, 0xF8, 0x73, 0x45,
            /* 03A8 */  0x5D, 0x1F, 0x3D, 0x57, 0x83, 0x78, 0xAE, 0x0E,
            /* 03B0 */  0x03, 0x21, 0x27, 0x73, 0x45, 0xDD, 0x5E, 0x3C,
            /* 03B8 */  0x22, 0xFB, 0x9C, 0x2A, 0x19, 0x2C, 0x27, 0x88,
            /* 03C0 */  0xF2, 0xAA, 0x01, 0xEB, 0x20, 0x10, 0x91, 0xCD,
            /* 03C8 */  0xC3, 0x77, 0x25, 0xFC, 0x6C, 0xF9, 0x60, 0x7C,
            /* 03D0 */  0x95, 0x80, 0x3F, 0x5C, 0x7E, 0x2A, 0x79, 0x37,
            /* 03D8 */  0x49, 0x60, 0x81, 0xD3, 0x05, 0x39, 0x3C, 0x46,
            /* 03E0 */  0xD0, 0x7A, 0x64, 0xE1, 0x2E, 0x45, 0xC7, 0xC5,
            /* 03E8 */  0x6F, 0x07, 0xBE, 0xF1, 0xB0, 0x3B, 0x0D, 0xEE,
            /* 03F0 */  0x22, 0x86, 0x81, 0xF5, 0x48, 0x39, 0xAC, 0xD1,
            /* 03F8 */  0xC2, 0x1E, 0xF0, 0x1B, 0x87, 0x8F, 0x2B, 0x9E,
            /* 0400 */  0x99, 0x31, 0xC2, 0xFA, 0x9E, 0x02, 0x8E, 0x3B,
            /* 0408 */  0x19, 0xFC, 0x00, 0x57, 0x20, 0x10, 0xFE, 0xFF,
            /* 0410 */  0xAF, 0x40, 0xFC, 0xAC, 0xC1, 0xAE, 0x64, 0x06,
            /* 0418 */  0x79, 0x51, 0xF2, 0xB9, 0xC6, 0xE8, 0x81, 0xDE,
            /* 0420 */  0x37, 0xF0, 0x37, 0x21, 0xD8, 0x37, 0x10, 0x38,
            /* 0428 */  0x43, 0xF1, 0x0D, 0x04, 0x38, 0x1C, 0x23, 0x70,
            /* 0430 */  0x37, 0x10, 0x60, 0x7D, 0x87, 0x60, 0x37, 0x10,
            /* 0438 */  0x60, 0x79, 0x7A, 0xC1, 0xDD, 0x40, 0x80, 0xDB,
            /* 0440 */  0xFF, 0xFF, 0xFE, 0x02, 0xA6, 0x1B, 0x08, 0x30,
            /* 0448 */  0x1F, 0xB5, 0x6F, 0x20, 0x80, 0xA5, 0xB3, 0x06,
            /* 0450 */  0xBB, 0x81, 0x80, 0x3F, 0xA2, 0x8F, 0xF1, 0xB0,
            /* 0458 */  0x18, 0x43, 0x97, 0xB4, 0x85, 0x53, 0x18, 0x9F,
            /* 0460 */  0x12, 0x81, 0xD3, 0xFF, 0xFF, 0x94, 0x08, 0xBC,
            /* 0468 */  0xCE, 0x15, 0x3E, 0x01, 0x80, 0xED, 0x32, 0xCA,
            /* 0470 */  0x86, 0xFE, 0x6E, 0xE0, 0x8B, 0x22, 0x18, 0x0F,
            /* 0478 */  0x8A, 0xB0, 0x47, 0xF5, 0x42, 0x10, 0x22, 0xE8,
            /* 0480 */  0x1B, 0xB5, 0x27, 0xF6, 0x52, 0xF1, 0x82, 0x18,
            /* 0488 */  0xE4, 0xE9, 0xF0, 0xDC, 0x22, 0x3D, 0x28, 0x1A,
            /* 0490 */  0x29, 0xCC, 0x83, 0xA2, 0x11, 0xC3, 0xF8, 0xA0,
            /* 0498 */  0xE8, 0x73, 0xA2, 0xE1, 0xDE, 0xAE, 0x7D, 0xDE,
            /* 04A0 */  0x88, 0x14, 0x3E, 0xB6, 0x6F, 0x1A, 0x11, 0x1E,
            /* 04A8 */  0x14, 0x59, 0xA8, 0x83, 0x22, 0xA0, 0xF2, 0xFF,
            /* 04B0 */  0x7F, 0x50, 0x04, 0x6E, 0x47, 0x61, 0x70, 0x5C,
            /* 04B8 */  0x97, 0xF9, 0x0C, 0xCE, 0x25, 0xB6, 0x07, 0xF8,
            /* 04C0 */  0x9C, 0x08, 0x4C, 0xE4, 0xAF, 0x50, 0xC3, 0x74,
            /* 04C8 */  0x9E, 0xB7, 0x8C, 0x6E, 0x55, 0x9C, 0xC3, 0xCA,
            /* 04D0 */  0xDF, 0x07, 0x3A, 0x6C, 0xB1, 0xE3, 0xC2, 0x09,
            /* 04D8 */  0xBE, 0x05, 0x9D, 0x92, 0x71, 0x3C, 0x6A, 0x0F,
            /* 04E0 */  0xDF, 0x23, 0xB2, 0x52, 0x48, 0xDD, 0xAB, 0xB8,
            /* 04E8 */  0x46, 0x18, 0x29, 0x7C, 0x1E, 0xE8, 0x70, 0xC4,
            /* 04F0 */  0x35, 0xC1, 0x08, 0xCE, 0x20, 0x3E, 0x95, 0x38,
            /* 04F8 */  0x09, 0x84, 0x8C, 0x9C, 0x04, 0x50, 0xA3, 0xF3,
            /* 0500 */  0x65, 0x05, 0x3F, 0xBE, 0x40, 0x8F, 0x0C, 0x09,
            /* 0508 */  0x4E, 0xEC, 0xCD, 0x0A, 0xBC, 0x17, 0x6D, 0x70,
            /* 0510 */  0x05, 0x99, 0x14, 0x5A, 0xCB, 0xE5, 0x9D, 0x0C,
            /* 0518 */  0xCA, 0x47, 0x89, 0x97, 0x10, 0x1C, 0xC1, 0xFF,
            /* 0520 */  0xFF, 0xA0, 0xC0, 0x7A, 0xCC, 0xE3, 0x83, 0x02,
            /* 0528 */  0xCF, 0x01, 0xCD, 0x83, 0xC2, 0x29, 0xB9, 0x08,
            /* 0530 */  0xF8, 0xD2, 0x42, 0xEE, 0x28, 0x3E, 0x52, 0x78,
            /* 0538 */  0x4C, 0x60, 0xBE, 0x37, 0xF1, 0x31, 0x81, 0x27,
            /* 0540 */  0xC5, 0x98, 0xD0, 0x57, 0x1F, 0x76, 0xA3, 0x60,
            /* 0548 */  0xC7, 0x8A, 0x67, 0x28, 0x4F, 0x09, 0xBC, 0x48,
            /* 0550 */  0x9E, 0x12, 0xB8, 0x42, 0x4D, 0xC9, 0xC7, 0x0A,
            /* 0558 */  0x3A, 0x6B, 0x7E, 0x33, 0xE0, 0x93, 0xE2, 0x04,
            /* 0560 */  0x13, 0x40, 0xE8, 0x2E, 0xE3, 0x31, 0xC1, 0xBB,
            /* 0568 */  0xF5, 0xC3, 0xBB, 0x61, 0x79, 0x68, 0xB0, 0xE6,
            /* 0570 */  0xE0, 0xA1, 0xF1, 0xFF, 0xFF, 0xD0, 0xC0, 0x71,
            /* 0578 */  0xD9, 0x03, 0x16, 0xAF, 0x07, 0x5F, 0x40, 0x78,
            /* 0580 */  0xE4, 0x13, 0x04, 0x05, 0xF1, 0x01, 0xC1, 0x71,
            /* 0588 */  0xCE, 0x8E, 0xBE, 0x80, 0xA0, 0x0F, 0x0E, 0x1E,
            /* 0590 */  0xD0, 0x43, 0x93, 0x87, 0x74, 0x2A, 0xEF, 0x16,
            /* 0598 */  0xBE, 0xDB, 0xB0, 0xDB, 0x1E, 0xB8, 0x6F, 0x73,
            /* 05A0 */  0xBE, 0xED, 0x81, 0xE7, 0xBC, 0xE4, 0xDB, 0x1E,
            /* 05A8 */  0x70, 0x11, 0x73, 0x7E, 0x05, 0xA4, 0xFC, 0xFF,
            /* 05B0 */  0x6F, 0x7B, 0x98, 0xFB, 0xD9, 0xF3, 0x2B, 0x30,
            /* 05B8 */  0x38, 0x5D, 0xB0, 0xC3, 0x1E, 0xD8, 0xB2, 0x3E,
            /* 05C0 */  0x2B, 0x74, 0x2F, 0xC2, 0xA5, 0x5A, 0xB9, 0x8E,
            /* 05C8 */  0x80, 0xEC, 0x5E, 0x04, 0x33, 0x05, 0xA4, 0xEE,
            /* 05D0 */  0x45, 0x5C, 0x3F, 0x8C, 0xF4, 0xDD, 0x8B, 0x50,
            /* 05D8 */  0x8A, 0xEE, 0x45, 0x14, 0xC4, 0xF7, 0x22, 0x80,
            /* 05E0 */  0x21, 0xFF, 0xFF, 0x7B, 0x11, 0xE0, 0x23, 0xC4,
            /* 05E8 */  0x98, 0xD0, 0x3A, 0x80, 0xC9, 0xB9, 0xE0, 0x84,
            /* 05F0 */  0x9E, 0x8B, 0x80, 0x6D, 0xA6, 0x73, 0x11, 0x1A,
            /* 05F8 */  0xD8, 0x27, 0x03, 0x3E, 0x28, 0x76, 0x2D, 0x02,
            /* 0600 */  0xF3, 0x25, 0xC6, 0xD7, 0x22, 0xC0, 0xC3, 0xFF,
            /* 0608 */  0x9F, 0xC0, 0xF2, 0x5E, 0x06, 0xBA, 0x7F, 0x70,
            /* 0610 */  0x41, 0x30, 0x3A, 0x40, 0x18, 0xC4, 0x73, 0xF2,
            /* 0618 */  0xB5, 0x08, 0x70, 0x13, 0x65, 0x5C, 0xE8, 0x2B,
            /* 0620 */  0x1A, 0x9C, 0x51, 0x81, 0xFB, 0x58, 0xE0, 0x51,
            /* 0628 */  0x81, 0xEF, 0x94, 0x86, 0xBF, 0x0A, 0xF9, 0x8C,
            /* 0630 */  0x86, 0x39, 0x68, 0xB0, 0x63, 0x80, 0x07, 0x05,
            /* 0638 */  0xAE, 0x4B, 0x1A, 0x6E, 0x6C, 0xF0, 0x3C, 0x5C,
            /* 0640 */  0x1F, 0x40, 0x77, 0xCB, 0xE2, 0xFF, 0xFF, 0x5B,
            /* 0648 */  0x16, 0xF0, 0x3D, 0xA3, 0x03, 0xDF, 0x5B, 0x16,
            /* 0650 */  0x98, 0xCF, 0xE8, 0x98, 0x5B, 0x16, 0x38, 0x25,
            /* 0658 */  0x3F, 0x0A, 0x7C, 0x76, 0xA6, 0x72, 0x97, 0x4D,
            /* 0660 */  0x61, 0x7C, 0x42, 0x07, 0x7C, 0xFC, 0xFF, 0x4F,
            /* 0668 */  0xE8, 0x70, 0x8F, 0x4D, 0x1E, 0x3F, 0x38, 0x4E,
            /* 0670 */  0x0F, 0x67, 0x70, 0x0A, 0xD1, 0x5E, 0xF5, 0x3D,
            /* 0678 */  0xF1, 0xB7, 0x27, 0x0F, 0x29, 0x4A, 0xC0, 0x78,
            /* 0680 */  0x31, 0xE2, 0x86, 0xF4, 0xA9, 0xDA, 0xD7, 0x66,
            /* 0688 */  0x03, 0xC5, 0x3B, 0xAC, 0xB0, 0x71, 0x5E, 0x03,
            /* 0690 */  0x7C, 0x78, 0x7E, 0x0D, 0xF0, 0xD9, 0xC0, 0x40,
            /* 0698 */  0x67, 0xFA, 0xD4, 0x0F, 0xFB, 0xA0, 0x0E, 0xDB,
            /* 06A0 */  0xDB, 0xE4, 0x04, 0x11, 0x21, 0xF0, 0x8B, 0xC5,
            /* 06A8 */  0x39, 0xB5, 0x76, 0x41, 0xD7, 0x08, 0x0F, 0xF1,
            /* 06B0 */  0x01, 0xEE, 0xAD, 0xE4, 0x41, 0xDD, 0x43, 0x79,
            /* 06B8 */  0x7A, 0x8A, 0x1A, 0xE5, 0x14, 0xC2, 0xBC, 0xA2,
            /* 06C0 */  0x07, 0x8C, 0xF2, 0x6C, 0x12, 0x2D, 0x6A, 0xE0,
            /* 06C8 */  0x97, 0x84, 0xD8, 0x06, 0x0D, 0xF4, 0x9E, 0xEE,
            /* 06D0 */  0x11, 0x3C, 0xA8, 0xB3, 0x68, 0x07, 0x75, 0x40,
            /* 06D8 */  0xF5, 0xFF, 0xFF, 0xA0, 0x0E, 0xEE, 0xEB, 0x8C,
            /* 06E0 */  0x4F, 0x30, 0xF0, 0xCF, 0x01, 0x4F, 0x0A, 0xB8,
            /* 06E8 */  0xBB, 0x93, 0xEF, 0x0C, 0x18, 0x02, 0x9F, 0xD5,
            /* 06F0 */  0x81, 0x47, 0xF4, 0xDB, 0x22, 0x8D, 0x0D, 0xA2,
            /* 06F8 */  0x3B, 0x24, 0x3F, 0xCA, 0x38, 0xE4, 0x72, 0x75,
            /* 0700 */  0x87, 0xE4, 0x53, 0x62, 0x17, 0x04, 0xC3, 0x1F,
            /* 0708 */  0x42, 0x10, 0x0F, 0x8B, 0x4D, 0xC1, 0x67, 0x04,
            /* 0710 */  0x13, 0x38, 0xCE, 0x81, 0x8B, 0x0E, 0xDE, 0x41,
            /* 0718 */  0x28, 0x14, 0xE5, 0x76, 0x8B, 0x12, 0x0F, 0x23,
            /* 0720 */  0x38, 0x83, 0xF8, 0xA8, 0xE0, 0x40, 0x10, 0x72,
            /* 0728 */  0x72, 0x1E, 0x40, 0x9D, 0x4F, 0x3C, 0xA9, 0x93,
            /* 0730 */  0xC5, 0xCE, 0x05, 0x37, 0x3B, 0x1F, 0x6A, 0x7C,
            /* 0738 */  0xE8, 0x79, 0x93, 0x04, 0xEF, 0x9D, 0xE3, 0x45,
            /* 0740 */  0x09, 0x2C, 0x37, 0x8D, 0x57, 0x8E, 0xD7, 0x4D,
            /* 0748 */  0x36, 0x30, 0xDC, 0x51, 0xD2, 0x03, 0xC3, 0xFF,
            /* 0750 */  0xFF, 0x8F, 0x02, 0xC7, 0x75, 0x52, 0xE0, 0x1D,
            /* 0758 */  0xB3, 0x27, 0x05, 0xB6, 0xC3, 0x1D, 0xB0, 0x08,
            /* 0760 */  0x8F, 0x4E, 0x61, 0x1C, 0x77, 0x48, 0x14, 0xC4,
            /* 0768 */  0xA7, 0x03, 0x9F, 0xDA, 0x3C, 0x5A, 0xDC, 0x4C,
            /* 0770 */  0x3C, 0xA2, 0x97, 0x3B, 0xDC, 0xA9, 0x0D, 0xEC,
            /* 0778 */  0x23, 0xF1, 0xA9, 0x0D, 0x3C, 0xA3, 0x65, 0x67,
            /* 0780 */  0x31, 0x60, 0x22, 0xE4, 0x2C, 0x06, 0xBA, 0x21,
            /* 0788 */  0xFB, 0x2C, 0x06, 0xFF, 0xFF, 0x7F, 0x16, 0x03,
            /* 0790 */  0x2E, 0xC7, 0x00, 0x1F, 0x9E, 0xC0, 0x71, 0x0D,
            /* 0798 */  0xE3, 0x07, 0x26, 0x2C, 0xD0, 0xB3, 0x07, 0xC7,
            /* 07A0 */  0x79, 0x72, 0x32, 0x30, 0x07, 0x63, 0x57, 0x13,
            /* 07A8 */  0xEC, 0x6D, 0xC2, 0x04, 0x95, 0xF9, 0x19, 0x0B,
            /* 07B0 */  0x8B, 0x31, 0x6C, 0x09, 0x5C, 0x34, 0x85, 0xF1,
            /* 07B8 */  0x49, 0x0C, 0x70, 0x35, 0x7A, 0xF0, 0x9C, 0xC4,
            /* 07C0 */  0x60, 0xCD, 0x9D, 0x21, 0x19, 0xD5, 0x88, 0xEF,
            /* 07C8 */  0x04, 0xBE, 0x82, 0xC1, 0x3E, 0x82, 0xE1, 0xFF,
            /* 07D0 */  0xFF, 0x47, 0x30, 0xEC, 0xA1, 0xEB, 0x6D, 0xE2,
            /* 07D8 */  0xB5, 0xEB, 0x88, 0x9E, 0x5C, 0x22, 0xC4, 0x78,
            /* 07E0 */  0xA5, 0x78, 0xF5, 0x7A, 0xC2, 0x38, 0xB5, 0x48,
            /* 07E8 */  0x07, 0xF7, 0x08, 0xE6, 0x01, 0xBC, 0x86, 0xBD,
            /* 07F0 */  0x7A, 0x3D, 0x82, 0xF9, 0xF4, 0x15, 0xEB, 0x11,
            /* 07F8 */  0xCC, 0x40, 0x41, 0x23, 0x06, 0x0D, 0x14, 0xEF,
            /* 0800 */  0x61, 0xCC, 0x03, 0x88, 0x13, 0x24, 0xF0, 0x23,
            /* 0808 */  0x18, 0xC0, 0x28, 0xAB, 0x17, 0x05, 0xE4, 0x95,
            /* 0810 */  0x12, 0x7F, 0x04, 0x03, 0xF3, 0xFF, 0xFF, 0x08,
            /* 0818 */  0x86, 0xCF, 0xEB, 0xE6, 0x24, 0xC3, 0xF4, 0x50,
            /* 0820 */  0xE8, 0x08, 0xC6, 0x8F, 0x04, 0x56, 0xF0, 0x44,
            /* 0828 */  0x10, 0xFE, 0x7B, 0x4C, 0xE0, 0xB3, 0x79, 0x24,
            /* 0830 */  0x38, 0x86, 0x67, 0x0A, 0x76, 0x61, 0x79, 0xA0,
            /* 0838 */  0xF0, 0x74, 0x9D, 0xF9, 0x40, 0x46, 0x07, 0xEE,
            /* 0840 */  0xB4, 0x30, 0x52, 0x75, 0x8A, 0x46, 0xE9, 0x38,
            /* 0848 */  0x85, 0x51, 0x10, 0x1F, 0x1A, 0x7C, 0x3C, 0xC6,
            /* 0850 */  0x0F, 0xCE, 0x93, 0xC0, 0x1F, 0x90, 0xF9, 0xD9,
            /* 0858 */  0x0B, 0x18, 0x5E, 0x8F, 0xD9, 0xF1, 0x18, 0x3F,
            /* 0860 */  0x30, 0xCF, 0x14, 0xC6, 0x65, 0x1D, 0xBC, 0x37,
            /* 0868 */  0x07, 0x9F, 0xC0, 0x60, 0x1E, 0x8F, 0xC1, 0x75,
            /* 0870 */  0x2A, 0xC5, 0x1D, 0x2D, 0xF8, 0x2D, 0xD0, 0xE7,
            /* 0878 */  0x8F, 0xA7, 0x1F, 0x9F, 0xE4, 0x3C, 0x7A, 0xB0,
            /* 0880 */  0xFD, 0xFF, 0xA7, 0x84, 0xB9, 0x1E, 0x78, 0xF4,
            /* 0888 */  0xF0, 0x6F, 0x1F, 0xD8, 0x3B, 0x1A, 0xB0, 0x88,
            /* 0890 */  0x75, 0x11, 0x44, 0x05, 0xB9, 0x08, 0x52, 0x10,
            /* 0898 */  0x4F, 0xCC, 0xF7, 0x79, 0xDF, 0xD1, 0x70, 0xF7,
            /* 08A0 */  0x79, 0xE0, 0x05, 0xE5, 0x5B, 0x1A, 0xF8, 0x62,
            /* 08A8 */  0x8D, 0x0B, 0x2D, 0xEA, 0xF2, 0x00, 0x65, 0x02,
            /* 08B0 */  0x61, 0x4E, 0x24, 0xF8, 0x93, 0x48, 0x84, 0x87,
            /* 08B8 */  0x22, 0x5F, 0xC6, 0xD8, 0xD8, 0xC0, 0x7E, 0xA0,
            /* 08C0 */  0xF0, 0x85, 0x0E, 0x98, 0xFC, 0xFF, 0x2F, 0x74,
            /* 08C8 */  0x60, 0x13, 0x71, 0xA1, 0x03, 0xDD, 0x3D, 0x83,
            /* 08D0 */  0x5F, 0xE8, 0x80, 0xE7, 0x75, 0xC3, 0x77, 0x30,
            /* 08D8 */  0xB0, 0x5C, 0x71, 0xF8, 0x1D, 0x8C, 0xDF, 0xC0,
            /* 08E0 */  0x0C, 0x12, 0x26, 0x66, 0x18, 0x1F, 0xD5, 0x8C,
            /* 08E8 */  0xF3, 0x1C, 0xC6, 0x90, 0x9E, 0x12, 0xB0, 0x27,
            /* 08F0 */  0x0F, 0xE7, 0xBB, 0xF7, 0xA0, 0x86, 0xE2, 0x4C,
            /* 08F8 */  0xAF, 0x02, 0x4D, 0xFD, 0x7C, 0x7D, 0x7A, 0x81,
            /* 0900 */  0x91, 0x03, 0x4E, 0xD7, 0x1E, 0x9E, 0x00, 0x46,
            /* 0908 */  0xFA, 0x97, 0xAF, 0xC3, 0x06, 0x57, 0x7C, 0xFB,
            /* 0910 */  0xA1, 0x20, 0xBE, 0x92, 0x38, 0xCD, 0xB5, 0x07,
            /* 0918 */  0xAD, 0x07, 0x44, 0x3E, 0xC7, 0xAE, 0x21, 0x3C,
            /* 0920 */  0xF8, 0x00, 0xAF, 0xFF, 0xFF, 0xC1, 0x07, 0x3C,
            /* 0928 */  0xB9, 0x0E, 0x3E, 0xE8, 0xC1, 0x78, 0x5A, 0xB0,
            /* 0930 */  0x6E, 0x3E, 0x80, 0x83, 0x23, 0x00, 0x9C, 0x2B,
            /* 0938 */  0xD7, 0xC9, 0x1F, 0xD9, 0x23, 0x00, 0xB0, 0x39,
            /* 0940 */  0xFD, 0x80, 0xE3, 0x08, 0x00, 0x86, 0x69, 0xC1,
            /* 0948 */  0x3A, 0x02, 0x00, 0x27, 0x24, 0x1F, 0x01, 0xB0,
            /* 0950 */  0xFF, 0xFF, 0xBB, 0x14, 0xF0, 0x1E, 0xA6, 0xEF,
            /* 0958 */  0x52, 0xC0, 0xF9, 0x0B, 0xE1, 0xFB, 0x08, 0x8F,
            /* 0960 */  0x7C, 0x8D, 0xA0, 0x20, 0xBE, 0x22, 0xF8, 0x2E,
            /* 0968 */  0x05, 0x3C, 0x2F, 0x40, 0xBE, 0x20, 0x01, 0x6F,
            /* 0970 */  0x09, 0x17, 0x24, 0xF4, 0xFF, 0xFF, 0x82, 0x04,
            /* 0978 */  0x7F, 0xD8, 0xBE, 0x20, 0x01, 0x57, 0x54, 0x5F,
            /* 0980 */  0x90, 0xC0, 0x71, 0x17, 0x62, 0xF7, 0x23, 0xB0,
            /* 0988 */  0x6A, 0xFD, 0x51, 0xE8, 0x7E, 0xC4, 0x39, 0xAC,
            /* 0990 */  0x74, 0xD1, 0x3A, 0x55, 0xB3, 0x0B, 0xEE, 0x71,
            /* 0998 */  0xBE, 0xE5, 0xBC, 0x03, 0x18, 0xC7, 0x73, 0xF1,
            /* 09A0 */  0x79, 0xC2, 0xF8, 0xCF, 0xD2, 0x82, 0xD4, 0x0D,
            /* 09A8 */  0x89, 0x6B, 0x82, 0x91, 0xB6, 0x83, 0x26, 0x4A,
            /* 09B0 */  0xCD, 0x41, 0x93, 0x82, 0xF8, 0xA0, 0x09, 0xF8,
            /* 09B8 */  0xFA, 0xFF, 0x5F, 0x8F, 0x00, 0x1F, 0x61, 0xC6,
            /* 09C0 */  0x8F, 0x9E, 0x8C, 0xEF, 0x04, 0xF8, 0xF3, 0xB3,
            /* 09C8 */  0x8F, 0x24, 0x3E, 0x82, 0x3F, 0x1E, 0x01, 0xD3,
            /* 09D0 */  0xFB, 0x0C, 0xB0, 0x88, 0x7D, 0x7B, 0x40, 0x05,
            /* 09D8 */  0xBD, 0x3D, 0x50, 0x10, 0x5F, 0x4A, 0x7C, 0xD6,
            /* 09E0 */  0x04, 0xD6, 0xFF, 0xFF, 0xFB, 0x0C, 0x58, 0x2E,
            /* 09E8 */  0x19, 0xF8, 0xDB, 0x3F, 0xBB, 0x3F, 0x3C, 0xA0,
            /* 09F0 */  0xFB, 0x8A, 0xC1, 0x4F, 0x99, 0xC0, 0xF3, 0x50,
            /* 09F8 */  0xC0, 0x2E, 0x19, 0x30, 0x4E, 0x14, 0x1E, 0x15,
            /* 0A00 */  0x27, 0x70, 0x88, 0x61, 0xD0, 0x41, 0x81, 0xEB,
            /* 0A08 */  0x90, 0xC1, 0x69, 0x7C, 0x3F, 0x82, 0x7B, 0xC9,
            /* 0A10 */  0x00, 0x57, 0xB0, 0xA1, 0xA1, 0xA5, 0x1C, 0x13,
            /* 0A18 */  0xE8, 0xF1, 0x86, 0x9D, 0xE3, 0x7D, 0xEF, 0x61,
            /* 0A20 */  0x83, 0x03, 0xF7, 0x21, 0xC3, 0x83, 0x83, 0x77,
            /* 0A28 */  0xDB, 0xF0, 0xE0, 0x60, 0xFE, 0xFF, 0x07, 0x07,
            /* 0A30 */  0xE3, 0x2A, 0x05, 0x3C, 0x82, 0x8F, 0x1D, 0x75,
            /* 0A38 */  0x95, 0x02, 0xC7, 0xB9, 0x8E, 0x5F, 0xA5, 0x80,
            /* 0A40 */  0xE7, 0x00, 0x5F, 0xA5, 0xC0, 0x72, 0x6D, 0x62,
            /* 0A48 */  0x73, 0x78, 0x6E, 0xE2, 0x57, 0x29, 0x1F, 0x6A,
            /* 0A50 */  0xB0, 0x57, 0x18, 0x5F, 0x6F, 0x74, 0x6A, 0x45,
            /* 0A58 */  0x71, 0x38, 0xCA, 0xA9, 0x15, 0x71, 0x8B, 0x82,
            /* 0A60 */  0x29, 0xFD, 0xDC, 0x8A, 0x12, 0x0D, 0x23, 0xC9,
            /* 0A68 */  0xE7, 0x56, 0x94, 0xC8, 0x73, 0x2B, 0x05, 0xF1,
            /* 0A70 */  0x09, 0xC1, 0xB7, 0x28, 0x60, 0xF5, 0xFF, 0xBF,
            /* 0A78 */  0x45, 0x01, 0x96, 0x0F, 0xAD, 0x70, 0x00, 0x1F,
            /* 0A80 */  0xA3, 0x00, 0x07, 0x17, 0x51, 0x5F, 0x83, 0xE0,
            /* 0A88 */  0x8F, 0x09, 0xAC, 0x48, 0x1E, 0x13, 0x18, 0xFE,
            /* 0A90 */  0xFF, 0x63, 0xC2, 0x05, 0xBA, 0x23, 0xA0, 0x55,
            /* 0A98 */  0x5C, 0x82, 0x90, 0x37, 0x04, 0xF0, 0xD2, 0xF8,
            /* 0AA0 */  0xC4, 0x0A, 0xF3, 0x86, 0x00, 0xAE, 0x0B, 0x2B,
            /* 0AA8 */  0xC0, 0xA2, 0x63, 0x11, 0xF6, 0xFF, 0x7F, 0x2C,
            /* 0AB0 */  0x02, 0xC3, 0xCD, 0x80, 0x1F, 0x8B, 0x00, 0x1F,
            /* 0AB8 */  0x17, 0x56, 0x7E, 0x2C, 0x82, 0x2F, 0xE3, 0x58,
            /* 0AC0 */  0x84, 0x96, 0x71, 0x2C, 0x42, 0x88, 0x1C, 0x87,
            /* 0AC8 */  0x10, 0x1E, 0x6E, 0x60, 0x1C, 0x0D, 0x75, 0x1E,
            /* 0AD0 */  0xA2, 0xA7, 0x06, 0x07, 0x86, 0x51, 0xDC, 0xE3,
            /* 0AD8 */  0x21, 0x2A, 0xE0, 0xF1, 0x90, 0x82, 0xF8, 0x08,
            /* 0AE0 */  0xE0, 0x20, 0x17, 0x14, 0xF4, 0x41, 0xCD, 0x83,
            /* 0AE8 */  0x7A, 0xA5, 0x65, 0xE7, 0x0F, 0x0F, 0x8E, 0x9F,
            /* 0AF0 */  0x8A, 0x80, 0xE7, 0x45, 0x1E, 0xCE, 0x54, 0xE1,
            /* 0AF8 */  0x9D, 0x52, 0xFE, 0xFF, 0xAF, 0x45, 0xC0, 0xFF,
            /* 0B00 */  0x96, 0x05, 0x0C, 0x4F, 0x45, 0x60, 0xBC, 0x65,
            /* 0B08 */  0xC1, 0xB9, 0x1C, 0xC2, 0x18, 0x3F, 0x78, 0x67,
            /* 0B10 */  0xE6, 0xCB, 0x11, 0xCC, 0x43, 0x0F, 0xF0, 0xFD,
            /* 0B18 */  0xFF, 0x1F, 0x7A, 0x00, 0x0B, 0x07, 0x56, 0x70,
            /* 0B20 */  0x1D, 0x7A, 0x80, 0x4F, 0xEC, 0x43, 0x0F, 0xE8,
            /* 0B28 */  0x60, 0xF9, 0xA1, 0x07, 0x78, 0xCE, 0xF1, 0xA1,
            /* 0B30 */  0x07, 0x6C, 0x67, 0x15, 0x76, 0xDD, 0x87, 0x15,
            /* 0B38 */  0xC0, 0xDB, 0x10, 0x58, 0x98, 0x97, 0x82, 0x24,
            /* 0B40 */  0xAE, 0x95, 0xFC, 0xFF, 0x61, 0xD8, 0x89, 0xC2,
            /* 0B48 */  0xC7, 0x03, 0xFC, 0x80, 0x8F, 0xF7, 0x30, 0x8F,
            /* 0B50 */  0x88, 0x49, 0x82, 0x43, 0x9D, 0x05, 0x3C, 0x87,
            /* 0B58 */  0xE6, 0x47, 0xA3, 0x81, 0x9C, 0xB8, 0xA7, 0x14,
            /* 0B60 */  0x92, 0x49, 0x1B, 0x1A, 0xEA, 0xC4, 0xE3, 0x01,
            /* 0B68 */  0x9D, 0xCD, 0xE9, 0xBC, 0x7B, 0x44, 0x7C, 0x71,
            /* 0B70 */  0x30, 0x4C, 0x02, 0x9F, 0x02, 0xD8, 0xA5, 0x20,
            /* 0B78 */  0x1A, 0x83, 0xC6, 0x0E, 0xC3, 0x63, 0x0D, 0x76,
            /* 0B80 */  0x10, 0x87, 0xF1, 0x0A, 0x60, 0x02, 0x4F, 0xE8,
            /* 0B88 */  0x2C, 0xCB, 0xBD, 0x36, 0xE8, 0x52, 0x18, 0x35,
            /* 0B90 */  0x46, 0x73, 0x50, 0x44, 0xFE, 0xA0, 0x41, 0x73,
            /* 0B98 */  0x64, 0x38, 0x83, 0x13, 0x66, 0x63, 0x7E, 0x7E,
            /* 0BA0 */  0x78, 0x3E, 0xF1, 0x90, 0xA2, 0xD4, 0x3C, 0x67,
            /* 0BA8 */  0x72, 0x7B, 0x82, 0x7B, 0x4E, 0x08, 0x55, 0xEB,
            /* 0BB0 */  0xE4, 0x08, 0xCC, 0x31, 0x30, 0xA0, 0x97, 0x89,
            /* 0BB8 */  0xF3, 0x7F, 0x19, 0xF1, 0x24, 0x8E, 0x07, 0x73,
            /* 0BC0 */  0x36, 0x30, 0xF0, 0x5B, 0x85, 0xCF, 0x08, 0xCC,
            /* 0BC8 */  0xBD, 0x00, 0x8D, 0x02, 0xFE, 0x01, 0xAD, 0x61,
            /* 0BD0 */  0x08, 0xE2, 0x0D, 0x26, 0x82, 0x6D, 0xCD, 0x44,
            /* 0BD8 */  0xD8, 0x21, 0x5E, 0x2E, 0xA2, 0x1C, 0xE0, 0x31,
            /* 0BE0 */  0x05, 0x8B, 0x1A, 0xE5, 0x95, 0xE2, 0x10, 0x1F,
            /* 0BE8 */  0x65, 0xCE, 0x2B, 0x4A, 0xDC, 0x58, 0x01, 0x23,
            /* 0BF0 */  0x44, 0x0E, 0x7B, 0x22, 0xAF, 0x15, 0xC1, 0x0D,
            /* 0BF8 */  0x1B, 0xAB, 0xFD, 0x41, 0x90, 0x58, 0xC7, 0x02,
            /* 0C00 */  0x1D, 0x3B, 0x1C, 0x69, 0x34, 0xA8, 0x4B, 0x3F,
            /* 0C08 */  0xBF, 0x5A, 0x7A, 0x5E, 0x8F, 0x85, 0x06, 0x39,
            /* 0C10 */  0xDD, 0x63, 0xAB, 0xF3, 0x4C, 0x40, 0x46, 0xCF,
            /* 0C18 */  0xCE, 0x22, 0x3E, 0x92, 0xC0, 0x71, 0x0D, 0xA8,
            /* 0C20 */  0xDB, 0xC1, 0xD3, 0x04, 0xFE, 0xFF, 0x7F, 0xAA,
            /* 0C28 */  0x80, 0x75, 0x26, 0x81, 0x3F, 0x1E, 0x1F, 0x06,
            /* 0C30 */  0x3C, 0x79, 0x9F, 0x0A, 0xF8, 0x20, 0xF8, 0x0D,
            /* 0C38 */  0x93, 0x0F, 0xF5, 0xB4, 0xDE, 0x02, 0x7C, 0xF8,
            /* 0C40 */  0x31, 0x81, 0x8F, 0xD6, 0x7C, 0x3C, 0xE0, 0x57,
            /* 0C48 */  0x7C, 0x2A, 0x10, 0xC2, 0x8B, 0x83, 0xE7, 0x6B,
            /* 0C50 */  0x82, 0xF2, 0x8E, 0x2C, 0xA0, 0xB8, 0x10, 0xC3,
            /* 0C58 */  0x3A, 0x76, 0xF9, 0x0C, 0x81, 0x85, 0xE7, 0x87,
            /* 0C60 */  0x80, 0x87, 0x17, 0x06, 0xFC, 0xFE, 0xE2, 0x29,
            /* 0C68 */  0x1C, 0x8E, 0x4F, 0x17, 0x46, 0x08, 0xFF, 0x50,
            /* 0C70 */  0xF1, 0x90, 0xE1, 0x23, 0xC4, 0xF9, 0x3C, 0x2F,
            /* 0C78 */  0x9C, 0xD1, 0xBB, 0x80, 0x09, 0x8A, 0x7A, 0x62,
            /* 0C80 */  0xC8, 0x06, 0x88, 0xD2, 0x3E, 0x07, 0x74, 0x96,
            /* 0C88 */  0xE3, 0xA2, 0x20, 0x94, 0x72, 0xB1, 0xC2, 0x7F,
            /* 0C90 */  0x7F, 0x09, 0x7C, 0xCC, 0x0F, 0x04, 0x8F, 0x59,
            /* 0C98 */  0xF8, 0x59, 0x3C, 0x66, 0x9C, 0xD2, 0x33, 0x80,
            /* 0CA0 */  0x09, 0x9C, 0xE8, 0x18, 0x47, 0x47, 0xEE, 0x2C,
            /* 0CA8 */  0x14, 0xCA, 0x3D, 0x28, 0x0A, 0xE7, 0xA4, 0xC7,
            /* 0CB0 */  0x22, 0x0A, 0x62, 0x40, 0xDF, 0x5E, 0x7D, 0x6A,
            /* 0CB8 */  0xC0, 0x0D, 0x9D, 0xCD, 0xE2, 0x89, 0x21, 0xC2,
            /* 0CC0 */  0x59, 0xFB, 0x0E, 0xE0, 0xBB, 0x17, 0x58, 0xFE,
            /* 0CC8 */  0xFF, 0x87, 0x39, 0x70, 0xDE, 0x17, 0xB0, 0x37,
            /* 0CD0 */  0x2A, 0x60, 0x11, 0xE9, 0x46, 0x85, 0x0A, 0x01,
            /* 0CD8 */  0xA3, 0xB9, 0x1A, 0xC4, 0x13, 0xF3, 0x8D, 0x0A,
            /* 0CE0 */  0x78, 0x8E, 0xC6, 0x37, 0x2A, 0xF0, 0xDD, 0x4B,
            /* 0CE8 */  0x3C, 0x2E, 0xDC, 0x7B, 0xC1, 0x47, 0x05, 0x98,
            /* 0CF0 */  0xA7, 0x75, 0x8F, 0x0C, 0xEC, 0xF7, 0x05, 0x5F,
            /* 0CF8 */  0xBD, 0x80, 0xCB, 0xFF, 0xFF, 0xEA, 0x05, 0xAE,
            /* 0D00 */  0xF8, 0x57, 0x2F, 0xD0, 0x9D, 0x19, 0xF9, 0xD5,
            /* 0D08 */  0x0B, 0x78, 0x5E, 0x4B, 0x5E, 0x9B, 0xC0, 0x73,
            /* 0D10 */  0x29, 0xE1, 0x37, 0x2F, 0x18, 0x48, 0x0F, 0xEC,
            /* 0D18 */  0xBE, 0x1B, 0xB0, 0x81, 0xF9, 0x1E, 0xE4, 0x43,
            /* 0D20 */  0x87, 0x65, 0x5C, 0x53, 0x50, 0xB7, 0x2B, 0x47,
            /* 0D28 */  0x5F, 0xA7, 0x3C, 0x4E, 0x96, 0xCC, 0x3E, 0x7A,
            /* 0D30 */  0xFC, 0x87, 0x27, 0x5F, 0x64, 0x02, 0x3F, 0x2F,
            /* 0D38 */  0xE0, 0x2F, 0x00, 0x6F, 0x46, 0xBE, 0x5A, 0xF8,
            /* 0D40 */  0xBC, 0xC0, 0x02, 0x9E, 0x33, 0x28, 0x84, 0xA3,
            /* 0D48 */  0x51, 0x28, 0xD8, 0x71, 0x03, 0x15, 0x05, 0x8E,
            /* 0D50 */  0x82, 0xF8, 0xB8, 0x01, 0x3C, 0xFF, 0xFF, 0x04,
            /* 0D58 */  0xFC, 0x14, 0x01, 0xBE, 0x60, 0xE3, 0x42, 0x1F,
            /* 0D60 */  0x15, 0x3C, 0x65, 0x70, 0x1D, 0x4D, 0x80, 0xEF,
            /* 0D68 */  0x89, 0x03, 0x78, 0x48, 0x58, 0x8F, 0x4E, 0x1C,
            /* 0D70 */  0xE0, 0x3A, 0x9C, 0xF8, 0xC4, 0x01, 0x5C, 0x51,
            /* 0D78 */  0x7D, 0xE2, 0x00, 0xC7, 0xF9, 0x82, 0xCD, 0xE1,
            /* 0D80 */  0xFF, 0x1F, 0xEA, 0xE9, 0x80, 0xC3, 0x3C, 0xEB,
            /* 0D88 */  0xB1, 0x4B, 0x07, 0x8C, 0xAB, 0x1C, 0xBB, 0x1E,
            /* 0D90 */  0xB0, 0x33, 0x87, 0x13, 0xFD, 0xEA, 0x74, 0xE6,
            /* 0D98 */  0xC0, 0xA5, 0x58, 0xB2, 0xAE, 0x61, 0xEC, 0xCC,
            /* 0DA0 */  0x01, 0x36, 0xAD, 0x37, 0x71, 0x94, 0x4A, 0x18,
            /* 0DA8 */  0x69, 0xBC, 0x89, 0xA3, 0x54, 0xDD, 0xB9, 0x28,
            /* 0DB0 */  0x88, 0x6F, 0x7C, 0x3E, 0x3A, 0x03, 0xC3, 0xAB,
            /* 0DB8 */  0x38, 0x18, 0x8F, 0xCE, 0x70, 0x4E, 0xE2, 0x80,
            /* 0DC0 */  0x93, 0xA1, 0x79, 0xFC, 0xB8, 0xB3, 0x09, 0xEE,
            /* 0DC8 */  0xFF, 0x7F, 0x35, 0x00, 0xC7, 0x71, 0x1C, 0x78,
            /* 0DD0 */  0x1E, 0xB2, 0x01, 0x93, 0x50, 0xBE, 0xD8, 0x00,
            /* 0DD8 */  0x96, 0xFE, 0xFF, 0xB7, 0x79, 0xCC, 0xC5, 0x06,
            /* 0DE0 */  0xF0, 0x71, 0xC8, 0xE6, 0x17, 0x1B, 0x70, 0xCA,
            /* 0DE8 */  0xBE, 0xD8, 0xA0, 0x8E, 0x04, 0x16, 0xBB, 0x52,
            /* 0DF0 */  0x5D, 0x76, 0xD8, 0x95, 0xF5, 0x0D, 0x95, 0xCD,
            /* 0DF8 */  0xC6, 0xE7, 0x6A, 0x1F, 0xD4, 0x3C, 0xEA, 0xB7,
            /* 0E00 */  0x05, 0x36, 0xD8, 0x47, 0x60, 0x9C, 0xA8, 0x7B,
            /* 0E08 */  0x0D, 0x4A, 0x0E, 0x8C, 0x02, 0x1C, 0x23, 0x50,
            /* 0E10 */  0x92, 0xAF, 0x66, 0x14, 0xC4, 0x07, 0x00, 0x1F,
            /* 0E18 */  0x4A, 0x01, 0x17, 0x49, 0xEE, 0x2A, 0x68, 0x2D,
            /* 0E20 */  0x27, 0x01, 0x72, 0xC9, 0xF3, 0x61, 0xEF, 0x40,
            /* 0E28 */  0x4F, 0xFC, 0xA4, 0x5E, 0x80, 0x1F, 0xCA, 0xD9,
            /* 0E30 */  0xA4, 0xFC, 0xFF, 0x9F, 0x14, 0x18, 0x87, 0xEB,
            /* 0E38 */  0x63, 0x0A, 0x70, 0x3E, 0xDA, 0xFB, 0x40, 0xC0,
            /* 0E40 */  0xE5, 0x1F, 0x08, 0x28, 0x88, 0xAF, 0x7E, 0xC0,
            /* 0E48 */  0xF5, 0x3E, 0x0A, 0xCE, 0x30, 0xE7, 0x06, 0xF4,
            /* 0E50 */  0xB9, 0xDF, 0x97, 0x09, 0x38, 0x87, 0x19, 0xE0,
            /* 0E58 */  0x77, 0x3A, 0xC7, 0x1F, 0x66, 0xD8, 0xFF, 0xFF,
            /* 0E60 */  0x30, 0x03, 0x0C, 0x9E, 0x04, 0x3E, 0xCC, 0x80,
            /* 0E68 */  0x0B, 0xDC, 0x87, 0x19, 0xE0, 0x2A, 0xF8, 0xD2,
            /* 0E70 */  0x07, 0xBA, 0x83, 0x3C, 0x43, 0xF1, 0xC5, 0xC0,
            /* 0E78 */  0x27, 0x17, 0x8E, 0x73, 0x5A, 0x4F, 0x07, 0x1C,
            /* 0E80 */  0x26, 0xF0, 0xDB, 0x01, 0x3B, 0x72, 0x58, 0xFC,
            /* 0E88 */  0x9D, 0x0F, 0x2D, 0xF7, 0x2C, 0x03, 0xF9, 0x96,
            /* 0E90 */  0xE3, 0xE9, 0x78, 0x00, 0xCF, 0x0B, 0xBE, 0x93,
            /* 0E98 */  0xE0, 0x0E, 0x33, 0xC0, 0xFA, 0xFF, 0x7F, 0x98,
            /* 0EA0 */  0x01, 0x58, 0x7E, 0x9B, 0x80, 0x31, 0x2C, 0xFE,
            /* 0EA8 */  0xFF, 0x3F, 0xCC, 0x00, 0xC6, 0x44, 0x1C, 0x66,
            /* 0EB0 */  0x40, 0x67, 0xE2, 0x30, 0x03, 0x74, 0x6F, 0x1A,
            /* 0EB8 */  0x3E, 0xCC, 0x00, 0x07, 0xE8, 0xA7, 0x03, 0xCC,
            /* 0EC0 */  0x65, 0xC6, 0x57, 0x10, 0xCC, 0x9D, 0xC3, 0x04,
            /* 0EC8 */  0xE3, 0xBD, 0x1B, 0x74, 0x9C, 0xE1, 0x43, 0xF1,
            /* 0ED0 */  0x35, 0xDE, 0xA3, 0x60, 0xE3, 0x7F, 0xEF, 0x33,
            /* 0ED8 */  0x8A, 0x0F, 0x00, 0xF1, 0xDF, 0x07, 0x1C, 0xEA,
            /* 0EE0 */  0x36, 0x8F, 0x8A, 0x43, 0xA1, 0x73, 0x06, 0xE6,
            /* 0EE8 */  0xFF, 0x7F, 0xCE, 0x00, 0xE6, 0xB7, 0x79, 0x70,
            /* 0EF0 */  0x9E, 0x33, 0xE0, 0xCC, 0x15, 0xC6, 0x3D, 0x1E,
            /* 0EF8 */  0x18, 0x9E, 0x33, 0x80, 0x57, 0x68, 0x08, 0x9D,
            /* 0F00 */  0x33, 0xC0, 0xA5, 0xE2, 0x9C, 0x01, 0x04, 0xFE,
            /* 0F08 */  0xFF, 0xE7, 0x0C, 0xB0, 0x89, 0x3C, 0x67, 0x80,
            /* 0F10 */  0xEE, 0x68, 0xCA, 0x60, 0xD8, 0xC5, 0xD4, 0x73,
            /* 0F18 */  0x7F, 0xBE, 0x60, 0x42, 0x4F, 0x5F, 0xA8, 0x21,
            /* 0F20 */  0x58, 0xEA, 0x05, 0x1E, 0x71, 0x47, 0x80, 0x21,
            /* 0F28 */  0xEF, 0xD8, 0x85, 0x12, 0x06, 0x23, 0x59, 0x37,
            /* 0F30 */  0x77, 0x94, 0x90, 0x9B, 0x3B, 0x05, 0xF1, 0xCD,
            /* 0F38 */  0x1D, 0x60, 0xCD, 0xFF, 0xFF, 0xE6, 0x8E, 0xC9,
            /* 0F40 */  0x71, 0x0E, 0x41, 0x0F, 0xCD, 0x77, 0x02, 0x18,
            /* 0F48 */  0x67, 0x76, 0x60, 0x76, 0x0A, 0xC1, 0x9E, 0xD9,
            /* 0F50 */  0x01, 0x16, 0x1D, 0x62, 0xC0, 0xF0, 0xFF, 0x3F,
            /* 0F58 */  0xC4, 0x60, 0xC7, 0xE9, 0x43, 0x0C, 0xE0, 0xE4,
            /* 0F60 */  0xCC, 0xCE, 0x0F, 0x31, 0xF0, 0x92, 0xAE, 0x53,
            /* 0F68 */  0x87, 0x18, 0xCE, 0xE1, 0x9C, 0x0F, 0x05, 0x4D,
            /* 0F70 */  0x3D, 0xFC, 0x31, 0xF9, 0x46, 0x7A, 0x82, 0x7D,
            /* 0F78 */  0x4E, 0x40, 0xE3, 0xB0, 0x66, 0x24, 0x9D, 0x05,
            /* 0F80 */  0x8E, 0xF1, 0xE9, 0xC0, 0xB9, 0xCE, 0x2F, 0xF4,
            /* 0F88 */  0xCC, 0xE0, 0x44, 0x14, 0xCA, 0x73, 0x76, 0x40,
            /* 0F90 */  0x25, 0x38, 0x75, 0x51, 0x10, 0x0F, 0xDF, 0xC7,
            /* 0F98 */  0x18, 0xC0, 0xEC, 0xFF, 0xFF, 0x18, 0x03, 0x0C,
            /* 0FA0 */  0xAF, 0x28, 0x80, 0xC9, 0x3B, 0x29, 0x38, 0xAF,
            /* 0FA8 */  0x28, 0xC0, 0x23, 0xF8, 0x15, 0x05, 0x74, 0x36,
            /* 0FB0 */  0xAE, 0x28, 0xA0, 0xF9, 0xFF, 0x5F, 0x51, 0x80,
            /* 0FB8 */  0xC7, 0x00, 0x5F, 0x51, 0xC0, 0x72, 0x2B, 0xE1,
            /* 0FC0 */  0x83, 0x78, 0x2C, 0xE1, 0xC7, 0x4D, 0x76, 0x2D,
            /* 0FC8 */  0xC1, 0x5C, 0x52, 0x58, 0xE6, 0x4B, 0x0A, 0x4A,
            /* 0FD0 */  0x14, 0x84, 0xB2, 0x5E, 0x52, 0x50, 0x56, 0xCF,
            /* 0FD8 */  0x9D, 0xF4, 0x9A, 0x02, 0x70, 0xE8, 0xFF, 0x7F,
            /* 0FE0 */  0x4D, 0x01, 0x18, 0x18, 0xFF, 0x9A, 0x02, 0x3A,
            /* 0FE8 */  0x1D, 0xD7, 0x14, 0x20, 0xF3, 0xFF, 0xBF, 0xA6,
            /* 0FF0 */  0x80, 0x41, 0xEE, 0x35, 0x05, 0x84, 0x53, 0x7F,
            /* 0FF8 */  0x30, 0x61, 0x9E, 0x40, 0x74, 0x54, 0x81, 0x1D,
            /* 1000 */  0xFB, 0x84, 0x8D, 0xE2, 0x70, 0xE8, 0x13, 0x36,
            /* 1008 */  0x02, 0xFB, 0xAD, 0x9B, 0x5D, 0xD7, 0x6C, 0x1C,
            /* 1010 */  0x59, 0xB3, 0xF4, 0xB1, 0xDB, 0x04, 0x43, 0x9E,
            /* 1018 */  0xB1, 0x51, 0xF1, 0x28, 0x14, 0xEE, 0x00, 0x81,
            /* 1020 */  0x3A, 0x67, 0xFB, 0xA4, 0xCD, 0xCF, 0xD8, 0x80,
            /* 1028 */  0x9F, 0x70, 0x37, 0x15, 0xF4, 0x38, 0x3C, 0x5B,
            /* 1030 */  0x8E, 0xFC, 0x1E, 0xE0, 0xAB, 0x8A, 0xAF, 0x04,
            /* 1038 */  0x36, 0x0F, 0x49, 0x42, 0x1C, 0x56, 0xE8, 0xC0,
            /* 1040 */  0xC0, 0x75, 0x5A, 0xE1, 0x83, 0xF2, 0xF8, 0x60,
            /* 1048 */  0xFD, 0xFF, 0x6F, 0x2B, 0x60, 0xBC, 0x64, 0x01,
            /* 1050 */  0xEF, 0xB1, 0xF8, 0x92, 0x05, 0x38, 0x39, 0x6B,
            /* 1058 */  0x73, 0xC5, 0xE7, 0x03, 0x8A, 0xF2, 0xBE, 0xE1,
            /* 1060 */  0xD3, 0x05, 0xEE, 0x92, 0xC5, 0x12, 0x9C, 0xB6,
            /* 1068 */  0x51, 0x1C, 0xD6, 0x7F, 0xDA, 0x46, 0x9C, 0x35,
            /* 1070 */  0x60, 0xEA, 0x3D, 0x6F, 0xA3, 0x94, 0xC2, 0x48,
            /* 1078 */  0xE7, 0x79, 0x1B, 0xA5, 0xEC, 0xA6, 0x45, 0x41,
            /* 1080 */  0x7C, 0xDE, 0x06, 0xF3, 0xFF, 0xFF, 0x8A, 0x05,
            /* 1088 */  0xB0, 0x20, 0xD8, 0xD0, 0xD0, 0xB3, 0xF0, 0x99,
            /* 1090 */  0x04, 0xE6, 0xE0, 0xC0, 0x3B, 0x23, 0x1F, 0xBC,
            /* 1098 */  0x61, 0x5E, 0xC7, 0x80, 0xF5, 0xFF, 0xFF, 0xDE,
            /* 10A0 */  0x0D, 0xB8, 0xBF, 0xD0, 0x80, 0xCF, 0xC8, 0x85,
            /* 10A8 */  0x06, 0xD0, 0x72, 0xEF, 0xE6, 0x17, 0x1A, 0xF8,
            /* 10B0 */  0x81, 0x4F, 0xA1, 0xE8, 0x98, 0x4F, 0x05, 0xFD,
            /* 10B8 */  0xFF, 0xEF, 0x37, 0x6C, 0x1A, 0xD6, 0x3E, 0x08,
            /* 10C0 */  0xC1, 0x7A, 0x36, 0xCF, 0x1A, 0xBE, 0xD3, 0xF8,
            /* 10C8 */  0x22, 0xEE, 0x39, 0x31, 0x82, 0x91, 0x4E, 0xA1,
            /* 10D0 */  0xA8, 0x30, 0x14, 0x0A, 0x7F, 0x1C, 0xA0, 0x70,
            /* 10D8 */  0x8E, 0x7B, 0x7E, 0xA0, 0x20, 0x06, 0x74, 0x96,
            /* 10E0 */  0xF3, 0x03, 0xFA, 0xB4, 0xE1, 0x89, 0xE0, 0xCE,
            /* 10E8 */  0x04, 0x6F, 0x20, 0x07, 0x18, 0xE4, 0x89, 0x81,
            /* 10F0 */  0x9D, 0x69, 0x80, 0xE1, 0xF1, 0x81, 0x9D, 0x3E,
            /* 10F8 */  0x80, 0xC5, 0x35, 0xCE, 0xC3, 0xE5, 0x01, 0xEE,
            /* 1100 */  0x72, 0x14, 0xC4, 0x77, 0x39, 0xE0, 0x3A, 0x1A,
            /* 1108 */  0x9F, 0x3E, 0xC0, 0x37, 0x2E, 0x38, 0xA7, 0x02,
            /* 1110 */  0xFF, 0xFF, 0x4F, 0x05, 0xFC, 0xAE, 0x80, 0xBB,
            /* 1118 */  0x82, 0x02, 0xDE, 0x96, 0xED, 0x43, 0x0A, 0xB8,
            /* 1120 */  0xEE, 0x54, 0x3E, 0xA4, 0x00, 0x57, 0xC1, 0x97,
            /* 1128 */  0x38, 0xD0, 0x9D, 0x1D, 0x7C, 0x30, 0xE0, 0x38,
            /* 1130 */  0xA7, 0x12, 0xEE, 0x3D, 0xD4, 0xA8, 0x0F, 0x26,
            /* 1138 */  0xEC, 0xA6, 0xE2, 0xD3, 0x01, 0x3F, 0xA8, 0xB0,
            /* 1140 */  0x44, 0xEB, 0xD5, 0x41, 0x05, 0x97, 0xE3, 0x65,
            /* 1148 */  0xA5, 0x73, 0x0B, 0x3B, 0xA8, 0xC0, 0xFC, 0xFF,
            /* 1150 */  0x1F, 0x54, 0xB8, 0x66, 0x58, 0x1D, 0x54, 0xB8,
            /* 1158 */  0x5A, 0x18, 0x69, 0x7D, 0x00, 0xE8, 0xA8, 0xC1,
            /* 1160 */  0xD5, 0xDD, 0xE8, 0x28, 0x88, 0x2F, 0x24, 0xBE,
            /* 1168 */  0xCA, 0x01, 0xDC, 0xC9, 0x31, 0x7E, 0x34, 0x8C,
            /* 1170 */  0x4F, 0x2E, 0xBE, 0xFC, 0xB2, 0x93, 0xC1, 0xBB,
            /* 1178 */  0x04, 0x9B, 0x3D, 0x58, 0xCF, 0x07, 0x9E, 0x3D,
            /* 1180 */  0xD8, 0xAE, 0x46, 0xFF, 0xFF, 0x57, 0x23, 0x60,
            /* 1188 */  0x88, 0xE4, 0xAB, 0x11, 0xD8, 0x0E, 0x12, 0x3E,
            /* 1190 */  0xDB, 0x80, 0x67, 0x54, 0x60, 0x3D, 0x31, 0xF8,
            /* 1198 */  0xFE, 0x04, 0x9C, 0x2F, 0x83, 0x80, 0x83, 0x8B,
            /* 11A0 */  0x8F, 0x2F, 0x46, 0x98, 0xFF, 0xFF, 0xC5, 0x08,
            /* 11A8 */  0xB0, 0x33, 0x68, 0x5F, 0x8C, 0x00, 0x27, 0x97,
            /* 11B0 */  0x41, 0x7E, 0x31, 0x02, 0x5F, 0x02, 0x1B, 0xE3,
            /* 11B8 */  0x60, 0x31, 0x86, 0x2C, 0x81, 0x0B, 0xA6, 0x30,
            /* 11C0 */  0xBE, 0x56, 0xF8, 0x8C, 0x80, 0x1F, 0xF5, 0x41,
            /* 11C8 */  0x1F, 0xEB, 0x61, 0x31, 0x49, 0x70, 0xA8, 0x03,
            /* 11D0 */  0x81, 0x87, 0xF5, 0x58, 0x72, 0x2C, 0xA7, 0x71,
            /* 11D8 */  0xF6, 0x1E, 0x4F, 0x48, 0x26, 0x6D, 0x7C, 0x28,
            /* 11E0 */  0x29, 0xF7, 0x1D, 0x32, 0xA2, 0x43, 0x3A, 0x2F,
            /* 11E8 */  0xCF, 0xCC, 0x30, 0x09, 0x7C, 0x14, 0x60, 0x68,
            /* 11F0 */  0x1C, 0xDA, 0xFF, 0xFF, 0x63, 0x02, 0xF6, 0x8E,
            /* 11F8 */  0x10, 0xEC, 0x20, 0x0E, 0xE3, 0x3D, 0xC0, 0x04,
            /* 1200 */  0x9E, 0xD0, 0xA9, 0x96, 0x7B, 0x77, 0x90, 0x78,
            /* 1208 */  0x54, 0x61, 0x34, 0x77, 0x9E, 0x40, 0x8C, 0x1C,
            /* 1210 */  0x1C, 0xE7, 0x86, 0x33, 0x78, 0x20, 0x62, 0x43,
            /* 1218 */  0x7E, 0x88, 0x78, 0xD0, 0xF1, 0xB8, 0x0D, 0x18,
            /* 1220 */  0x2F, 0xC6, 0xA1, 0x18, 0xB2, 0x67, 0x14, 0x5D,
            /* 1228 */  0x1C, 0xC2, 0x45, 0x79, 0x52, 0x88, 0x52, 0xEB,
            /* 1230 */  0xCC, 0x08, 0xE8, 0x01, 0x30, 0xA0, 0xD7, 0x89,
            /* 1238 */  0xA3, 0x7F, 0xF9, 0xF1, 0x0C, 0x0E, 0x06, 0x73,
            /* 1240 */  0x3A, 0x30, 0xF6, 0x7B, 0x85, 0x4F, 0x09, 0xCC,
            /* 1248 */  0xBD, 0x00, 0x6F, 0xB3, 0x12, 0x44, 0x84, 0xB8,
            /* 1250 */  0xEF, 0x12, 0x27, 0xF3, 0x94, 0xD3, 0xD6, 0xD0,
            /* 1258 */  0x34, 0xB6, 0xE7, 0xE3, 0x07, 0x9D, 0x28, 0x41,
            /* 1260 */  0x5E, 0x3A, 0x6B, 0x46, 0x15, 0xCA, 0x21, 0x84,
            /* 1268 */  0x79, 0xC6, 0x08, 0x18, 0x25, 0x62, 0xB4, 0xA8,
            /* 1270 */  0x81, 0x6B, 0xC4, 0x26, 0xA0, 0x81, 0x62, 0x45,
            /* 1278 */  0x38, 0x82, 0xF6, 0x07, 0x41, 0xA2, 0x9D, 0x09,
            /* 1280 */  0x74, 0x6E, 0x71, 0xA4, 0xD1, 0xA0, 0xCE, 0x1A,
            /* 1288 */  0x3E, 0x17, 0xF8, 0x4C, 0x70, 0x56, 0x0F, 0x09,
            /* 1290 */  0xEC, 0x14, 0xCA, 0x74, 0x1E, 0x08, 0xC8, 0xD0,
            /* 1298 */  0xD9, 0x69, 0xC4, 0x87, 0x12, 0x38, 0xAE, 0x01,
            /* 12A0 */  0x75, 0x79, 0xF6, 0xB9, 0x02, 0x1C, 0xA7, 0x12,
            /* 12A8 */  0xF8, 0xE3, 0xF1, 0x49, 0xC0, 0xC3, 0x37, 0x81,
            /* 12B0 */  0xE5, 0x0F, 0x02, 0x35, 0x32, 0x43, 0xFB, 0x3A,
            /* 12B8 */  0x72, 0x5A, 0x2F, 0x04, 0x3E, 0x42, 0x99, 0xC0,
            /* 12C0 */  0xE7, 0x2B, 0x9F, 0x63, 0x3C, 0x1E, 0x98, 0xFF,
            /* 12C8 */  0xFF, 0xF1, 0x80, 0xE5, 0x1A, 0xCB, 0x6E, 0x0D,
            /* 12D0 */  0x9E, 0xAF, 0x4F, 0x0B, 0x3E, 0xB4, 0x80, 0xE1,
            /* 12D8 */  0xA4, 0xC0, 0x2F, 0x0A, 0xEC, 0x30, 0x10, 0xC3,
            /* 12E0 */  0xF3, 0x62, 0x07, 0x07, 0x26, 0xF2, 0x08, 0x81,
            /* 12E8 */  0x1E, 0x01, 0x3F, 0x06, 0x3C, 0xC0, 0xB0, 0x11,
            /* 12F0 */  0xBC, 0xC3, 0x78, 0x12, 0x07, 0xE4, 0xC3, 0x85,
            /* 12F8 */  0xAF, 0xB9, 0x3E, 0x53, 0x3C, 0x63, 0xF8, 0x94,
            /* 1300 */  0x70, 0x46, 0xE7, 0x70, 0x4E, 0x6F, 0x03, 0x3E,
            /* 1308 */  0x22, 0x49, 0xC5, 0x79, 0x80, 0x45, 0xBC, 0xE7,
            /* 1310 */  0xA2, 0x38, 0x1C, 0x6B, 0xB9, 0x3A, 0x9A, 0xB0,
            /* 1318 */  0x29, 0x61, 0x6F, 0x6D, 0x1E, 0x44, 0x88, 0xE7,
            /* 1320 */  0x11, 0x72, 0xCB, 0x45, 0x05, 0xA0, 0xD0, 0x15,
            /* 1328 */  0xD5, 0x07, 0x23, 0x2E, 0xF9, 0x9E, 0x4A, 0x41,
            /* 1330 */  0x3C, 0x10, 0x9F, 0xBD, 0x7C, 0x61, 0xF6, 0xA9,
            /* 1338 */  0x01, 0x37, 0x4B, 0xFC, 0xC9, 0xC1, 0x13, 0xF3,
            /* 1340 */  0xE1, 0xE3, 0x25, 0x50, 0xD7, 0x3D, 0x10, 0x1F,
            /* 1348 */  0xE2, 0xC0, 0x15, 0x62, 0x56, 0x68, 0x1D, 0xD7,
            /* 1350 */  0x15, 0x72, 0x05, 0xF1, 0xA4, 0x7C, 0x51, 0xF0,
            /* 1358 */  0x90, 0x60, 0xFF, 0xFF, 0x87, 0x04, 0xEF, 0x98,
            /* 1360 */  0x07, 0xBE, 0x83, 0x17, 0xB0, 0x88, 0x7F, 0x8B,
            /* 1368 */  0x46, 0x05, 0x9E, 0x11, 0x05, 0xF1, 0x6D, 0x9A,
            /* 1370 */  0x5C, 0xFF, 0xD0, 0x27, 0x1D, 0x0F, 0xE0, 0x50,
            /* 1378 */  0x9F, 0x1B, 0x0C, 0xF1, 0xDE, 0x85, 0xB9, 0xDF,
            /* 1380 */  0x02, 0xCF, 0x0B, 0x20, 0x3B, 0x77, 0x01, 0x13,
            /* 1388 */  0x09, 0xE7, 0x2E, 0xD0, 0x5D, 0x0C, 0xF8, 0xB9,
            /* 1390 */  0x0B, 0xEC, 0xFF, 0xFF, 0x73, 0x17, 0x98, 0x50,
            /* 1398 */  0x7D, 0x5C, 0x02, 0xC7, 0x39, 0x09, 0x0F, 0xF2,
            /* 13A0 */  0x32, 0xC2, 0x0F, 0x49, 0x61, 0xD8, 0xA9, 0x89,
            /* 13A8 */  0x5D, 0x99, 0xD8, 0x85, 0xE8, 0xE8, 0xFA, 0x9C,
            /* 13B0 */  0xB2, 0x0E, 0x5E, 0xEC, 0xD4, 0xE5, 0x13, 0x0A,
            /* 13B8 */  0x3F, 0x6D, 0x59, 0xD4, 0x09, 0x05, 0x71, 0x15,
            /* 13C0 */  0x81, 0x3B, 0x7E, 0x1D, 0x51, 0x50, 0xE1, 0x49,
            /* 13C8 */  0x74, 0xAF, 0x87, 0x7F, 0x44, 0x01, 0x8C, 0x1C,
            /* 13D0 */  0x40, 0x80, 0xF7, 0xFF, 0xFF, 0x00, 0x02, 0x6C,
            /* 13D8 */  0xAE, 0xF5, 0xE0, 0x3A, 0x80, 0x00, 0xFF, 0x51,
            /* 13E0 */  0xFB, 0x00, 0x02, 0xF8, 0x54, 0x74, 0x00, 0x41,
            /* 13E8 */  0x1D, 0x14, 0xAC, 0xE2, 0x00, 0x82, 0x38, 0x35,
            /* 13F0 */  0x61, 0xB3, 0x9F, 0xB3, 0x28, 0xDF, 0xFF, 0x3F,
            /* 13F8 */  0xC1, 0xD4, 0x24, 0x4A, 0x7D, 0x7C, 0x40, 0xE5,
            /* 1400 */  0x3C, 0x22, 0x50, 0x10, 0x03, 0xFA, 0x22, 0x05,
            /* 1408 */  0xBC, 0x2E, 0x1E, 0x00, 0x0B, 0xFF, 0xFF, 0x17,
            /* 1410 */  0x0F, 0xB8, 0x90, 0xBE, 0x78, 0x00, 0x3E, 0x15,
            /* 1418 */  0xDA, 0xF4, 0xA9, 0xD1, 0xA8, 0x55, 0x83, 0x32,
            /* 1420 */  0x35, 0xCA, 0x34, 0xA8, 0xD5, 0xA7, 0x52, 0x63,
            /* 1428 */  0xC6, 0xEA, 0xDE, 0x1D, 0xBD, 0x54, 0x8D, 0xD5,
            /* 1430 */  0x71, 0x40, 0x68, 0xF0, 0x0F, 0xAB, 0x40, 0x1C,
            /* 1438 */  0x7E, 0x4D, 0x02, 0xB1, 0x74, 0x13, 0x20, 0x2C,
            /* 1440 */  0xE4, 0x55, 0x92, 0x06, 0xBD, 0x21, 0x0B, 0xC4,
            /* 1448 */  0x32, 0xBF, 0x1C, 0x02, 0x71, 0x24, 0x1F, 0x17,
            /* 1450 */  0x0F, 0x96, 0x0F, 0x44, 0x40, 0x4E, 0xF3, 0x32,
            /* 1458 */  0x10, 0x90, 0xB3, 0x81, 0x08, 0xC8, 0xA9, 0x5F,
            /* 1460 */  0x11, 0x02, 0xB2, 0x84, 0x3F, 0xB6, 0x80, 0x1C,
            /* 1468 */  0x18, 0x44, 0x40, 0x8E, 0x0F, 0x44, 0x83, 0x79,
            /* 1470 */  0x39, 0x0B, 0xD0, 0xD5, 0x0A, 0xC4, 0x41, 0xCC,
            /* 1478 */  0x00, 0xB2, 0x54, 0x20, 0x02, 0xB2, 0xA0, 0x07,
            /* 1480 */  0x88, 0x80, 0xAC, 0x0E, 0x44, 0x40, 0x8E, 0x05,
            /* 1488 */  0x44, 0x33, 0x02, 0x51, 0x6D, 0x6E, 0x80, 0x98,
            /* 1490 */  0x50, 0x10, 0x01, 0x39, 0x2F, 0x10, 0x0D, 0x0F,
            /* 1498 */  0x44, 0xB3, 0xBE, 0x29, 0x04, 0xE4, 0xE4, 0x20,
            /* 14A0 */  0x02, 0xB2, 0x2E, 0x3F, 0x40, 0x4C, 0x24, 0x88,
            /* 14A8 */  0xFE, 0xFF, 0x40, 0xCE, 0x07, 0x44, 0xC3, 0x02,
            /* 14B0 */  0x51, 0x95, 0x4F, 0x03, 0x01, 0x59, 0x32, 0x88,
            /* 14B8 */  0x80, 0x9C, 0x14, 0x88, 0xC6, 0x06, 0xA2, 0xE2,
            /* 14C0 */  0x0D, 0x01, 0xB1, 0x24, 0x20, 0x02, 0xB2, 0x70,
            /* 14C8 */  0x45, 0x40, 0x2C, 0x06, 0x88, 0x80, 0x2C, 0xC1,
            /* 14D0 */  0x11, 0x10, 0x13, 0x04, 0xA2, 0x81, 0x12, 0x20,
            /* 14D8 */  0x1A, 0x13, 0x88, 0x06, 0xF1, 0x04, 0xC2, 0x64,
            /* 14E0 */  0x88, 0x02, 0x61, 0x51, 0x4C, 0x01, 0xB2, 0x5C,
            /* 14E8 */  0x20, 0x02, 0xB2, 0x26, 0x55, 0x40, 0x4C, 0x20,
            /* 14F0 */  0x88, 0x8E, 0x31, 0xC4, 0x15, 0x10, 0x93, 0x06,
            /* 14F8 */  0x22, 0x20, 0x87, 0xFD, 0x22, 0x08, 0xC4, 0x52,
            /* 1500 */  0x7D, 0x81, 0xB0, 0x80, 0x8F, 0x10, 0x01, 0x3A,
            /* 1508 */  0x2D, 0x88, 0x80, 0xAC, 0xFA, 0xF9, 0x11, 0x88,
            /* 1510 */  0x44, 0x00, 0x11, 0x90, 0xA3, 0x03, 0x51, 0x1D,
            /* 1518 */  0x6F, 0x7C, 0x01, 0x39, 0x37, 0x88, 0x80, 0xAC,
            /* 1520 */  0xE2, 0xD3, 0xFC, 0x70, 0xC0, 0x40, 0x74, 0x38,
            /* 1528 */  0x20, 0x40, 0x34, 0xB0, 0x35, 0x20, 0x96, 0x1E,
            /* 1530 */  0x44, 0x83, 0x23, 0x3F, 0x12, 0x1D, 0x0A, 0x08,
            /* 1538 */  0x88, 0x80, 0x2C, 0xEA, 0xF9, 0x1C, 0x88, 0x28,
            /* 1540 */  0x04, 0xD1, 0xA0, 0x08, 0x10, 0x4D, 0x0E, 0x44,
            /* 1548 */  0x15, 0xFF, 0x6D, 0x04, 0x64, 0xF9, 0x20, 0x02,
            /* 1550 */  0xB2, 0xDC, 0xE7, 0xB7, 0x80, 0x2C, 0x1E, 0x44,
            /* 1558 */  0x40, 0x0E, 0xE4, 0x0E, 0x88, 0xA5, 0x03, 0xD1,
            /* 1560 */  0x61, 0x80, 0xC8, 0x3B, 0x0C, 0x50, 0x10, 0x0D,
            /* 1568 */  0x88, 0x00, 0xD1, 0xF4, 0x40, 0x34, 0xAD, 0x3D,
            /* 1570 */  0x20, 0x96, 0x1D, 0x44, 0x40, 0xD6, 0xFD, 0xE5,
            /* 1578 */  0x11, 0x90, 0x53, 0x80, 0x08, 0xC8, 0x6A, 0xFC,
            /* 1580 */  0x01, 0x31, 0x6D, 0x20, 0x02, 0x72, 0x4A, 0x20,
            /* 1588 */  0x9A, 0x19, 0x88, 0x66, 0xFF, 0xB4, 0x04, 0x22,
            /* 1590 */  0x42, 0xBE, 0x1C, 0x07, 0xC4, 0x40, 0x34, 0x20,
            /* 1598 */  0x02, 0xA2, 0xFF, 0x3F, 0x90, 0xC5, 0x3D, 0x61,
            /* 15A0 */  0x02, 0x11, 0xA5, 0x20, 0xBA, 0x02, 0x13, 0x20,
            /* 15A8 */  0x9A, 0x17, 0x88, 0x6A, 0xFE, 0xDE, 0x08, 0xC8,
            /* 15B0 */  0x01, 0x40, 0x04, 0x64, 0xBD, 0x2F, 0x1B, 0x01,
            /* 15B8 */  0x59, 0x3D, 0x88, 0x80, 0x9C, 0xC2, 0x23, 0x10,
            /* 15C0 */  0x8B, 0x04, 0x22, 0x20, 0xAB, 0xFB, 0x26, 0x0B,
            /* 15C8 */  0xC8, 0x52, 0x41, 0x04, 0xE4, 0x98, 0x40, 0x34,
            /* 15D0 */  0x33, 0x10, 0xD5, 0xFE, 0xCB, 0x17, 0x90, 0x83,
            /* 15D8 */  0x80, 0x68, 0x90, 0x44, 0xE5, 0x20, 0x29, 0x88,
            /* 15E0 */  0x0E, 0x0C, 0xE4, 0xA1, 0xF2, 0xE8, 0x43, 0xB4,
            /* 15E8 */  0x7C, 0x99, 0x03, 0x91, 0x24, 0x20, 0x34, 0xFD,
            /* 15F0 */  0x0F, 0x25, 0x28, 0x91, 0xF2, 0x51, 0x79, 0x4C,
            /* 15F8 */  0x60, 0x20, 0x1A, 0x26, 0x31, 0x0A, 0xC4, 0xC2,
            /* 1600 */  0x80, 0x08, 0xC8, 0xD1, 0x80, 0x68, 0xEC, 0xFF,
            /* 1608 */  0x8E, 0x80, 0x2C, 0xE2, 0xCD, 0xF3, 0xA0, 0xC2,
            /* 1610 */  0x40, 0x04, 0xE4, 0x70, 0x40, 0x34, 0xFA, 0x67,
            /* 1618 */  0xFE, 0xB1, 0x81, 0x3D, 0x78, 0x02, 0x91, 0x3C,
            /* 1620 */  0x20, 0x02, 0x24, 0x40, 0x54, 0xE2, 0xFF, 0x5B,
            /* 1628 */  0x40, 0xD6, 0x0B, 0x22, 0x20, 0xEB, 0x7B, 0x18,
            /* 1630 */  0x05, 0x22, 0x6A, 0x41, 0x34, 0x5C, 0xE2, 0x76,
            /* 1638 */  0xB8, 0x14, 0x44, 0x87, 0x26, 0xF2, 0xAF, 0x7E,
            /* 1640 */  0x24, 0x60, 0x20, 0x02, 0xB2, 0x16, 0xBB, 0x40,
            /* 1648 */  0x4C, 0x19, 0x88, 0x80, 0x9C, 0x0B, 0x88, 0xA6,
            /* 1650 */  0x04, 0xA2, 0xE9, 0x3F, 0x47, 0x07, 0xC9, 0x04,
            /* 1658 */  0x03, 0xB1, 0x18, 0x20, 0x02, 0x72, 0x26, 0x20,
            /* 1660 */  0x9A, 0xE1, 0x65, 0x2D, 0x20, 0x27, 0x02, 0x11,
            /* 1668 */  0x90, 0xF5, 0xFC, 0xC8, 0x1F, 0x59, 0x18, 0x88,
            /* 1670 */  0x8E, 0x12, 0xE4, 0xF1, 0x23, 0x20, 0xEB, 0x07,
            /* 1678 */  0xD1, 0x20, 0x08, 0x10, 0xD5, 0xF2, 0x08, 0xD2,
            /* 1680 */  0xB1, 0x81, 0x3C, 0xDD, 0x75, 0xFC, 0x20, 0x20,
            /* 1688 */  0x3A, 0x26, 0x10, 0x20, 0x9A, 0x17, 0x88, 0x0A,
            /* 1690 */  0x7D, 0x2B, 0x15, 0xF0, 0xFF, 0x07, 0xB2, 0x6A,
            /* 1698 */  0x10, 0x1D, 0x29, 0xC8, 0x43, 0x28, 0x10, 0xD1,
            /* 16A0 */  0x0C, 0x22, 0x20, 0x2B, 0xFF, 0xDF, 0x3F, 0xA6,
            /* 16A8 */  0x30, 0x10, 0x0D, 0x94, 0xFC, 0x96, 0x0E, 0x94,
            /* 16B0 */  0x81, 0x08, 0xC8, 0x52, 0x3E, 0x4C, 0x81, 0x88,
            /* 16B8 */  0x30, 0x10, 0x1D, 0x7A, 0xC8, 0x5F, 0xE8, 0x00,
            /* 16C0 */  0x18, 0x88, 0x8E, 0x13, 0x04, 0x88, 0x0A, 0x79,
            /* 16C8 */  0x7C, 0xE9, 0x38, 0x42, 0x40, 0x74, 0x1C, 0x21,
            /* 16D0 */  0xC6, 0x8F, 0x34, 0xF4, 0x65, 0x14, 0x88, 0xA8,
            /* 16D8 */  0x04, 0xD1, 0xD1, 0x87, 0x00, 0x51, 0x0D, 0x2F,
            /* 16E0 */  0x30, 0x1D, 0x00, 0xC8, 0x0F, 0xFF, 0x40, 0x18,
            /* 16E8 */  0x88, 0x8E, 0x2A, 0x04, 0x88, 0xA6, 0x05, 0xA2,
            /* 16F0 */  0xC2, 0x1F, 0x50, 0x8F, 0x0F, 0x0C, 0x44, 0x40,
            /* 16F8 */  0x16, 0xFD, 0x37, 0xD5, 0x71, 0x85, 0x80, 0x08,
            /* 1700 */  0xC8, 0x89, 0xD4, 0x03, 0xB1, 0x78, 0x20, 0x3A,
            /* 1708 */  0x30, 0x10, 0xF7, 0x07, 0x05, 0x0A, 0xA2, 0xE3,
            /* 1710 */  0x06, 0x91, 0x7F, 0xB4, 0xA0, 0x20, 0x02, 0x72,
            /* 1718 */  0x00, 0xFD, 0x40, 0x2C, 0x0D, 0x88, 0x80, 0xAC,
            /* 1720 */  0xCA, 0x3F, 0x10, 0x93, 0x08, 0x22, 0x20, 0x67,
            /* 1728 */  0x03, 0xA2, 0x41, 0x81, 0xA8, 0xCC, 0x00, 0x83,
            /* 1730 */  0xA5, 0x20, 0x3A, 0x9E, 0x10, 0x20, 0x9A, 0x1E,
            /* 1738 */  0x88, 0xA6, 0x2D, 0x70, 0x3C, 0xA1, 0x20, 0x3A,
            /* 1740 */  0x3C, 0x90, 0x0A, 0x20, 0x4C, 0x43, 0x06, 0x10,
            /* 1748 */  0xA6, 0xBE, 0x03, 0x20, 0x8B, 0x02, 0x22, 0x20,
            /* 1750 */  0x2B, 0xF8, 0x0A, 0x0A, 0xC8, 0x72, 0x40, 0x74,
            /* 1758 */  0x00, 0x20, 0x40, 0x54, 0x49, 0x09, 0x20, 0xA6,
            /* 1760 */  0xB0, 0x05, 0x10, 0x93, 0x0B, 0xA2, 0xE3, 0x12,
            /* 1768 */  0x89, 0x71, 0x3C, 0xA1, 0x20, 0x02, 0xB2, 0xE4,
            /* 1770 */  0x1C, 0x87, 0x06, 0x0A, 0x22, 0x20, 0x8B, 0xED,
            /* 1778 */  0x01, 0xC4, 0xA4, 0x83, 0x08, 0xC8, 0xFF, 0x7F 
        })
    }

    Scope (\)
    {
        Name (BCLP, Package (0x67)
        {
            0x64, 
            0x3C, 
            Zero, 
            One, 
            0x02, 
            0x03, 
            0x04, 
            0x05, 
            0x06, 
            0x07, 
            0x08, 
            0x09, 
            0x0A, 
            0x0B, 
            0x0C, 
            0x0D, 
            0x0E, 
            0x0F, 
            0x10, 
            0x11, 
            0x12, 
            0x13, 
            0x14, 
            0x15, 
            0x16, 
            0x17, 
            0x18, 
            0x19, 
            0x1A, 
            0x1B, 
            0x1C, 
            0x1D, 
            0x1E, 
            0x1F, 
            0x20, 
            0x21, 
            0x22, 
            0x23, 
            0x24, 
            0x25, 
            0x26, 
            0x27, 
            0x28, 
            0x29, 
            0x2A, 
            0x2B, 
            0x2C, 
            0x2D, 
            0x2E, 
            0x2F, 
            0x30, 
            0x31, 
            0x32, 
            0x33, 
            0x34, 
            0x35, 
            0x36, 
            0x37, 
            0x38, 
            0x39, 
            0x3A, 
            0x3B, 
            0x3C, 
            0x3D, 
            0x3E, 
            0x3F, 
            0x40, 
            0x41, 
            0x42, 
            0x43, 
            0x44, 
            0x45, 
            0x46, 
            0x47, 
            0x48, 
            0x49, 
            0x4A, 
            0x4B, 
            0x4C, 
            0x4D, 
            0x4E, 
            0x4F, 
            0x50, 
            0x51, 
            0x52, 
            0x53, 
            0x54, 
            0x55, 
            0x56, 
            0x57, 
            0x58, 
            0x59, 
            0x5A, 
            0x5B, 
            0x5C, 
            0x5D, 
            0x5E, 
            0x5F, 
            0x60, 
            0x61, 
            0x62, 
            0x63, 
            0x64
        })
        Name (MAXL, 0x0B)
        Method (BIAN, 1, NotSerialized)
        {
            If (LEqual (And (DID1, 0x0F00), 0x0400))
            {
                Notify (\_SB.PCI0.IGPU.DD01, Arg0)
            }

            If (LEqual (And (DID2, 0x0F00), 0x0400))
            {
                Notify (\_SB.PCI0.IGPU.DD02, Arg0)
            }

            If (LEqual (And (DID3, 0x0F00), 0x0400))
            {
                Notify (\_SB.PCI0.IGPU.DD03, Arg0)
            }

            If (LEqual (And (DID4, 0x0F00), 0x0400))
            {
                Notify (\_SB.PCI0.IGPU.DD04, Arg0)
            }

            If (LEqual (And (DID5, 0x0F00), 0x0400))
            {
                Notify (\_SB.PCI0.IGPU.DD05, Arg0)
            }
        }
    }

    Scope (_SB.PCI0.PEG1.PEGP)
    {
        OperationRegion (DGPU, PCI_Config, Zero, 0x10)
        Field (DGPU, AnyAcc, NoLock, Preserve)
        {
            DGID,   16, 
            GDID,   16
        }

        Method (_DOS, 1, NotSerialized)  // _DOS: Disable Output Switching
        {
            And (Arg0, 0x03, DSEN)
        }
    }

    Scope (_SB.PCI0.PEG1.PEGP)
    {
        Method (DSSD, 0, NotSerialized)
        {
            Store (DSID, Local0)
            ShiftLeft (Local0, 0x10, Local1)
            Store (SVID, Local0)
            Add (Local0, Local1, Local0)
            Return (Local0)
        }
    }

    Scope (_SB.PCI0.IGPU)
    {
        Name (NDLC, Zero)
        Method (SNDL, 1, NotSerialized)
        {
            Store (Zero, NDLC)
            Store (Zero, NADL)
            Store (Zero, NDL2)
            Store (Zero, NDL3)
            Store (Zero, NDL4)
            Store (Zero, NDL5)
            If (And (Arg0, 0x08))
            {
                S2ND (0x0400)
            }

            If (And (Arg0, One))
            {
                S2ND (0x0100)
            }

            If (And (Arg0, 0x02))
            {
                S2ND (0x0200)
            }

            If (And (Arg0, 0x04))
            {
                S2ND (0x0300)
            }
        }

        Method (S2ND, 1, NotSerialized)
        {
            Increment (NDLC)
            If (LEqual (NDLC, One))
            {
                Store (Arg0, NADL)
            }

            If (LEqual (NDLC, 0x02))
            {
                Store (Arg0, NDL2)
            }

            If (LEqual (NDLC, 0x03))
            {
                Store (Arg0, NDL3)
            }

            If (LEqual (NDLC, 0x04))
            {
                Store (Arg0, NDL4)
            }

            If (LEqual (NDLC, 0x05))
            {
                Store (Arg0, NDL5)
            }
        }

        Method (SPBR, 2, NotSerialized)
        {
            If (Arg1)
            {
                SBLX (Arg0)
            }
            Else
            {
                Store (DMOD, Local0)
                If (LEqual (Local0, Zero))
                {
                    HKEY (0x1C)
                }
                ElseIf (LEqual (Local0, One))
                {
                    SBLX (Arg0)
                }
            }
        }

        Method (SBLX, 1, NotSerialized)
        {
            Store (Arg0, BCLP)
            Or (BCLP, 0x80000000, BCLP)
            Store (0x02, ASLC)
            Store (One, ASLE)
        }

        OperationRegion (IGPU, PCI_Config, Zero, 0x10)
        Field (IGPU, AnyAcc, NoLock, Preserve)
        {
            IGID,   16, 
            GDID,   16
        }
    }

    Scope (_SB.PCI0.IGPU.DD02)
    {
        Method (_BCL, 0, NotSerialized)  // _BCL: Brightness Control Levels
        {
            Return (\BCLP)
        }

        Method (_BCM, 1, NotSerialized)  // _BCM: Brightness Control Method
        {
            Store (One, Local0)
            Store (0x02, Local1)
            While (Local0)
            {
                If (LEqual (Arg0, DerefOf (Index (\BCLP, Local1))))
                {
                    Store (Zero, Local0)
                }
                Else
                {
                    Increment (Local1)
                    If (LEqual (0x0B, Local1))
                    {
                        Store (Zero, Local0)
                    }
                }
            }

            Decrement (Local1)
            Decrement (Local1)
            If (And (^^^LPCB.EC0.RDEC (0x7F), 0x02))
            {
                If (^^^LPCB.EC0.ACST)
                {
                    ShiftLeft (Local1, Zero, Local1)
                    ^^^LPCB.EC0.MDEC (0x83, 0xF0, Local1)
                }
                Else
                {
                    ShiftLeft (Local1, 0x04, Local1)
                    ^^^LPCB.EC0.MDEC (0x83, 0x0F, Local1)
                }
            }
            Else
            {
                ShiftLeft (Local1, Zero, Local1)
                ^^^LPCB.EC0.MDEC (0x83, 0xF0, Local1)
            }

            ^^^LPCB.EC0.SDBN (Arg0, Zero)
        }

        Method (_BQC, 0, NotSerialized)  // _BQC: Brightness Query Current
        {
            If (And (^^^LPCB.EC0.RDEC (0x7F), 0x02))
            {
                If (^^^LPCB.EC0.ACST)
                {
                    And (^^^LPCB.EC0.RDEC (0x83), 0x0F, Local1)
                    ShiftRight (Local1, Zero, Local1)
                }
                Else
                {
                    And (^^^LPCB.EC0.RDEC (0x83), 0xF0, Local1)
                    ShiftRight (Local1, 0x04, Local1)
                }
            }
            Else
            {
                And (^^^LPCB.EC0.RDEC (0x83), 0x0F, Local1)
                ShiftRight (Local1, Zero, Local1)
            }

            Increment (Local1)
            Increment (Local1)
            Store (DerefOf (Index (\BCLP, Local1)), Local0)
            Return (Local0)
        }
    }

    Scope (_SB.PCI0.LPCB.EC0)
    {
        Name (AOS1, Zero)
        Field (RAM, ByteAcc, Lock, Preserve)
        {
            Offset (0x05), 
            TMHH,   8, 
            TMHL,   8, 
            TMLH,   8, 
            TMLL,   8, 
            Offset (0x4B), 
            WAKS,   8, 
            Offset (0x4E), 
            AOAS,   1, 
            Offset (0x71), 
                ,   1, 
                ,   1, 
                ,   1, 
                ,   1, 
                ,   1, 
            WLS3,   1, 
            WLS4,   1, 
            WLS5,   1, 
            Offset (0x73), 
                ,   1, 
                ,   1, 
                ,   1, 
                ,   1, 
                ,   1, 
            WWS3,   1, 
            WWS4,   1, 
            WWS5,   1
        }

        Field (RAM, ByteAcc, Lock, Preserve)
        {
            Offset (0x71), 
            WLAN,   8, 
            Offset (0x73), 
            WWAN,   8
        }

        Method (GWAS, 0, NotSerialized)
        {
            Return (AOS1)
        }

        Method (SWAS, 1, NotSerialized)
        {
            And (Arg0, One, Local0)
            Store (Local0, AOAS)
            Store (Local0, AOS1)
        }

        Method (GWLW, 0, NotSerialized)
        {
            Store (Zero, Local0)
            Store (WLAN, Local1)
            If (And (Local1, One))
            {
                Or (Local0, One, Local0)
            }

            If (And (Local1, 0x20))
            {
                Or (Local0, 0x02, Local0)
            }

            If (And (Local1, 0x40))
            {
                Or (Local0, 0x04, Local0)
            }

            If (And (Local1, 0x80))
            {
                Or (Local0, 0x08, Local0)
            }

            Return (Local0)
        }

        Method (SWLW, 1, NotSerialized)
        {
            If (LEqual (And (Arg0, 0x02), 0x02))
            {
                Store (One, WLS3)
            }
            Else
            {
                Store (Zero, WLS3)
            }

            If (LEqual (And (Arg0, 0x04), 0x04))
            {
                Store (One, WLS4)
            }
            Else
            {
                Store (Zero, WLS4)
            }

            If (LEqual (And (Arg0, 0x08), 0x08))
            {
                Store (One, WLS5)
            }
            Else
            {
                Store (Zero, WLS5)
            }
        }

        Method (GWWW, 0, NotSerialized)
        {
            Store (Zero, Local0)
            Store (WWAN, Local1)
            If (And (Local1, One))
            {
                Or (Local0, One, Local0)
            }

            If (And (Local1, 0x20))
            {
                Or (Local0, 0x02, Local0)
            }

            If (And (Local1, 0x40))
            {
                Or (Local0, 0x04, Local0)
            }

            If (And (Local1, 0x80))
            {
                Or (Local0, 0x08, Local0)
            }

            Return (Local0)
        }

        Method (SWWW, 1, NotSerialized)
        {
            If (LEqual (And (Arg0, 0x02), 0x02))
            {
                Store (One, WWS3)
            }
            Else
            {
                Store (Zero, WWS3)
            }

            If (LEqual (And (Arg0, 0x04), 0x04))
            {
                Store (One, WWS4)
            }
            Else
            {
                Store (Zero, WWS4)
            }

            If (LEqual (And (Arg0, 0x08), 0x08))
            {
                Store (One, WWS5)
            }
            Else
            {
                Store (Zero, WWS5)
            }
        }

        Method (SASW, 1, NotSerialized)
        {
            If (LEqual (And (ShiftRight (Arg0, 0x18), 0x80), 0x80)){}
            ElseIf (LEqual (Arg0, Zero)){}
            Else
            {
                And (Arg0, 0xFF, Local0)
                Store (Local0, TMLL)
                And (ShiftRight (Arg0, 0x08), 0xFF, Local0)
                Store (Local0, TMLH)
                And (ShiftRight (Arg0, 0x10), 0xFF, Local0)
                Store (Local0, TMHL)
                And (ShiftRight (Arg0, 0x18), 0x7F, Local0)
                Store (Local0, TMHH)
                WBEC (Zero, 0xA0)
            }
        }

        Method (GPWW, 0, NotSerialized)
        {
            Store (WAKS, Local0)
            If (LEqual (Local0, 0xA0))
            {
                Store (0x02, Local0)
                Or (Local0, 0x10, Local0)
                Return (Local0)
            }

            If (LEqual (Local0, 0xA1))
            {
                Return (0x08)
            }

            If (LEqual (Local0, 0xA2))
            {
                Store (0x04, Local0)
                Or (Local0, 0x10, Local0)
                Return (Local0)
            }

            Return (One)
        }
    }

    Scope (_SB.PCI0.PEG1.PEGP)
    {
        Method (NVTC, 0, NotSerialized)
        {
            If (LNotEqual (ECON, Zero))
            {
                Return (^^^LPCB.EC0.ECTC)
            }

            Return (Zero)
        }

        Method (GPSS, 0, NotSerialized)
        {
            Return (One)
        }

        Name (SPLU, Zero)
        Method (USPL, 1, NotSerialized)
        {
            If (LEqual (GPUT, 0x03))
            {
                If (Arg0)
                {
                    Store (One, SPLU)
                }

                Notify (PEGP, 0xC0)
            }
        }
    }

    Scope (_SB.PCI0.RP01)
    {
        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
        {
            0x09, 
            0x04
        })
    }

    Scope (_SB.PCI0.RP01.PXSX)
    {
        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
        {
            0x09, 
            0x04
        })
    }

    Scope (_SB.PCI0.RP02)
    {
        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
        {
            0x09, 
            0x04
        })
    }

    Scope (_SB.PCI0.RP02.PXSX)
    {
        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
        {
            0x09, 
            0x04
        })
    }

    Scope (_SB.PCI0.RP03)
    {
        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
        {
            0x09, 
            0x05
        })
    }

    Scope (_SB.PCI0.RP03.PXSX)
    {
        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
        {
            0x09, 
            0x05
        })
    }

    Scope (_SB.PCI0.RP04)
    {
        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
        {
            0x09, 
            0x04
        })
    }

    Scope (_SB.PCI0.RP04.PXSX)
    {
        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
        {
            0x09, 
            0x04
        })
    }

    Scope (_SB.PCI0.RP05)
    {
        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
        {
            0x09, 
            0x04
        })
    }

    Scope (_SB.PCI0.RP05.PXSX)
    {
        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
        {
            0x09, 
            0x04
        })
    }

    Scope (_SB.PCI0.RP06)
    {
        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
        {
            0x09, 
            0x04
        })
    }

    Scope (_SB.PCI0.RP06.PXSX)
    {
        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
        {
            0x09, 
            0x04
        })
    }

    Scope (_SB.PCI0.RP07)
    {
        Name (PXSX._RMV, One)  // _RMV: Removal Status
        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
        {
            0x09, 
            0x04
        })
    }

    Scope (_SB.PCI0.RP07.PXSX)
    {
        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
        {
            0x09, 
            0x04
        })
    }

    Scope (_SB.PCI0.RP08)
    {
        Name (PXSX._RMV, One)  // _RMV: Removal Status
        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
        {
            0x09, 
            0x04
        })
    }

    Scope (_SB.PCI0.RP08.PXSX)
    {
        Name (_PRW, Package (0x02)  // _PRW: Power Resources for Wake
        {
            0x09, 
            0x04
        })
    }

    Scope (_SB.PCI0.RP03.PXSX)
    {
        Method (_STA, 0, NotSerialized)  // _STA: Status
        {
            If (LDIS)
            {
                Return (0x0B)
            }

            Return (0x0F)
        }
    }

    Method (PTS, 1, NotSerialized)
    {
        If (Arg0){}
    }

    Method (WAK, 1, NotSerialized)
    {
    }

    Method (MALD, 0, NotSerialized)
    {
        Return (Package (0x03)
        {
            "MaLd0n 2018", 
            "olarila.com/forum", 
            "insanelymac.com/forum"
        })
    }
}

